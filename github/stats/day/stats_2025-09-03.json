{
  "interval": {
    "intervalStart": "2025-09-03T00:00:00.000Z",
    "intervalEnd": "2025-09-04T00:00:00.000Z",
    "intervalType": "day"
  },
  "repository": "elizaos/eliza",
  "overview": "From 2025-09-03 to 2025-09-04, elizaos/eliza had 8 new PRs (9 merged), 0 new issues, and 11 active contributors.",
  "topIssues": [
    {
      "id": "I_kwDOMT5cIs7F0hup",
      "title": "Move to core pure",
      "author": "borisudovicic",
      "number": 5766,
      "repository": "elizaos/eliza",
      "body": "Make sure it works, get up to speed for low level devs, browser support, streaming in core, etc.",
      "createdAt": "2025-08-13T15:20:17Z",
      "closedAt": "2025-09-03T22:40:09Z",
      "state": "CLOSED",
      "commentCount": 0
    },
    {
      "id": "I_kwDOMT5cIs7H3Obz",
      "title": "Implement Dynamic Prompting (Multi-Turn Conversations) in ElizaOS Scenarios",
      "author": "linear",
      "number": 5819,
      "repository": "elizaos/eliza",
      "body": "# Dynamic Prompting Implementation for ElizaOS Scenarios\n\n## Overview\n\nImplement **Dynamic Prompting** (multi-turn conversations) in ElizaOS scenarios to enable sophisticated testing of agent behavior through extended conversations where an LLM simulates realistic user responses.\n\n## Problem Statement\n\nCurrent ElizaOS scenarios are limited to single-turn interactions, making it impossible to test:\n\n* Multi-step problem solving\n* Context retention across conversation turns\n* Clarification and follow-up question handling\n* Natural conversation flow assessment\n* Error recovery and correction flows\n\n## Solution\n\nExtend the existing scenario framework to support multi-turn conversations where:\n\n1. **Agent** receives initial user input\n2. **Agent** responds with thoughts, actions, and replies\n3. **LLM Simulator** generates realistic user follow-up based on agent response\n4. **Agent** continues the conversation based on simulated user input\n5. Process repeats for specified number of turns or until conditions are met\n\n## Key Requirements\n\n### 1\\. Backward Compatibility\n\n* **100% backward compatible** - all existing scenarios must work unchanged\n* Gradual adoption path for teams to enhance existing scenarios\n* No breaking changes to existing APIs or CLI commands\n\n### 2\\. Core Components\n\n#### Schema Extensions\n\n* Extend `RunStepSchema` with optional `conversation` field\n* Add new evaluation types: `conversation_length`, `conversation_flow`, `user_satisfaction`, `context_retention`\n* Support conversation configuration with user simulator settings\n\n#### User Simulator\n\n* LLM-based response generation with persona-driven prompts\n* Configurable personality, objectives, constraints, and knowledge level\n* Realistic conversation progression based on agent responses\n\n#### Conversation Manager\n\n* Multi-turn execution orchestration\n* Termination condition checking (satisfaction, solution provided, escalation needed)\n* Turn-level and final evaluation support\n* Conversation transcript generation\n\n#### New Evaluators\n\n* **Conversation Length**: Validate optimal conversation duration\n* **Conversation Flow**: Detect required conversation patterns\n* **User Satisfaction**: Measure user satisfaction through sentiment analysis\n* **Context Retention**: Verify agent memory across conversation turns\n\n### 3\\. Configuration Examples\n\n#### Basic Multi-Turn Conversation\n\n```yaml\nrun:\n  - input: \"I need help with something\"\n    conversation:\n      max_turns: 4\n      user_simulator:\n        persona: \"polite customer with a billing question\"\n        objective: \"find out why charged twice this month\"\n        temperature: 0.6\n      final_evaluations:\n        - type: \"llm_judge\"\n          prompt: \"Did the agent successfully help resolve the billing issue?\"\n          expected: \"yes\"\n```\n\n#### Advanced Persona-Driven Conversation\n\n```yaml\nrun:\n  - input: \"This is ridiculous! Your product doesn't work!\"\n    conversation:\n      max_turns: 6\n      user_simulator:\n        persona: \"angry customer who had bad experience\"\n        objective: \"vent frustration but eventually want help\"\n        style: \"initially hostile, gradually becomes cooperative if handled well\"\n        constraints:\n          - \"Start with complaints and criticism\"\n          - \"Don't accept first solution immediately\"\n          - \"Become more cooperative if agent shows empathy\"\n      termination_conditions:\n        - type: \"user_expresses_satisfaction\"\n        - type: \"agent_escalates_to_human\"\n```\n\n## Implementation Plan\n\n### Phase 1: Core Infrastructure (Weeks 1-2)\n\n- [ ] Schema extensions and type definitions\n- [ ] User Simulator implementation\n- [ ] Basic conversation flow testing\n\n### Phase 2: Conversation Management (Weeks 3-4)\n\n- [ ] ConversationManager class implementation\n- [ ] Provider integration (LocalEnvironmentProvider, E2BEnvironmentProvider)\n- [ ] Termination condition logic\n\n### Phase 3: Evaluation System (Weeks 5-6)\n\n- [ ] New conversation evaluators implementation\n- [ ] EvaluationEngine integration\n- [ ] End-to-end testing\n\n### Phase 4: Polish and Documentation (Week 7)\n\n- [ ] Example scenarios creation\n- [ ] Documentation updates\n- [ ] Performance optimizations\n\n## Technical Specifications\n\n### File Structure\n\n```\npackages/cli/src/commands/scenario/src/\nâ”œâ”€â”€ schema.ts (extend)\nâ”œâ”€â”€ conversation-types.ts (new)\nâ”œâ”€â”€ UserSimulator.ts (new)\nâ”œâ”€â”€ ConversationManager.ts (new)\nâ”œâ”€â”€ ConversationEvaluators.ts (new)\nâ”œâ”€â”€ LocalEnvironmentProvider.ts (modify)\nâ”œâ”€â”€ E2BEnvironmentProvider.ts (modify)\nâ””â”€â”€ __tests__/\n    â”œâ”€â”€ UserSimulator.test.ts (new)\n    â”œâ”€â”€ ConversationManager.test.ts (new)\n    â”œâ”€â”€ ConversationEvaluators.test.ts (new)\n    â””â”€â”€ integration/ (new tests)\n```\n\n### Key Interfaces\n\n```typescript\ninterface ConversationConfig {\n  max_turns: number;\n  user_simulator: UserSimulatorConfig;\n  termination_conditions: TerminationCondition[];\n  turn_evaluations: EvaluationSchema[];\n  final_evaluations: EvaluationSchema[];\n}\n\ninterface UserSimulatorConfig {\n  persona: string;\n  objective: string;\n  style?: string;\n  constraints: string[];\n  knowledge_level: 'beginner' | 'intermediate' | 'expert';\n}\n```\n\n## Success Criteria\n\n### Functional Requirements\n\n- [ ] Single-turn scenarios continue to work unchanged\n- [ ] Multi-turn conversations execute successfully\n- [ ] User simulator generates realistic, persona-consistent responses\n- [ ] Termination conditions work correctly\n- [ ] All new evaluation types function properly\n- [ ] Matrix testing supports conversation parameters\n\n### Performance Requirements\n\n- [ ] Conversation scenarios complete within reasonable time limits\n- [ ] Memory usage remains within acceptable bounds\n- [ ] LLM API usage is optimized and rate-limited appropriately\n\n### Quality Requirements\n\n- [ ] Comprehensive test coverage (unit, integration, e2e)\n- [ ] Clear error handling and debugging capabilities\n- [ ] Well-documented examples and migration guide\n\n## Risk Mitigation\n\n### Technical Risks\n\n* **LLM API failures**: Implement retry logic and graceful degradation\n* **Infinite loops**: Hard max_turns limit and timeout mechanisms\n* **Memory leaks**: Turn-based cleanup and conversation archiving\n\n### Integration Risks\n\n* **Breaking existing scenarios**: Comprehensive backward compatibility testing\n* **Performance impact**: Resource monitoring and optimization\n\n## Dependencies\n\n* Existing `askAgentViaApi` infrastructure\n* Current evaluation engine and trajectory reconstruction\n* LLM provider integration for user simulation\n* Database schema (no changes required)\n\n## Acceptance Criteria\n\n1. **Backward Compatibility**: All existing scenarios pass without modification\n2. **New Functionality**: Multi-turn conversation scenarios execute successfully\n3. **Evaluation Quality**: New evaluators provide meaningful insights\n4. **Performance**: No significant impact on existing scenario execution time\n5. **Documentation**: Clear examples and migration path provided",
      "createdAt": "2025-08-25T20:36:17Z",
      "closedAt": "2025-09-03T22:39:53Z",
      "state": "CLOSED",
      "commentCount": 0
    }
  ],
  "topPRs": [
    {
      "id": "PR_kwDOMT5cIs6mtENQ",
      "title": "feat: Unifies release workflow for NPM packages",
      "author": "ChristopherTrimboli",
      "number": 5877,
      "body": "## ðŸ“‹ PR: Unify NPM Release Workflows with Alpha Pattern\n\n### Summary\nThis PR aligns all NPM release workflows with the successful pattern established in the `npm-alpha.yml` workflow, creating a unified and maintainable release pipeline.\n\n### Changes Made\n\n#### ðŸ”„ **Workflow Consolidation**\n- **Unified `release.yaml`** to handle all release types (alpha, beta, production) in a single workflow\n- **Removed redundant workflows**: Deleted `pre-release.yml` and `npm-prerelease.yml` to eliminate duplication\n- **Streamlined triggers**: \n  - `develop` branch â†’ Alpha releases\n  - `main` branch â†’ Beta releases  \n  - GitHub release tags â†’ Production releases\n\n#### ðŸ“¦ **Lerna Pattern Implementation**\nAll workflows now follow the consistent lerna pattern:\n- âœ… Proper Git configuration with bot user\n- âœ… Consistent Node/Bun versions (Node 23.3.0, Bun 1.2.21)\n- âœ… Single commit for all version changes including `bun.lock`\n- âœ… Proper tag creation and pushing\n- âœ… Simplified `lerna publish from-package` approach\n\n#### ðŸ§¹ **Script Cleanup**\n- Removed unused `rc` and `next` release scripts from `package.json`\n- Maintained only the scripts actively used by workflows (alpha, beta, latest)\n- Consistent version and release script patterns\n\n### Benefits\n- **Reduced Complexity**: Single workflow to maintain instead of 3+ separate ones\n- **Consistent Behavior**: All releases follow the same proven pattern\n- **Better Maintainability**: Changes only need to be made in one place\n- **Clearer Release Strategy**: Obvious mapping between branches and release channels\n- **Faster CI**: Optimized dependency installation with `--no-optional` and proper caching\n\n### Version Format Support\nThe workflow correctly handles all version formats:\n- Production: `v1.5.5`\n- Alpha: `v1.5.5-alpha.1`\n- Beta: `v1.5.5-beta.1`\n\n### Testing\n- [x] Workflow syntax validated\n- [x] Version extraction logic verified for all release types\n- [x] Package.json scripts tested locally\n- [x] Lerna commands confirmed to work with current setup\n\n### Migration Notes\n- Teams should be aware that pre-release workflow has been removed\n- All release operations now go through the unified `release.yaml` workflow\n- Manual dispatch option available for flexibility\n\nThis consolidation follows best practices for CI/CD and significantly reduces the maintenance burden while improving reliability.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-09-03T18:26:47Z",
      "mergedAt": "2025-09-03T20:20:59Z",
      "additions": 284,
      "deletions": 335
    },
    {
      "id": "PR_kwDOMT5cIs6mHlEn",
      "title": "fix: logger debug level & style",
      "author": "0xbbjoker",
      "number": 5849,
      "body": "# Relates to\r\n\r\n<!-- Fixed logger debug level not working and improved terminal readability -->\r\n\r\n# Risks\r\n\r\nLow. This change only affects logging output presentation and fixes a bug with debug level logging. No functional changes to core logic.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR fixes the logger debug level that wasn't properly working and significantly improves terminal log readability by:\r\n\r\n1. **Fixed debug level configuration**: Removed hardcoded log level from runtime initialization, allowing global environment variable (`LOG_LEVEL`) to properly control debug output\r\n2. **Improved terminal color scheme**:\r\n   - Changed info logs from cyan to blue for better readability\r\n   - Added white text on red background for critical alerts\r\n   - Used bold styling for important log levels (error, warn, info, success)\r\n   - Added underline to 'fail' level to distinguish from regular errors\r\n   - Dimmed regular 'log' output to reduce visual noise\r\n   - Made verbose logs dim and italic for minimal distraction\r\n3. **Removed emoji clutter**: Cleared emojis from log output that were making terminal screenshots harder to read\r\n4. **Simplified Adze level mapping**: Created cleaner mapping function for ElizaOS to Adze log levels\r\n\r\n## What kind of change is this?\r\n\r\nBug fixes (non-breaking change which fixes an issue)\r\nImprovements (misc. changes to existing features)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nReview the changes in `packages/core/src/logger.ts`, specifically the `customLevelConfig` object (lines 207-281) and the simplified level mapping logic.\r\n\r\n## Detailed testing steps\r\n\r\n1. Set `LOG_LEVEL=debug` in your `.env` file\r\n2. Run `bun run start` or `elizaos start`\r\n3. Verify that:\r\n   - Debug messages now appear (previously weren't showing)\r\n   - Different log levels have distinct visual appearance\r\n   - Critical alerts (fatal) have red background with white text\r\n   - Info logs are blue instead of cyan\r\n   - Success messages are bold green\r\n   - Regular logs are dimmed for less visual clutter\r\n\r\n## Screenshots\r\n### Before\r\n- Debug level wasn't working regardless of LOG_LEVEL setting\r\n- Cyan info logs were hard to read on some terminals\r\n- All red logs (error, fail, alert) looked the same\r\n- Emojis cluttered the output\r\n\r\n### After\r\n- Debug level responds to LOG_LEVEL environment variable\r\n- Blue info logs with better contrast\r\n- Visual hierarchy: alerts (red bg) > errors (bold red) > warnings (bold yellow) > info (bold blue) > log (dimmed)\r\n- Clean, professional terminal output without emoji clutter\r\n\r\n<!-- Discord username: 0xbbjoker -->",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-30T18:46:14Z",
      "mergedAt": "2025-09-03T11:36:00Z",
      "additions": 234,
      "deletions": 55
    },
    {
      "id": "PR_kwDOMT5cIs6mm8Qb",
      "title": "feat: Add alpha CLI tests workflow with NPM dependency",
      "author": "wtfsayo",
      "number": 5873,
      "body": "## Summary\n\nThis PR introduces a new GitHub Actions workflow to test the published alpha version of the CLI package, ensuring the npm-published version works correctly across different platforms.\n\n## Problem\n\nPreviously, there was no automated testing of the globally installed `@elizaos/cli@alpha` package after it was published to npm. Tests were only running against the local development version, which could miss issues with the published package.\n\n## Solution\n\n### New Workflow: `.github/workflows/alpha-cli-tests.yml`\n- **Dependency**: Runs only after the \"NPM Alpha Release\" workflow completes successfully\n- **Trigger**: Uses `workflow_run` event to ensure it tests the freshly published alpha version\n- **Global Testing**: Installs `@elizaos/cli@alpha` globally via `bun install -g`\n- **Test Shim**: Creates a shim at `packages/cli/dist/index.js` that forwards all calls to the global `elizaos` command, ensuring all tests exercise the published CLI\n- **Cross-platform**: Tests on Ubuntu, macOS, and Windows\n\n### Key Features\n1. **Sequential Execution**: Only runs after successful NPM alpha release\n2. **Global CLI Testing**: Tests the actual published package, not local development code  \n3. **Comprehensive Coverage**: Runs the same test suite but against the global installation\n4. **Manual Trigger**: Includes `workflow_dispatch` for manual testing when needed\n\n### Removed Obsolete Workflows\n- Removed `cli-prod-validation.yml` (replaced by this workflow)\n- Removed `daily-code-quality-analysis.yml` (outdated)\n\n## Testing\n- The workflow will automatically run after the next NPM Alpha Release\n- Can be manually triggered via GitHub Actions UI for immediate testing\n- Tests the exact same functionality but using the globally installed alpha CLI\n\n## Impact\nThis ensures that the published `@elizaos/cli@alpha` package works correctly for end users who install it globally, catching any packaging or dependency issues before they reach users.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-09-03T09:16:22Z",
      "mergedAt": "2025-09-03T09:33:33Z",
      "additions": 141,
      "deletions": 938
    },
    {
      "id": "PR_kwDOMT5cIs6mp3U-",
      "title": "fix(cli): fix port detection for automatic fallback",
      "author": "standujar",
      "number": 5876,
      "body": " # Risks\r\n\r\n  Low risk. This fix improves error handling and prevents the CLI from crashing when default port is occupied.\r\n\r\n  # Background\r\n\r\n  ## What does this PR do?\r\n\r\n  This PR fixes the port detection mechanism in the ElizaOS CLI to properly detect when a port is occupied and automatically find the next available port. Previously, the CLI would crash with an EADDRINUSE error when port 3000 was already in use.\r\n\r\n  ## What kind of change is this?\r\n\r\n  Bug fixes (non-breaking change which fixes an issue)\r\n\r\n  # Documentation changes needed?\r\n\r\n  My changes do not require a change to the project documentation.\r\n\r\n  # Testing\r\n\r\n  ## Where should a reviewer start?\r\n\r\n  Start by reviewing the changes in `packages/cli/src/utils/port-handling.ts` to understand the core fix, then check the tests in `packages/cli/src/utils/__tests__/port-handling.test.ts`.\r\n\r\n  ## Detailed testing steps\r\n\r\n  1. Start a server on port 3000 (e.g., `bun x http-server`)\r\n  2. In another terminal, try to start with the cli without specifying a port:\r\n     ```bash\r\n     cd [your-elizaos-project]\r\n     elizaos start\r\n  3. Verify that the CLI detects port 3000 is occupied and automatically uses port 3001\r\n  4. The console should show: WARN: Port is in use, using alternate port\r\n  5. Server should start successfully on port 3001\r\n\r\n  Unit Tests\r\n\r\n  Run the unit tests:\r\n  cd packages/cli\r\n  bun test src/utils/__tests__/port-handling.test.ts\r\n\r\n  All 8 tests should pass with 100% code coverage:\r\n  - âœ… isPortFree correctly detects free ports\r\n  - âœ… isPortFree correctly detects occupied ports\r\n  - âœ… Port detection respects the host parameter\r\n  - âœ… findNextAvailablePort finds next free port when first is occupied\r\n  - âœ… findNextAvailablePort skips multiple occupied ports\r\n\r\n  Discord username @stan0473 ",
      "repository": "elizaos/eliza",
      "createdAt": "2025-09-03T13:33:31Z",
      "mergedAt": "2025-09-03T13:57:31Z",
      "additions": 124,
      "deletions": 7
    },
    {
      "id": "PR_kwDOMT5cIs6mnUc1",
      "title": "fix: simplify alpha CLI tests to run basic smoke tests",
      "author": "wtfsayo",
      "number": 5875,
      "body": "## Problem\n\nThe alpha CLI tests workflow was overly complex and fragile:\n- Running full TypeScript test suites that may not be compatible with the published alpha package\n- Complex setup with shims and cross-env dependencies\n- Tests were too comprehensive for a smoke test validation\n- Excessive debugging output and unnecessary steps\n- 45-minute timeout was too long for basic validation\n\n## Solution\n\nThis PR simplifies the alpha CLI tests to focus on basic smoke tests that validate the core functionality:\n\n### Tests Implemented\n1. **Version check** - `elizaos -v` works\n2. **Create agent** - `elizaos create test-new-agent -y` successfully creates project\n3. **Start agent** - `cd test-new-agent && elizaos start` starts the server\n4. **Create plugin** - `elizaos create -t plugin test-plugin` creates plugin\n5. **Dev mode** - `cd plugin-test-plugin && elizaos dev` runs development server\n\n### Key Improvements\n- âœ… Cross-platform timeout handling for Windows/macOS/Linux\n- âœ… Proper success detection based on actual AgentServer output messages\n- âœ… Simplified test structure with clear pass/fail indicators\n- âœ… Reduced timeout from 45 to 20 minutes\n- âœ… Removed unnecessary dependencies (cross-env, BATS)\n- âœ… Cleaner output with just essential information\n\n### Testing\nThe tests now properly detect server startup by looking for:\n- \"Startup successful\"\n- \"AgentServer is listening\"\n- \"Starting server\"\n- \"Watching\" (for dev mode)\n\nThis ensures the alpha package is functional across all platforms before users download it.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-09-03T09:49:23Z",
      "mergedAt": "2025-09-03T09:50:42Z",
      "additions": 118,
      "deletions": 57
    }
  ],
  "codeChanges": {
    "additions": 1032,
    "deletions": 1484,
    "files": 34,
    "commitCount": 68
  },
  "completedItems": [
    {
      "title": "fix: logger debug level & style",
      "prNumber": 5849,
      "type": "bugfix",
      "body": "# Relates to\r\n\r\n<!-- Fixed logger debug level not working and improved terminal readability -->\r\n\r\n# Risks\r\n\r\nLow. This change only affects logging output presentation and fixes a bug with debug level logging. No functional changes to core ",
      "files": [
        "packages/core/src/logger.ts",
        "packages/core/src/runtime.ts",
        "packages/cli/tests/commands/agent.test.ts",
        "packages/cli/tests/commands/plugins.test.ts",
        "packages/core/src/__tests__/runtime.test.ts"
      ]
    },
    {
      "title": "feat: Unifies release workflow for NPM packages",
      "prNumber": 5877,
      "type": "feature",
      "body": "## ðŸ“‹ PR: Unify NPM Release Workflows with Alpha Pattern\n\n### Summary\nThis PR aligns all NPM release workflows with the successful pattern established in the `npm-alpha.yml` workflow, creating a unified and maintainable release pipeline.\n\n#",
      "files": [
        ".github/workflows/npm-alpha.yml",
        ".github/workflows/pre-release.yml",
        ".github/workflows/release.yaml",
        "package.json"
      ]
    },
    {
      "title": "fix(cli): fix port detection for automatic fallback",
      "prNumber": 5876,
      "type": "bugfix",
      "body": " # Risks\r\n\r\n  Low risk. This fix improves error handling and prevents the CLI from crashing when default port is occupied.\r\n\r\n  # Background\r\n\r\n  ## What does this PR do?\r\n\r\n  This PR fixes the port detection mechanism in the ElizaOS CLI to",
      "files": [
        "packages/cli/src/commands/start/actions/server-start.ts",
        "packages/cli/src/utils/__tests__/port-handling.test.ts",
        "packages/cli/src/utils/port-handling.ts"
      ]
    },
    {
      "title": "fix: simplify alpha CLI tests to run basic smoke tests",
      "prNumber": 5875,
      "type": "bugfix",
      "body": "## Problem\n\nThe alpha CLI tests workflow was overly complex and fragile:\n- Running full TypeScript test suites that may not be compatible with the published alpha package\n- Complex setup with shims and cross-env dependencies\n- Tests were to",
      "files": [
        ".github/workflows/alpha-cli-tests.yml"
      ]
    },
    {
      "title": "feat: Update bun to latest version 1.2.21 across monorepo",
      "prNumber": 5874,
      "type": "feature",
      "body": "## ðŸš€ Update Bun to Latest Version 1.2.21\n\n### Problem\nThe ElizaOS monorepo was using inconsistent and outdated versions of Bun across different packages and GitHub workflows:\n- Root package.json: bun@1.2.15, @types/bun: 'latest'\n- CLI pack",
      "files": [
        ".devcontainer/devcontainer.json",
        ".github/workflows/alpha-cli-tests.yml",
        ".github/workflows/cli-tests.yml",
        ".github/workflows/client-cypress-tests.yml",
        ".github/workflows/jsdoc-automation.yml",
        ".github/workflows/npm-alpha.yml",
        ".github/workflows/tauri-ci.yml",
        ".github/workflows/update-news.yml",
        "package.json",
        "packages/api-client/package.json",
        "packages/cli/package.json",
        "packages/core/package.json",
        "packages/plugin-bootstrap/package.json"
      ]
    },
    {
      "title": "feat: Add alpha CLI tests workflow with NPM dependency",
      "prNumber": 5873,
      "type": "feature",
      "body": "## Summary\n\nThis PR introduces a new GitHub Actions workflow to test the published alpha version of the CLI package, ensuring the npm-published version works correctly across different platforms.\n\n## Problem\n\nPreviously, there was no automa",
      "files": [
        ".devcontainer/devcontainer.json",
        ".github/workflows/alpha-cli-tests.yml",
        ".github/workflows/cli-prod-validation.yml",
        ".github/workflows/cli-tests.yml",
        ".github/workflows/client-cypress-tests.yml",
        ".github/workflows/daily-code-quality-analysis.yml",
        ".github/workflows/jsdoc-automation.yml",
        ".github/workflows/npm-alpha.yml",
        ".github/workflows/tauri-ci.yml",
        ".github/workflows/update-news.yml",
        "package.json",
        "packages/api-client/package.json",
        "packages/cli/package.json",
        "packages/core/package.json",
        "packages/plugin-bootstrap/package.json"
      ]
    },
    {
      "title": "fix: crypto-browserify dependency issue",
      "prNumber": 5872,
      "type": "bugfix",
      "body": "## Problem\nThe @elizaos/core package was failing with the error:\n\n\n## Root Cause\nThe  file was importing  from  for encryption/decryption operations, but  was only listed as an external dependency in the build configuration (), not as a pro",
      "files": [
        "bun.lock",
        "packages/core/build.ts",
        "packages/core/package.json",
        "packages/core/src/__tests__/runtime.test.ts"
      ]
    },
    {
      "title": "chore: Bump to 1.5.5-alpha.1",
      "prNumber": 5871,
      "type": "other",
      "body": "This PR bumps the version across the entire monorepo from 1.4.3-alpha.6 to 1.5.5-alpha.1.\n\n## Changes Made\n\n### Version Updates\n- Updated version in  from 1.4.3-alpha.6 to 1.5.5-alpha.1\n- Updated version in all package.json files across the",
      "files": [
        "lerna.json",
        "packages/api-client/package.json",
        "packages/cli/package.json",
        "packages/config/package.json",
        "packages/core/package.json",
        "packages/plugin-bootstrap/package.json",
        "packages/plugin-dummy-services/package.json",
        "packages/plugin-sql/package.json",
        "packages/server/package.json",
        "packages/test-utils/package.json"
      ]
    },
    {
      "title": "fix: Unhandled Promise in Action Update",
      "prNumber": 5870,
      "type": "bugfix",
      "body": "related: https://github.com/elizaOS/eliza/pull/5865#discussion_r2317180747",
      "files": [
        "packages/plugin-bootstrap/src/index.ts"
      ]
    }
  ],
  "topContributors": [
    {
      "username": "wtfsayo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82053242?u=98209a1f10456f42d4d2fa71db4d5bf4a672cbc3&v=4",
      "totalScore": 217.42149036133915,
      "prScore": 217.42149036133915,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "standujar",
      "avatarUrl": "https://avatars.githubusercontent.com/u/16385918?u=718bdcd1585be8447bdfffb8c11ce249baa7532d&v=4",
      "totalScore": 54.19677647415953,
      "prScore": 49.69677647415953,
      "issueScore": 0,
      "reviewScore": 4.5,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "ChristopherTrimboli",
      "avatarUrl": "https://avatars.githubusercontent.com/u/27584221?u=0d816ce1dcdea8f925aba18bb710153d4a87a719&v=4",
      "totalScore": 40.11843895607828,
      "prScore": 39.918438956078276,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": null
    },
    {
      "username": "tcm390",
      "avatarUrl": "https://avatars.githubusercontent.com/u/60634884?u=c6c41679b8322eaa0c81f72e0b4ed95e80f0ac16&v=4",
      "totalScore": 21.026718956217053,
      "prScore": 21.026718956217053,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "1BDO",
      "avatarUrl": "https://avatars.githubusercontent.com/u/210645034?v=4",
      "totalScore": 7.4991471805599454,
      "prScore": 7.159147180559946,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.33999999999999997,
      "summary": null
    },
    {
      "username": "claude",
      "avatarUrl": "https://avatars.githubusercontent.com/in/1236702?v=4",
      "totalScore": 4.938,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 4.5,
      "commentScore": 0.43799999999999994,
      "summary": null
    }
  ],
  "newPRs": 8,
  "mergedPRs": 9,
  "newIssues": 0,
  "closedIssues": 2,
  "activeContributors": 11
}