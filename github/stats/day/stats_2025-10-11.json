{
  "interval": {
    "intervalStart": "2025-10-11T00:00:00.000Z",
    "intervalEnd": "2025-10-12T00:00:00.000Z",
    "intervalType": "day"
  },
  "repository": "elizaos/eliza",
  "overview": "From 2025-10-11 to 2025-10-12, elizaos/eliza had 4 new PRs (2 merged), 1 new issues, and 5 active contributors.",
  "topIssues": [
    {
      "id": "I_kwDOMT5cIs7Q7Gpe",
      "title": "Feature Request: Add CometAPI support to ElizaOS",
      "author": "TensorNull",
      "number": 6055,
      "repository": "elizaos/eliza",
      "body": "\n**Is your feature request related to a problem? Please describe.**\n\nCurrently, ElizaOS supports multiple LLM providers like OpenAI, Gemini, Anthropic, Llama, and Grok. However, developers looking for a unified API that provides access to a wide variety of LLMs along with multimodal generation capabilities (text, images, video, audio) need to integrate multiple providers separately, which can be complex and time-consuming.\n\n**Describe the solution you'd like**\n\nWe'd like to propose adding CometAPI as a model provider option in ElizaOS. CometAPI offers a robust API that provides access to a comprehensive suite of large language models and multimodal generation capabilities through simple, easy-to-use endpoints. This would give ElizaOS users:\n\n- Access to a wide variety of LLMs through a single integration\n- Multimodal generation capabilities (text, images, video, audio, etc.)\n- Simple API endpoints that align with ElizaOS's model-agnostic architecture\n- Cost-effective pricing options for different use cases\n\n**CometAPI Resources**\n- [Website](https://www.cometapi.com/?utm_source=eliza&utm_campaign=integration&utm_medium=integration&utm_content=integration)\n- [Documentation](https://api.cometapi.com/doc)\n- [Get an API Key](https://api.cometapi.com/console/token)\n- [Pricing](https://api.cometapi.com/pricing)\n\n**Describe alternatives you've considered**\n\nThe current approach requires developers to integrate multiple LLM providers separately, each with their own API format and authentication. While this works, it increases complexity and maintenance overhead. CometAPI would provide a unified interface for multiple models and modalities.\n\n**Additional context**\n\nWe're CometAPI, and we'd be glad to help integrate our API into ElizaOS. If you're interested, we can submit a pull request that aligns with your project's coding standards and guidelines, following ElizaOS's plugin architecture to ensure seamless integration with the existing model provider system.\n",
      "createdAt": "2025-10-11T04:26:08Z",
      "closedAt": null,
      "state": "OPEN",
      "commentCount": 0
    }
  ],
  "topPRs": [
    {
      "id": "PR_kwDOMT5cIs6tQLtD",
      "title": "elizaos deploy r2 artifacts style",
      "author": "ChristopherTrimboli",
      "number": 6058,
      "body": "## Overview\r\n\r\nThis PR completely migrates the ElizaOS CLI deployment system from traditional Docker image builds to a modern bootstrapper architecture. This change significantly improves deployment speed, reduces resource usage, and eliminates platform size limitations.\r\n\r\n## What Changed\r\n\r\n### 🚀 New Bootstrapper Architecture\r\n\r\n**Added:**\r\n- `deploy-bootstrapper.ts` - Core bootstrapper deployment logic\r\n- `artifact.ts` - Artifact creation and management utilities\r\n- `r2-client.ts` - R2 storage client for future direct operations\r\n- Bootstrapper Dockerfile template and entrypoint script\r\n- Support for deterministic artifact creation with `.gitignore` respect\r\n\r\n**Key Features:**\r\n- Creates lightweight tar.gz artifacts (typically <50MB vs 500MB+ Docker images)\r\n- Uploads artifacts to Cloudflare R2 via secure API\r\n- Uses minimal shared bootstrapper image (~100MB)\r\n- Fetches project code at container startup\r\n- Supports both Bun and npm lockfiles\r\n- Implements SHA256 checksum verification\r\n\r\n### 🗑️ Removed Legacy Docker Code\r\n\r\n**Deleted:**\r\n- `utils/docker.ts` - All Docker build/export utilities (~280 lines)\r\n- `deployWithDocker()` function (~300 lines)\r\n- Docker-specific CLI options (`--use-docker`, `--tag`, `--no-build`)\r\n- Dockerfile generation and management code\r\n\r\n### 📦 Dependencies\r\n\r\n**Added:**\r\n- `tar` - For creating compressed archives\r\n- `ignore` - For respecting .gitignore rules\r\n- `node-fetch` - For HTTP operations\r\n- `form-data` - For multipart uploads\r\n\r\n## Why This Change?\r\n\r\n### Problems with Old Approach:\r\n- **Size Limits**: Docker images often exceeded 500MB-2GB, hitting platform limits\r\n- **Slow Uploads**: Uploading entire Docker images was bandwidth-intensive\r\n- **Version Conflicts**: Single Docker image could break older projects\r\n- **Resource Waste**: Duplicated base layers for every deployment\r\n\r\n### Benefits of Bootstrapper:\r\n- **10x Smaller Uploads**: Only project code, not entire OS/runtime\r\n- **Faster Deployments**: 30-60s vs 5-10 minutes\r\n- **Version Isolation**: Each project maintains its own dependencies\r\n- **Better Caching**: Shared base image, project-specific dependencies\r\n- **Platform Friendly**: Works within Cloudflare's 50GB limits\r\n\r\n## Technical Implementation\r\n\r\n### Deployment Flow:\r\n1. **Artifact Creation**\r\n   ```typescript\r\n   // Creates deterministic tar.gz with project files\r\n   const artifact = await createArtifact({\r\n     projectPath: cwd,\r\n     outputPath: artifactPath,\r\n     excludePatterns: ['.git', 'node_modules', '.env'],\r\n     deterministic: true\r\n   });\r\n   ```\r\n\r\n2. **Upload to R2**\r\n   ```typescript\r\n   // Uploads via Cloud API with checksum verification\r\n   const uploadResponse = await apiClient.uploadArtifact({\r\n     projectId: projectName,\r\n     version: projectVersion,\r\n     checksum: artifactChecksum,\r\n     size: artifactSize,\r\n     artifactPath\r\n   });\r\n   ```\r\n\r\n3. **Container Deployment**\r\n   ```typescript\r\n   // Deploys bootstrapper with artifact URL\r\n   const containerConfig = {\r\n     image_tag: \"elizaos/bootstrapper:latest\",\r\n     environment_vars: {\r\n       R2_ARTIFACT_URL: artifactData.artifactUrl,\r\n       R2_TOKEN: artifactData.token,\r\n       R2_ARTIFACT_CHECKSUM: artifactChecksum,\r\n       START_CMD: \"bun run start\"\r\n     }\r\n   };\r\n   ```\r\n\r\n### Bootstrapper Runtime:\r\n- Alpine Linux base with Bun pre-installed\r\n- Downloads artifact using one-time scoped token\r\n- Verifies SHA256 checksum\r\n- Extracts project files\r\n- Installs dependencies from lockfile\r\n- Executes START_CMD\r\n\r\n## Breaking Changes\r\n\r\n⚠️ **Removed CLI Options:**\r\n- `--use-docker` - No longer supported\r\n- `--tag` - Not applicable to bootstrapper\r\n- `--no-build` - Build happens in container\r\n- `--dockerfile` - Bootstrapper uses standard image\r\n\r\n**Migration Guide:**\r\n```bash\r\n# Old (no longer works)\r\nelizaos deploy --use-docker --tag my-image:v1\r\n\r\n# New (default behavior)\r\nelizaos deploy\r\n\r\n# With existing artifact\r\nelizaos deploy --skip-artifact --artifact-path ./dist/artifact.tar.gz\r\n```\r\n\r\n## Testing\r\n\r\n### Manual Testing:\r\n- ✅ Deployed sample project with bootstrapper\r\n- ✅ Verified artifact creation and upload\r\n- ✅ Confirmed container starts and runs correctly\r\n- ✅ Tested with both Bun and npm projects\r\n- ✅ Validated checksum verification\r\n- ✅ Tested artifact cleanup (keeps last 3)\r\n\r\n### Performance Comparison:\r\n| Metric | Docker Mode | Bootstrapper |\r\n|--------|------------|--------------|\r\n| Artifact Size | 500MB-2GB | 10-50MB |\r\n| Upload Time | 2-10 min | 10-30 sec |\r\n| Total Deploy Time | 5-15 min | 1-2 min |\r\n| Storage Used | 2GB/deploy | 50MB/deploy |\r\n\r\n   // Uploads via Cloud API with checksum verification\r\n   const uploadResponse = await apiClient.uploadArtifact({\r\n     projectId: projectName,\r\n     version: projectVersion,\r\n     checksum: artifactChecksum,\r\n     size: artifactSize,\r\n     artifactPath\r\n   });nged\r\n\r\n### 🚀 New Artifact Management System\r\n\r\n**Added Endpoints:**\r\n- `POST /api/v1/artifacts/upload` - Request presigned URL and upload artifacts\r\n- `GET /api/v1/artifacts` - List project artifacts\r\n\r\n**Database Changes:**\r\n- New `artifacts` table with organization/project/version tracking\r\n- Unique constraint on version per project\r\n- Indexes for efficient querying\r\n\r\n**Key Features:**\r\n- Presigned S3 URLs for direct R2 uploads\r\n- SHA256 checksum verification\r\n- 10MB artifact size limit (configurable)\r\n- Artifact metadata storage (Eliza version, Node version, etc.)\r\n- One-time scoped token generation for secure retrieval\r\n\r\n### 🔄 Container Route Updates\r\n\r\n**Modified:**\r\n- Added bootstrapper fields to container schema\r\n- Default to bootstrapper mode (`use_bootstrapper: true`)\r\n- Store artifact metadata in container record\r\n- Pass bootstrapper config to Cloudflare deployment\r\n\r\n**Schema Changes:**\r\n```typescript\r\nconst createContainerSchema = z.object({\r\n  name: z.string(),\r\n  port: z.number(),\r\n  environment_vars: z.record(z.string()),\r\n  \r\n  // New bootstrapper fields\r\n  use_bootstrapper: z.boolean().default(true),\r\n  artifact_url: z.string().optional(),\r\n  artifact_checksum: z.string().optional(),\r\n  image_tag: z.string().default(\"elizaos/bootstrapper:latest\")\r\n});\r\n```\r\n\r\n### 🗑️ Deprecated Legacy Endpoints\r\n\r\n**Marked as Deprecated:**\r\n- `POST /api/v1/containers/upload-image` - Docker image upload\r\n- `CloudflareService.uploadImage()` - Docker upload method\r\n\r\nThese remain functional with deprecation warnings for backward compatibility.\r\n\r\n## Technical Implementation\r\n\r\n### Artifact Upload Flow:\r\n\r\n1. **Request Upload URL**\r\n   ```typescript\r\n   // Client requests presigned URL\r\n   POST /api/v1/artifacts/upload\r\n   {\r\n     projectId: \"my-project\",\r\n     version: \"1.0.0\",\r\n     checksum: \"sha256...\",\r\n     size: 1048576\r\n   }\r\n   ```\r\n\r\n2. **Generate Presigned URL**\r\n   ```typescript\r\n   // Server creates S3 presigned URL for R2\r\n   const putCommand = new PutObjectCommand({\r\n     Bucket: process.env.R2_BUCKET_NAME,\r\n     Key: `artifacts/${org}/${project}/${version}/${id}.tar.gz`,\r\n     ContentType: 'application/gzip',\r\n     ContentLength: size,\r\n     ChecksumSHA256: checksum\r\n   });\r\n   \r\n   const uploadUrl = await getSignedUrl(r2Client, putCommand, {\r\n     expiresIn: 600 // 10 minutes\r\n   });\r\n   ```\r\n\r\n3. **Store Metadata**\r\n   ```typescript\r\n   // Save artifact record\r\n   await db.insert(artifacts).values({\r\n     id: artifactId,\r\n     organization_id: user.organization_id,\r\n     project_id: projectId,\r\n     version,\r\n     checksum,\r\n     size,\r\n     r2_key,\r\n     r2_url: publicUrl,\r\n     metadata,\r\n     created_by: user.id\r\n   });\r\n   ```\r\n\r\n### Container Deployment:\r\n\r\n```typescript\r\n// Deploy with bootstrapper configuration\r\nconst deployment = await cloudflare.deployContainer({\r\n  name: config.name,\r\n  imageTag: \"elizaos/bootstrapper:latest\",\r\n  port: config.port,\r\n  environmentVars: {\r\n    ...config.environment_vars,\r\n    R2_ARTIFACT_URL: config.artifact_url,\r\n    R2_TOKEN: generatedToken,\r\n    R2_ARTIFACT_CHECKSUM: config.artifact_checksum\r\n  }\r\n});\r\n```\r\n\r\n## Database Migration\r\n\r\n```sql\r\n-- 0006_add_artifacts_table.sql\r\nCREATE TABLE IF NOT EXISTS artifacts (\r\n  id TEXT PRIMARY KEY,\r\n  organization_id TEXT NOT NULL,\r\n  project_id TEXT NOT NULL,\r\n  version TEXT NOT NULL,\r\n  checksum TEXT NOT NULL,\r\n  size INTEGER NOT NULL,\r\n  r2_key TEXT NOT NULL,\r\n  r2_url TEXT NOT NULL,\r\n  metadata JSONB DEFAULT '{}',\r\n  created_by TEXT NOT NULL,\r\n  created_at TIMESTAMP DEFAULT NOW() NOT NULL\r\n);\r\n\r\nCREATE INDEX idx_artifacts_org_project ON artifacts(organization_id, project_id);\r\nCREATE INDEX idx_artifacts_project_version ON artifacts(project_id, version);\r\nCREATE UNIQUE INDEX uniq_artifact_version ON artifacts(organization_id, project_id, version);\r\n```\r\n\r\n## Environment Variables\r\n\r\n**New Required Variables:**\r\n```bash\r\n# R2 Storage Configuration\r\nR2_ACCOUNT_ID=your_cloudflare_account_id\r\nR2_ACCESS_KEY_ID=your_r2_access_key\r\nR2_SECRET_ACCESS_KEY=your_r2_secret_key\r\nR2_BUCKET_NAME=elizaos-artifacts\r\nR2_PUBLIC_DOMAIN=artifacts.elizacloud.ai  # Optional custom domain\r\n```\r\n\r\n## Security Considerations\r\n\r\n- ✅ Presigned URLs expire after 10 minutes\r\n- ✅ One-time tokens for artifact retrieval\r\n- ✅ SHA256 checksum verification on upload and download\r\n- ✅ Organization-scoped artifact isolation\r\n- ✅ Size limits to prevent abuse (10MB default)\r\n\r\n## Performance Impact\r\n\r\n### Metrics:\r\n| Operation | Old (Docker) | New (Bootstrapper) |\r\n|-----------|-------------|-------------------|\r\n| Upload Size | 500MB-2GB | 10-50MB |\r\n| API Processing | 30-60s | <1s |\r\n| Storage Cost | High | 95% reduction |\r\n| Network Usage | High | 90% reduction |\r\n\r\n### Load Testing:\r\n- Handled 100 concurrent artifact uploads\r\n- Average upload time: 5 seconds\r\n- No performance degradation observed\r\n\r\n## Breaking Changes\r\n\r\n⚠️ **Default Behavior Change:**\r\n- Containers now default to bootstrapper mode\r\n- `use_bootstrapper` defaults to `true` instead of `false`\r\n\r\n**Backward Compatibility:**\r\n- Legacy Docker endpoints remain functional with warnings\r\n- Existing containers continue to work\r\n- Gradual migration path available\r\n\r\n## Testing\r\n\r\n- ✅ Artifact upload with checksum validation\r\n- ✅ Presigned URL generation and expiry\r\n- ✅ Container deployment with bootstrapper\r\n- ✅ Legacy endpoint deprecation warnings\r\n- ✅ Database migration rollback tested\r\n- ✅ R2 connectivity and error handling\r\n",
      "repository": "elizaos/eliza",
      "createdAt": "2025-10-11T15:13:37Z",
      "mergedAt": "2025-10-12T22:19:46Z",
      "additions": 2170,
      "deletions": 135
    },
    {
      "id": "PR_kwDOMT5cIs6s4Tj6",
      "title": "feat: elizaos deploy",
      "author": "ChristopherTrimboli",
      "number": 6052,
      "body": "## 📋 Summary\n\nImplements the `elizaos deploy` command for deploying ElizaOS projects to Cloudflare Workers via the ElizaOS Cloud platform. Users can now build Docker images locally, upload them through the cloud API, and deploy containers to Cloudflare—all with a single command.\n\n## 🎯 Motivation\n\nEnable ElizaOS developers to deploy their agents to production infrastructure without managing Cloudflare accounts directly. The platform acts as a managed service, handling image uploads, Worker creation, and container orchestration while providing billing, quotas, and monitoring.\n\n## 🚀 Changes\n\n### New Features\n\n#### 1. **Deploy Command** (`src/commands/deploy/`)\n- **Main command:** Full-featured deploy with options for name, port, instances, env vars\n- **Docker integration:** Builds images with platform targeting (linux/amd64)\n- **Image export:** Exports Docker images to tarballs for upload\n- **Cloud upload:** Uploads images to Cloudflare via cloud API\n- **Status polling:** Waits for deployment completion with progress updates\n\n#### 2. **Docker Utilities** (`src/commands/deploy/utils/docker.ts`)\n```typescript\n+ exportDockerImage(imageTag, outputPath?) → Promise<DockerExportResult>\n  - Exports Docker image to tarball\n  - Cross-platform temp directory handling\n  - File size reporting\n\n+ cleanupImageTarball(tarballPath) → Promise<void>\n  - Cleans up temporary tarball files\n  - Safe error handling\n```\n\n#### 3. **API Client** (`src/commands/deploy/utils/api-client.ts`)\n```typescript\n+ getQuota() → Promise<QuotaResponse>\n  - Pre-flight check for quotas and credits\n  - Shows user their limits before deploying\n\n+ uploadImage(imageName, imagePath) → Promise<UploadResponse>\n  - Uploads image tarball with 5-minute timeout\n  - Progress reporting\n  - Automatic abort on timeout\n\n+ createContainer(config) → Promise<ContainerResponse>\n+ getContainer(id) → Promise<ContainerResponse>\n+ waitForDeployment(id, options) → Promise<DeploymentResponse>\n```\n\n#### 4. **Types** (`src/commands/deploy/types.ts`)\n- Extended `CloudApiResponse` with credit/quota fields\n- Added `DockerExportResult` interface\n- Comprehensive type safety for all operations\n\n### Modified Files\n\n```\npackages/cli/src/commands/deploy/\n├── index.ts                    [EXISTING] Entry point\n├── README.md                   [EXISTING] Documentation\n├── actions/\n│   └── deploy.ts              [MODIFIED] +85 lines\n├── utils/\n│   ├── api-client.ts          [MODIFIED] +80 lines\n│   └── docker.ts              [MODIFIED] +60 lines\n└── types.ts                   [MODIFIED] +8 lines\n```\n\n### Key Implementation Details\n\n**Pre-Flight Checks:**\n```typescript\n// Check quota and credits before any operations\nconst quotaResponse = await apiClient.getQuota();\nif (quota.remaining === 0) {\n  return error(\"Container limit reached\");\n}\nif (credits.balance < totalCost) {\n  return error(\"Insufficient credits\");\n}\n```\n\n**Upload with Timeout:**\n```typescript\n// 5-minute timeout for large image uploads\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5 * 60 * 1000);\n\nconst response = await fetch(url, {\n  body: imageBuffer,\n  signal: controller.signal\n});\n```\n\n**Cleanup on Failure:**\n```typescript\n// Always cleanup tarball, even on upload failure\ntry {\n  await apiClient.uploadImage(name, tarballPath);\n} finally {\n  await cleanupImageTarball(tarballPath);\n}\n```\n\n## 📊 User Experience\n\n### Successful Deployment\n\n```bash\n$ elizaos deploy\n\n🚀 Starting ElizaOS deployment...\n📦 Deploying project: my-agent\n💳 Checking account quota and credits...\n📊 Containers: 2/5 (3 remaining)\n💰 Credit balance: 10000 credits\n💸 Deployment cost: ~1500 credits\n🔨 Building Docker image...\n✅ Docker image built: elizaos/my-agent:latest\n📦 Exporting Docker image...\n✅ Image exported: /tmp/eliza-deploy-xxx/image.tar (250.00 MB)\n📤 Uploading image to cloud...\n💰 Credits deducted for upload: 500\n✅ Image uploaded: my-agent-cf123\n☁️  Deploying to Cloudflare Containers...\n💰 Credits deducted: 1000 (8500 remaining)\n✅ Container created: uuid-123\n⏳ Waiting for deployment to complete...\n✅ Deployment successful!\n📍 Container ID: uuid-123\n🌐 URL: https://my-agent-abc123.workers.dev\n```\n\n### Error Handling\n\n```bash\n# Quota exceeded\n⚠️  Container limit reached! You have 5/5 containers.\n   Delete unused containers or upgrade your plan.\n\n# Insufficient credits\n⚠️  Insufficient credits for deployment.\n   Required: 1500 credits\n   Available: 800 credits\n   Please add credits to your account.\n\n# Upload timeout\n❌ Upload timeout after 5 minutes. Please check your network connection.\n```\n\n## 🧪 Testing\n\n### Manual Testing\n\n```bash\n# 1. Setup cloud API\ncd eliza-cloud-v2\nexport CLOUDFLARE_ACCOUNT_ID=xxx\nexport CLOUDFLARE_API_TOKEN=xxx\nnpm run dev\n\n# 2. Get API key from dashboard\nopen http://localhost:3000/dashboard/api-keys\nexport ELIZAOS_API_KEY=eliza_xxxxx\n\n# 3. Deploy a project\ncd packages/project-starter\nelizaos deploy\n\n# 4. Verify deployment\nopen http://localhost:3000/dashboard/containers\n```\n\n### Test Cases Covered\n\n- ✅ Build Docker image with platform targeting\n- ✅ Export image to tarball (cross-platform)\n- ✅ Upload with timeout protection\n- ✅ Cleanup on failure\n- ✅ Pre-flight quota/credit checks\n- ✅ Status polling until completion\n- ✅ Error handling (quota, credits, network)\n- ✅ API key authentication\n- ✅ Environment variable parsing\n\n## 🔒 Security\n\n- API keys transmitted via `Authorization: Bearer` header\n- No secrets stored in code or logs\n- Temporary tarballs cleaned up after upload\n- Timeout protection prevents hanging connections\n- Proper error messages (no sensitive data leaked)\n\n## 📝 Documentation\n\n- ✅ Command help text with examples\n- ✅ README with usage guide\n- ✅ Type definitions with comments\n- ✅ Error messages with actionable guidance\n\n## ⚙️ Configuration\n\n### Required Environment Variables\n\n```bash\n# For deployment\nELIZAOS_API_KEY=eliza_xxxxx          # From cloud dashboard\n\n# Optional\nELIZAOS_API_URL=https://elizacloud.ai  # Defaults to production\n```\n\n### CLI Options\n\n```bash\nelizaos deploy [options]\n\nOptions:\n  -n, --name <name>              Deployment name\n  -p, --port <port>              Container port (default: 3000)\n  -m, --max-instances <count>    Max instances (default: 1)\n  -k, --api-key <key>            API key (or use ELIZAOS_API_KEY)\n  -u, --api-url <url>            API URL (default: https://elizacloud.ai)\n  -d, --dockerfile <path>        Dockerfile path (default: Dockerfile)\n  -e, --env <KEY=VALUE>          Environment variables (repeatable)\n  --no-build                     Skip Docker build\n  -t, --tag <tag>                Docker image tag\n```\n\n## 🎯 Breaking Changes\n\nNone - this is a new command with no impact on existing functionality.\n\n## 📦 Dependencies\n\nNo new external dependencies added. Uses existing:\n- `execa` - For Docker commands\n- `dotenv` - For environment loading\n- `@elizaos/core` - For logging\n\n## 🔄 Migration Guide\n\nN/A - New feature, no migration needed.\n\n## ✅ Checklist\n\n- [x] Code follows project style guidelines\n- [x] All linting passes\n- [x] TypeScript compilation successful\n- [x] Manual testing completed\n- [x] Documentation updated\n- [x] Error handling implemented\n- [x] Security best practices followed\n- [ ] Unit tests added (TODO)\n- [ ] E2E tests added (TODO)\n\n## 📚 Related\n\n- **SaaS PR:** Companion changes to eliza-cloud-v2 API endpoints\n- **Issue:** Implements container deployment feature\n- **Docs:** See `packages/cli/src/commands/deploy/README.md`\n\n## 🙏 Reviewer Notes\n\n**Key areas to review:**\n1. Error handling in upload timeout logic\n2. Try/finally cleanup pattern\n3. Pre-flight check implementation\n4. User-facing error messages\n5. Type safety in API responses\n\n**Questions for reviewers:**\n- Should we add progress indicators for uploads >100MB?\n- Should we implement retry logic for network failures?\n- Is 5-minute timeout appropriate for all image sizes?\n\n---\n\n**Ready for review!** This enables full end-to-end deployment from CLI to production Cloudflare infrastructure.\n\n",
      "repository": "elizaos/eliza",
      "createdAt": "2025-10-09T11:50:37Z",
      "mergedAt": null,
      "additions": 1345,
      "deletions": 43
    },
    {
      "id": "PR_kwDOMT5cIs6tN3eS",
      "title": "fix: remove AgentManager references in e2e test infrastructure",
      "author": "0xbbjoker",
      "number": 6056,
      "body": "Fixed e2e test runner after AgentManager was removed from the server package.\r\nReplaced all AgentManager usages with AgentServer's built-in startAgents method.\r\n\r\nChanges:\r\n- Removed AgentManager import and instantiation in e2e-tests.ts\r\n- Updated agent startup logic to use server.startAgents() directly\r\n- Simplified test setup by using native AgentServer methods\r\n- Removed unused init parameter passing (now handled internally)\r\n\r\nImpact:\r\n- elizaos test command now works correctly for plugin testing\r\n- All e2e tests can run successfully\r\n- Fixes \"undefined is not a constructor\" error\n\n<!-- CURSOR_SUMMARY -->\n---\n\n> [!NOTE]\n> Switch e2e test flow to AgentServer.startAgents and plumb isTestMode through core/server for correct test plugin resolution, updating mocks/tests accordingly.\n> \n> - **CLI e2E runner (`packages/cli/src/commands/test/actions/e2e-tests.ts`)**:\n>   - Remove `AgentManager` usage; use `server.startAgents(characters, plugins, { isTestMode: true })` directly.\n>   - Provide `server.startAgent` wrapper that calls `startAgents` and returns the first runtime.\n>   - For project agents, invoke custom `agent.init(runtime)` manually when present.\n>   - Drop explicit `server.registerAgent` call.\n> - **Server (`packages/server/src/index.ts`)**:\n>   - `startAgents` now accepts `options?: { isTestMode?: boolean }` and forwards to `ElizaOS.addAgents`.\n> - **Core (`packages/core/src/elizaos.ts`)**:\n>   - `addAgents` accepts `options?: { isTestMode?: boolean }` and passes flag to `resolvePlugins` for test dependency handling.\n> - **Tests (`packages/cli/tests/unit/commands/test/e2e-tests.test.ts`)**:\n>   - Replace `AgentManager` mocks with `AgentServer.startAgents` array-based mock; adjust expectations to `[runtime]` shape and reset logic.\n> \n> <sup>Written by [Cursor Bugbot](https://cursor.com/dashboard?tab=bugbot) for commit f21346f7c50c12f77964100930293c6db7965f65. This will update automatically on new commits. Configure [here](https://cursor.com/dashboard?tab=bugbot).</sup>\n<!-- /CURSOR_SUMMARY -->",
      "repository": "elizaos/eliza",
      "createdAt": "2025-10-11T05:58:54Z",
      "mergedAt": "2025-10-11T16:29:52Z",
      "additions": 54,
      "deletions": 47
    },
    {
      "id": "PR_kwDOMT5cIs6tQqot",
      "title": "feat(cli): Simplify CLI to use server / core",
      "author": "standujar",
      "number": 6060,
      "body": "## 🎯 Phase: CLI Cleanup\r\n\r\n**Status**: 🟡 Draft\r\n**Priority**: MEDIUM - Proper architecture  \r\n**Breaking**: No  \r\n\r\n---\r\n\r\n## 📋 Summary\r\n\r\nThis PR removes massive duplication from the CLI by deleting the custom module-loader and using published packages (`@elizaos/server`, `@elizaos/core`) directly.\r\n\r\n### Impact\r\n- 📉 **237 lines deleted** (module-loader.ts + tests)\r\n- 🎯 **Zero duplication**: CLI uses published packages only\r\n- ✅ **Proper separation**: CLI = command parsing + file loading\r\n- ✅ **All builds pass**: 14/14 packages build successfully\r\n\r\n---\r\n\r\n## 🔧 Changes\r\n\r\n### 1. Delete Module Loader ❌ (237 lines removed!)\r\n- Deleted `packages/cli/src/utils/module-loader.ts` (236 lines)\r\n- Deleted `packages/cli/src/utils/module-loader.test.ts`\r\n- Updated `packages/cli/src/utils/index.ts` (removed export)\r\n\r\n**Why?** The module loader was a hack to dynamically require plugins. We moved all config/plugin logic to Core, so we don't need it anymore.\r\n\r\n### 2. Simplify CLI Commands ✅\r\n\r\n**commands/start/index.ts**\r\n```diff\r\n- import { getModuleLoader } from '@/src/utils/module-loader';\r\n+ import { AgentServer, loadCharacterTryPath } from '@elizaos/server';\r\n\r\n- const moduleLoader = getModuleLoader();\r\n- const { AgentServer } = await moduleLoader.load('@elizaos/server');\r\n- const { loadCharacterTryPath } = serverModule;\r\n+ // Direct imports - no dynamic loading needed!\r\n```\r\n\r\n**commands/scenario/src/runtime-factory.ts**\r\n```diff\r\n- import { setDefaultSecretsFromEnv } from '@elizaos/core';\r\n- await setDefaultSecretsFromEnv(character);\r\n+ // ElizaOS.addAgents() now handles secrets automatically\r\n```\r\n\r\n**commands/scenario/src/plugin-parser.ts**\r\n```diff\r\n- const moduleLoader = getModuleLoader();\r\n- const { PluginLoader } = await moduleLoader.load('@elizaos/server');\r\n- const loader = new PluginLoader();\r\n- const loadedPlugin = await loader.loadAndPreparePlugin(plugin.name);\r\n+ // Plugin loading delegated to ElizaOS/AgentServer\r\n+ // Just validate the plugin reference here\r\n```\r\n\r\n---\r\n\r\n## 🏗️ Architecture Now\r\n\r\n```\r\nCLI Layer (thin)\r\n  ├─ Command parsing (Commander.js)\r\n  ├─ File loading (characters, .env)\r\n  └─ Delegation to @elizaos/server\r\n      └─ AgentServer\r\n          └─ ElizaOS (from @elizaos/core)\r\n              └─ Config + Plugin + Secrets Management\r\n```\r\n\r\n**Clean Separation**:\r\n- **CLI**: Parse commands → Load files → Call Server\r\n- **Server**: HTTP + WebSocket + Agent orchestration\r\n- **Core**: ElizaOS + Config + Plugins + Secrets\r\n\r\n---\r\n\r\n## ✅ Testing\r\n\r\n### Builds\r\n```bash\r\nbun run build\r\n# ✅ 14/14 packages build successfully\r\n```\r\n\r\n### Manual Testing\r\n- ✅ CLI imports are direct (no module-loader)\r\n- ✅ start command works\r\n- ✅ project-starter templates unaffected\r\n\r\n### Automated Tests\r\n- 🟡 CLI tests running (some timeout, investigating)\r\n- ✅ Core tests: 541 passing\r\n- ✅ Server tests: 38 passing\r\n\r\n---\r\n\r\n## 📋 Tasks Status\r\n\r\n- [x] **Task 1**: Remove Embedded Server ✅\r\n- [x] **Task 2**: Delete Module Loader ✅\r\n- [ ] **Task 3**: Use Core Configuration 🟡 In Progress\r\n- [ ] **Task 4**: Improve Server API 🟡 In Progress\r\n- [ ] **Task 5**: Update Tests 🟡 In Progress\r\n\r\n---\r\n\r\n## 🔗 Related\r\n\r\n- **Depends on**: Config & Plugin in Core ✅ Merged\r\n\r\n---\r\n\r\n## 📝 Notes for Reviewers\r\n\r\n### Key Points\r\n1. **No breaking changes** - CLI commands work identically\r\n2. **237 lines deleted** - Massive code reduction\r\n3. **Proper architecture** - CLI is now a thin layer\r\n4. **Dependencies verified** - `@elizaos/server` already in package.json\r\n\r\n### Areas to Review\r\n- [ ] CLI start command still works as expected\r\n- [ ] Direct imports from @elizaos/server are correct\r\n- [ ] No regression in character loading\r\n- [ ] project-starter templates still work",
      "repository": "elizaos/eliza",
      "createdAt": "2025-10-11T16:51:07Z",
      "mergedAt": null,
      "additions": 8,
      "deletions": 361
    },
    {
      "id": "PR_kwDOMT5cIs6tQUqe",
      "title": "fix(server): ensure agent exists in database before creating foreign key references",
      "author": "standujar",
      "number": 6059,
      "body": "## Summary\n\nFixes a foreign key violation error that occurred when starting agents in PostgreSQL environments.\n\n## Problem\n\nThe server was attempting to insert into the `server_agents` table before the agent record existed in the `agents` table, causing this error:\n\n```\ninsert or update on table \"server_agents\" violates foreign key constraint \n\"server_agents_agent_id_agents_id_fk\"\nDetail: Key (agent_id)=(...) is not present in table \"agents\".\n```\n\n## Root Cause\n\nIn the `startAgents()` method ([packages/server/src/index.ts:202-228](https://github.com/elizaOS/eliza/blob/develop/packages/server/src/index.ts#L202-L228)), the execution order was:\n\n1. `registerAgent(runtime)` - which internally calls `addAgentToServer()` at line 1169\n2. `database.createAgent()` - which creates the agent record\n\nThis violated the foreign key constraint in `server_agents` table which references `agents.id`.\n\n## Solution\n\nReversed the execution order in `startAgents()`:\n\n1. ✅ `database.createAgent()` - create the agent record **first**\n2. ✅ `registerAgent(runtime)` - **then** create foreign key references\n\nThis ensures the agent exists in the database before any tables try to reference it via foreign key constraints.\n\n## Changes\n\n- **File**: `packages/server/src/index.ts`\n- **Lines**: 207, 223\n- **Change**: Moved `registerAgent()` call after `createAgent()` ",
      "repository": "elizaos/eliza",
      "createdAt": "2025-10-11T15:37:33Z",
      "mergedAt": "2025-10-11T15:57:36Z",
      "additions": 1,
      "deletions": 2
    }
  ],
  "codeChanges": {
    "additions": 55,
    "deletions": 49,
    "files": 4,
    "commitCount": 18
  },
  "completedItems": [
    {
      "title": "fix(server): ensure agent exists in database before creating foreign key references",
      "prNumber": 6059,
      "type": "bugfix",
      "body": "## Summary\n\nFixes a foreign key violation error that occurred when starting agents in PostgreSQL environments.\n\n## Problem\n\nThe server was attempting to insert into the `server_agents` table before the agent record existed in the `agents` t",
      "files": [
        "packages/server/src/index.ts"
      ]
    },
    {
      "title": "fix: remove AgentManager references in e2e test infrastructure",
      "prNumber": 6056,
      "type": "bugfix",
      "body": "Fixed e2e test runner after AgentManager was removed from the server package.\r\nReplaced all AgentManager usages with AgentServer's built-in startAgents method.\r\n\r\nChanges:\r\n- Removed AgentManager import and instantiation in e2e-tests.ts\r\n- ",
      "files": [
        "packages/cli/src/commands/test/actions/e2e-tests.ts",
        "packages/cli/tests/unit/commands/test/e2e-tests.test.ts",
        "packages/core/src/elizaos.ts",
        "packages/server/src/index.ts"
      ]
    }
  ],
  "topContributors": [
    {
      "username": "0xbbjoker",
      "avatarUrl": "https://avatars.githubusercontent.com/u/54844437?u=90fe1762420de6ad493a1c1582f1f70c0d87d8e2&v=4",
      "totalScore": 93.90171952314464,
      "prScore": 83.90171952314464,
      "issueScore": 0,
      "reviewScore": 10,
      "commentScore": 0,
      "summary": "0xbbjoker: Focused on bugfix work, merging a significant PR in elizaos/eliza (#6056) that removed AgentManager references in e2e test infrastructure, demonstrating a focus on code quality and test reliability. They also initiated a refactor in elizaos-plugins/plugin-openai (#19) to align with a modular architecture, indicating an effort towards improving system design."
    },
    {
      "username": "standujar",
      "avatarUrl": "https://avatars.githubusercontent.com/u/16385918?u=718bdcd1585be8447bdfffb8c11ce249baa7532d&v=4",
      "totalScore": 68.83153231538499,
      "prScore": 63.83153231538499,
      "issueScore": 0,
      "reviewScore": 5,
      "commentScore": 0,
      "summary": "standujar: Focused on both bug fixes and new feature development, merging a fix in elizaos/eliza#6059 to ensure agent existence in the database and opening a new feature PR, elizaos/eliza#6060, to simplify the CLI. Their work primarily involved feature development, bug fixes, and other tasks, touching both code and tests."
    },
    {
      "username": "ChristopherTrimboli",
      "avatarUrl": "https://avatars.githubusercontent.com/u/27584221?u=0d816ce1dcdea8f925aba18bb710153d4a87a719&v=4",
      "totalScore": 43.7437738965761,
      "prScore": 43.5437738965761,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": "ChristopherTrimboli: Focused on deployment infrastructure, merging a substantial PR in elizaos/eliza (#6058) with over 2,000 additions and 1,400 deletions related to R2 artifact styling, indicating a primary focus on other work and code changes across 10 files."
    },
    {
      "username": "TensorNull",
      "avatarUrl": "https://avatars.githubusercontent.com/u/129579691?u=fef786d866afd3d3a36397da036641c65906f3f2&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "TensorNull: Initiated a new feature request for CometAPI support in ElizaOS by creating issue elizaos/eliza#6055, indicating a focus on expanding system integrations."
    }
  ],
  "newPRs": 4,
  "mergedPRs": 2,
  "newIssues": 1,
  "closedIssues": 0,
  "activeContributors": 5
}