{
  "interval": {
    "intervalStart": "2025-08-01T00:00:00.000Z",
    "intervalEnd": "2025-09-01T00:00:00.000Z",
    "intervalType": "month"
  },
  "repository": "elizaos/eliza",
  "overview": "From 2025-08-01 to 2025-09-01, elizaos/eliza had 6 new PRs (4 merged), 3 new issues, and 7 active contributors.",
  "topIssues": [
    {
      "id": "I_kwDOMT5cIs7DxO_D",
      "title": "eliza cloud railway deployment",
      "author": "samarth30",
      "number": 5703,
      "repository": "elizaos/eliza",
      "body": "",
      "createdAt": "2025-08-01T16:20:02Z",
      "closedAt": null,
      "state": "OPEN",
      "commentCount": 0
    },
    {
      "id": "I_kwDOMT5cIs7DoKcd",
      "title": "feat: Add IStorageService type to core",
      "author": "lalalune",
      "number": 5698,
      "repository": "elizaos/eliza",
      "body": "The new ElizaOS plugin and AWS S3 plugin rely on IStorageService and use ServiceType.REMOTE_FILES but we should change this to storage I think",
      "createdAt": "2025-08-01T00:33:14Z",
      "closedAt": null,
      "state": "OPEN",
      "commentCount": 0
    },
    {
      "id": "I_kwDOMT5cIs7DoKIq",
      "title": "feat: Add unregisterAction to core package",
      "author": "lalalune",
      "number": 5697,
      "repository": "elizaos/eliza",
      "body": "Would be nice if you could unregister actions with runtime.unregisterAction",
      "createdAt": "2025-08-01T00:32:24Z",
      "closedAt": null,
      "state": "OPEN",
      "commentCount": 0
    }
  ],
  "topPRs": [
    {
      "id": "PR_kwDOMT5cIs6h511h",
      "title": "fix/elizaos test component",
      "author": "yungalgo",
      "number": 5705,
      "body": "# Fix: Enable `elizaos test --type component` for all project and plugin types\r\n\r\n## Overview\r\n\r\nThis PR fixes the `elizaos test --type component` command to ensure it passes for all project and plugin types generated by the CLI. Previously, newly created projects and plugins would fail their component tests due to various issues including TypeScript errors, missing routes, incorrect test expectations, and build configuration problems.\r\n\r\n## Problem\r\n\r\nWhen developers created new projects or plugins using:\r\n- `elizaos create --type plugin` (then selecting \"quick\" template)\r\n- `elizaos create --type plugin` (then selecting \"full\" template)\r\n- `elizaos create --type project`\r\n- `elizaos create --type tee`\r\n\r\nRunning `elizaos test --type component` would fail with various errors, creating a poor developer experience and blocking CI/CD pipelines.\r\n\r\n## Solution\r\n\r\nThis PR implements comprehensive fixes across all starter templates to ensure component tests pass out of the box.\r\n\r\n### Changes by Package\r\n\r\n#### 1. **plugin-starter** (Regular Plugin Template)\r\n- Fixed `StarterService` logger calls from `logger.debug` to `logger.info` to match test expectations\r\n- Added missing `runtime: IAgentRuntime` parameter to plugin `init` method\r\n- Standardized hello world action response to return \"Hello world!\" consistently\r\n- Added error logging in catch blocks as expected by tests\r\n- Updated test expectations to match implementation\r\n\r\n#### 2. **plugin-quick-starter** (Quick Plugin Template)\r\n- Applied same fixes as plugin-starter for consistency\r\n- Ensured logger calls match test expectations\r\n- Fixed init method signature\r\n\r\n#### 3. **project-starter** (Regular Project Template)\r\n- Fixed tests to handle dynamic project names instead of expecting hardcoded `@elizaos/project-starter`\r\n- Added proper mock runtime parameter in integration tests\r\n- Minor test improvements for robustness\r\n\r\n#### 4. **project-tee-starter** (TEE Project Template) - Most Significant Changes\r\n- **TypeScript Fixes:**\r\n  - Fixed TS7017 error by changing `global.expect` to `(global as any).expect`\r\n  \r\n- **Plugin Architecture:**\r\n  - Added missing TEE Status panel route (`/tee-status`)\r\n  - Properly implemented `StarterService` as a Service class extending from `@elizaos/core`\r\n  - Fixed service registration in plugin exports\r\n\r\n- **Validation & Configuration:**\r\n  - Added TEE_MODE validation (OFF, LOCAL, DOCKER, PRODUCTION)\r\n  - Added TEE_VENDOR validation (must be 'phala')\r\n  - Enhanced WALLET_SECRET_SALT validation (8-128 characters)\r\n  - Added proper test environment defaults\r\n\r\n- **Build Configuration:**\r\n  - Aligned tsup config with project-starter (`clean: false`)\r\n  - Fixed build order to prevent vite output from being cleaned\r\n  - Added build setup in file structure tests\r\n\r\n- **Test Infrastructure:**\r\n  - Added `test:install` scripts to match project-starter pattern\r\n  - Created new test files:\r\n    - `build-order.test.ts` - Validates build process\r\n    - `frontend.test.ts` - Comprehensive frontend testing\r\n    - `tee-validation.test.ts` - TEE-specific validation tests\r\n    - `vite-config-utils.ts` - Helper for vite config parsing\r\n\r\n## Technical Details\r\n\r\n### Key Architectural Improvements\r\n\r\n1. **Consistent Plugin Interface:**\r\n   ```typescript\r\n   async init(config: Record<string, string>, runtime: IAgentRuntime)\r\n   ```\r\n\r\n2. **Test Environment Handling:**\r\n   - Proper detection of test environment\r\n   - Sensible defaults for required environment variables\r\n   - No test workarounds or skipped tests\r\n\r\n3. **Build Process Alignment:**\r\n   - All projects use consistent build order: `tsc && vite build && tsup`\r\n   - Unified tsup configuration across templates\r\n\r\n## Testing\r\n\r\nAll changes have been thoroughly tested:\r\n\r\n```bash\r\n# Create and test each project type\r\nelizaos create --type plugin --template quick test-quick -y\r\ncd test-quick && elizaos test --type component ✅\r\n\r\nelizaos create --type plugin --template full test-full -y\r\ncd test-full && elizaos test --type component ✅\r\n\r\nelizaos create --type tee test-tee -y\r\ncd test-tee && elizaos test --type component ✅\r\n\r\nelizaos create --type project test-project -y\r\ncd test-project && elizaos test --type component ✅\r\n```\r\n\r\n## Impact\r\n\r\n- ✅ Developers can now create projects/plugins and immediately run tests successfully\r\n- ✅ CI/CD pipelines work out of the box for generated projects\r\n- ✅ Consistent behavior across all project types\r\n- ✅ Better developer experience with clear test patterns\r\n\r\n## Breaking Changes\r\n\r\nNone. All changes maintain backward compatibility.\r\n\r\n## Notes\r\n\r\n- This PR focuses only on component tests (`--type component`)\r\n- E2E tests (`--type e2e`) will be addressed in a follow-up PR\r\n- No changes to runtime behavior, only test and build configurations\r\n\r\n## Related Issues\r\n\r\nFixes issues with `elizaos test` command failing on newly created projects.\r\n\r\n## Checklist\r\n\r\n- [x] All component tests pass for generated projects\r\n- [x] No breaking changes to existing functionality\r\n- [x] Code follows project conventions\r\n- [x] TypeScript compilation succeeds\r\n- [x] Linting passes (with expected bun:test type warnings)\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n\n## Summary by CodeRabbit\n\n* **New Features**\n  * Added a public status endpoint to report TEE enablement and vendor.\n  * Introduced a class-based TEE starter service with lifecycle methods and capability description.\n  * Added a build order integration test to ensure frontend build outputs persist after backend build.\n  * Enhanced test utilities with comprehensive mock runtime and fixture helpers.\n\n* **Bug Fixes**\n  * Improved configuration validation for TEE-related environment variables.\n  * Ensured test dependencies are installed before running tests.\n\n* **Refactor**\n  * Simplified and improved logging messages and example texts in plugins and services.\n  * Updated service and plugin initialization logic for better environment handling.\n\n* **Tests**\n  * Significantly expanded and restructured test suites for plugins, services, actions, models, providers, routes, and events.\n  * Improved test coverage for configuration, error handling, and integration scenarios.\n\n* **Chores**\n  * Updated dependency resolutions and overrides for compatibility.\n  * Added post-install scripts to patch dependencies as needed.\n  * Relaxed package name assertions in project and file structure tests.\n\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-03T20:42:41Z",
      "mergedAt": null,
      "additions": 2090,
      "deletions": 628
    },
    {
      "id": "PR_kwDOMT5cIs6hxQPB",
      "title": "sessions API",
      "author": "ChristopherTrimboli",
      "number": 5704,
      "body": "# Sessions API Documentation\r\n\r\nThe Sessions API provides a simplified interface for messaging between users and agents, abstracting away the complexity of servers, channels, and participants.\r\n\r\n## Overview\r\n\r\nThe Sessions API is designed for:\r\n- Simple chat applications\r\n- Discord activities\r\n- Web interfaces\r\n- Mobile apps\r\n- Any client that needs basic user-to-agent messaging\r\n\r\n## Key Benefits\r\n\r\n1. **Simplified Interface**: No need to manage servers, channels, or participants\r\n2. **Session-based**: Each conversation is a unique session with automatic cleanup\r\n3. **Stateless Clients**: Clients only need to track a session ID\r\n4. **Unified Response Format**: Consistent message format across all endpoints\r\n\r\n## API Endpoints\r\n\r\n### Create Session\r\n```\r\nPOST /api/messaging/sessions\r\nBody: {\r\n  \"agentId\": \"uuid\",\r\n  \"userId\": \"uuid\",\r\n  \"metadata\": {} // optional\r\n}\r\nResponse: {\r\n  \"sessionId\": \"uuid\",\r\n  \"agentId\": \"uuid\",\r\n  \"userId\": \"uuid\",\r\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\r\n  \"metadata\": {}\r\n}\r\n```\r\n\r\n### Send Message\r\n```\r\nPOST /api/messaging/sessions/:sessionId/messages\r\nBody: {\r\n  \"content\": \"Hello, agent!\",\r\n  \"attachments\": [], // optional\r\n  \"metadata\": {} // optional\r\n}\r\nResponse: {\r\n  \"id\": \"uuid\",\r\n  \"content\": \"Hello, agent!\",\r\n  \"authorId\": \"user-uuid\",\r\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\r\n  \"metadata\": {}\r\n}\r\n```\r\n\r\n### Get Messages\r\n```\r\nGET /api/messaging/sessions/:sessionId/messages?limit=50&after=timestamp\r\nResponse: {\r\n  \"messages\": [\r\n    {\r\n      \"id\": \"uuid\",\r\n      \"content\": \"Hello!\",\r\n      \"authorId\": \"uuid\",\r\n      \"isAgent\": true/false,\r\n      \"createdAt\": \"2024-01-01T00:00:00Z\",\r\n      \"metadata\": {\r\n        \"thought\": \"...\", // for agent messages\r\n        \"actions\": [...] // for agent messages\r\n      }\r\n    }\r\n  ],\r\n  \"hasMore\": true/false\r\n}\r\n```\r\n\r\n### Get Session Info\r\n```\r\nGET /api/messaging/sessions/:sessionId\r\nResponse: {\r\n  \"sessionId\": \"uuid\",\r\n  \"agentId\": \"uuid\",\r\n  \"userId\": \"uuid\",\r\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\r\n  \"lastActivity\": \"2024-01-01T00:00:00Z\",\r\n  \"metadata\": {}\r\n}\r\n```\r\n\r\n### Delete Session\r\n```\r\nDELETE /api/messaging/sessions/:sessionId\r\nResponse: {\r\n  \"success\": true\r\n}\r\n```\r\n\r\n## Migration from Simple API\r\n\r\nThe old Discord-specific simple API can be replaced with the sessions API:\r\n\r\n### Old Simple API:\r\n```javascript\r\n// Get agents\r\nGET /api/messaging/simple/agents\r\n\r\n// Send message\r\nPOST /api/messaging/simple/:agentId/message\r\nBody: { message, sessionId, userId }\r\n\r\n// Get messages\r\nGET /api/messaging/simple/:agentId/messages?sessionId=xxx\r\n```\r\n\r\n### New Sessions API:\r\n```javascript\r\n// Get agents (use existing endpoint)\r\nGET /api/agents\r\n\r\n// Create session first\r\nPOST /api/messaging/sessions\r\nBody: { agentId, userId }\r\n\r\n// Send message\r\nPOST /api/messaging/sessions/:sessionId/messages\r\nBody: { content }\r\n\r\n// Get messages\r\nGET /api/messaging/sessions/:sessionId/messages\r\n```\r\n\r\n## Example Usage\r\n\r\n```javascript\r\n// 1. Create a session\r\nconst { sessionId } = await fetch('/api/messaging/sessions', {\r\n  method: 'POST',\r\n  headers: { 'Content-Type': 'application/json' },\r\n  body: JSON.stringify({\r\n    agentId: 'agent-uuid',\r\n    userId: 'user-uuid',\r\n    metadata: { platform: 'discord-activity' }\r\n  })\r\n}).then(r => r.json());\r\n\r\n// 2. Send a message\r\nawait fetch(`/api/messaging/sessions/${sessionId}/messages`, {\r\n  method: 'POST',\r\n  headers: { 'Content-Type': 'application/json' },\r\n  body: JSON.stringify({\r\n    content: 'Hello, agent!'\r\n  })\r\n});\r\n\r\n// 3. Poll for responses\r\nconst pollForResponses = async () => {\r\n  const { messages } = await fetch(\r\n    `/api/messaging/sessions/${sessionId}/messages?after=${lastTimestamp}`\r\n  ).then(r => r.json());\r\n  \r\n  const agentMessages = messages.filter(m => m.isAgent);\r\n  if (agentMessages.length > 0) {\r\n    // Handle agent response\r\n  }\r\n};\r\n```\r\n\r\n## Session Lifecycle\r\n\r\n1. Sessions are created on-demand when a user starts a conversation\r\n2. Sessions remain active as long as messages are being exchanged\r\n3. Inactive sessions are automatically cleaned up after 30 minutes\r\n4. Clients can explicitly delete sessions when done\r\n\r\n## Best Practices\r\n\r\n1. **One session per conversation**: Create a new session for each unique conversation\r\n2. **Store session ID**: Clients should persist the session ID for the duration of the conversation\r\n3. **Handle session expiry**: If a session expires, create a new one\r\n4. **Poll efficiently**: Use the `after` parameter to only get new messages\r\n5. **Clean up**: Delete sessions when the conversation ends (optional)",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-01T18:50:42Z",
      "mergedAt": null,
      "additions": 1169,
      "deletions": 9
    },
    {
      "id": "PR_kwDOMT5cIs6hu6wE",
      "title": "feat: auto-install @elizaos/cli as dev dependency for start/dev commands",
      "author": "wtfsayo",
      "number": 5702,
      "body": "## 🚀 Feature: Auto-install @elizaos/cli as dev dependency using bun\n\n### Summary\nAutomatically adds `@elizaos/cli` as a dev dependency using **bun** when running `start` or `dev` commands in non-monorepo environments. This improves the development experience by ensuring developers always have access to the local CLI for better performance and consistency.\n\n### 🔧 Implementation Details\n\n**Core Components:**\n- **New utility:** `dependency-manager.ts` with smart auto-installation logic optimized for bun\n- **Enhanced commands:** Integrated into both `start` and `dev` commands\n- **Comprehensive testing:** 49 passing tests with 100% coverage for the new module\n\n**Smart Detection Logic:**\n- ✅ **Will install** when: Not in monorepo, has package.json, @elizaos/cli missing, auto-install enabled\n- ❌ **Will skip** when: In monorepo, CI/test environments, CLI already present, or disabled via env vars\n\n**Bun-Only Approach:**\n- Assumes bun is available (ElizaOS standard)\n- Uses `bun add --dev @elizaos/cli` for installation\n- Optimized messaging for bun usage\n- No fallback to other package managers\n\n### 🎯 Key Features\n\n1. **Bun-native**: Uses bun commands exclusively, aligned with ElizaOS philosophy\n2. **Non-intrusive**: Only runs when conditions are appropriate\n3. **User controllable**: Can be disabled with `--no-auto-install` flag or `ELIZA_NO_AUTO_INSTALL=true`\n4. **Environment aware**: Automatically skips in CI/test environments\n5. **Error resilient**: Graceful handling of network failures, permission issues, etc.\n6. **Performance conscious**: Uses spinners and provides clear user feedback\n\n### 🧪 Testing\n\n- **Unit tests**: 30 tests covering all utility functions\n- **Integration tests**: 19 tests using real file system operations\n- **Full coverage**: 100% code coverage for the dependency manager module\n- **TypeScript compliant**: No errors or warnings\n- **Bun-focused**: All tests use bun:test framework\n\n### 🎨 User Experience\n\n```bash\n# When auto-installing (non-monorepo projects)\nelizaos start\n# Shows: \"Adding @elizaos/cli as dev dependency for enhanced development experience...\"\n# Shows: \"Installing @elizaos/cli with bun...\"\n# Shows: \"✓ @elizaos/cli installed successfully\"\n# Shows: \"Next time you can use the local CLI for better performance and consistency\"\n\n# When conditions aren't met, runs silently without interruption\n```\n\n### 🔗 Files Changed\n\n- `packages/cli/src/utils/dependency-manager.ts` - New bun-optimized utility (197 lines)\n- `packages/cli/src/commands/start/index.ts` - Added ensureElizaOSCli() call\n- `packages/cli/src/commands/dev/actions/dev-server.ts` - Added ensureElizaOSCli() call\n- `packages/cli/src/utils/__tests__/dependency-manager.test.ts` - Unit tests (464 lines)\n- `packages/cli/src/utils/__tests__/dependency-manager.integration.test.ts` - Integration tests (297 lines)\n\n### 🐛 Bug Fix: Database Integration Tests\n\n**Issue:** CI workflow was failing due to embedding dimension mismatch in plugin-sql integration tests.\n\n**Root Cause:** Test was creating 768-dimensional embeddings but database adapter was configured for 384 dimensions by default, causing constraint violation:\n```\n❌ ERROR: expected 384 dimensions, not 768\n```\n\n**Fix:** Added `await adapter.ensureEmbeddingDimension(768)` call before creating 768-dimensional embeddings in memory integration test.\n\n**File Changed:**\n- `packages/plugin-sql/src/__tests__/integration/memory.test.ts` - Fixed embedding dimension configuration\n\n**Result:** All database integration tests now pass ✅\n\n### ✅ Checklist\n\n- [x] Follows TypeScript rules (no any/never/unknown types)\n- [x] Uses bun:test framework exclusively\n- [x] Bun-only approach (no other package manager support)\n- [x] Comprehensive error handling\n- [x] All tests pass successfully (49/49)\n- [x] No TypeScript errors or warnings\n- [x] Follows existing codebase patterns\n- [x] Graceful degradation for edge cases\n- [x] User-controllable behavior\n- [x] 100% test coverage for new code\n- [x] **Fixed CI workflow database integration tests**\n\n### 📋 Testing Commands\n\n```bash\n# Run dependency manager tests\ncd packages/cli && bun test src/utils/__tests__/dependency-manager*\n\n# Build and verify no errors\ncd packages/cli && bun run build\n\n# Run database integration tests (now fixed)\ncd packages/plugin-sql && bun test src/__tests__/integration/memory.test.ts\n```\n\n### 🎯 Bun Alignment\n\nThis implementation is fully aligned with ElizaOS's bun-only philosophy:\n- Uses `bun add` for package installation\n- Leverages existing bun utilities in the codebase\n- Assumes bun availability (no fallbacks)\n- Optimized messaging for bun usage\n- All tests use bun:test framework\n\nThis enhancement ensures that developers working on ElizaOS projects outside of the monorepo always have access to the local CLI tools using bun, improving development consistency and performance.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-01T14:32:56Z",
      "mergedAt": "2025-08-01T15:37:20Z",
      "additions": 1043,
      "deletions": 0
    },
    {
      "id": "PR_kwDOMT5cIs6hurLT",
      "title": "feat: build optimization and markdown rendering support",
      "author": "wtfsayo",
      "number": 5701,
      "body": "## Summary\n\nThis PR introduces build optimizations and enhanced markdown rendering capabilities:\n\n### Key Changes\n- **Build Optimization**: Removed docs filter from main build process for more efficient builds\n- **Dependency Cleanup**: Removed  dependency from core package to reduce bundle size  \n- **Markdown Enhancement**: Added  and  support for enhanced markdown rendering in client\n- **Documentation**: Cleaned up formatting and whitespace in documentation files\n- **Dependencies**: Updated lock files and package versions to support better markdown parsing with GFM features\n\n### Technical Details\n- Modified main  build script to remove docs filter\n- Removed  from  dependencies\n- Added  and  to client package\n- Updated  with new dependency versions\n- Minor formatting improvements in  documentation\n\n### Testing\n- All existing tests should continue to pass\n- Build process should be more efficient without docs filter\n- Client should now support enhanced markdown rendering with GitHub Flavored Markdown features\n\n### Breaking Changes\nNone - this is purely additive functionality and build optimizations.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-01T14:10:59Z",
      "mergedAt": "2025-08-01T14:15:10Z",
      "additions": 290,
      "deletions": 3495
    },
    {
      "id": "PR_kwDOMT5cIs6hudPO",
      "title": "remove un-necessary/obsolete readme details",
      "author": "wtfsayo",
      "number": 5700,
      "body": "This PR removes obsolete documentation from the README.md file:\n\n- Removes outdated LangChain integration reference from the core package description\n- Removes extensive Tauri CI/CD documentation section that covered workflows, mobile backend configuration, and application signing\n- Cleans up the README to focus on current architecture and removes outdated deployment information\n\nThese sections were no longer relevant to the current state of the project and were creating confusion for new contributors.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-01T13:50:06Z",
      "mergedAt": "2025-08-01T13:50:20Z",
      "additions": 0,
      "deletions": 65
    }
  ],
  "codeChanges": {
    "additions": 1333,
    "deletions": 3757,
    "files": 16,
    "commitCount": 37
  },
  "completedItems": [
    {
      "title": "feat: auto-install @elizaos/cli as dev dependency for start/dev commands",
      "prNumber": 5702,
      "type": "feature",
      "body": "## 🚀 Feature: Auto-install @elizaos/cli as dev dependency using bun\n\n### Summary\nAutomatically adds `@elizaos/cli` as a dev dependency using **bun** when running `start` or `dev` commands in non-monorepo environments. This improves the dev",
      "files": [
        "bun.lock",
        "packages/cli/src/commands/dev/actions/dev-server.ts",
        "packages/cli/src/commands/start/index.ts",
        "packages/cli/src/utils/__tests__/dependency-manager.integration.test.ts",
        "packages/cli/src/utils/__tests__/dependency-manager.test.ts",
        "packages/cli/src/utils/dependency-manager.ts",
        "packages/plugin-sql/src/__tests__/integration/memory.test.ts"
      ]
    },
    {
      "title": "feat: build optimization and markdown rendering support",
      "prNumber": 5701,
      "type": "feature",
      "body": "## Summary\n\nThis PR introduces build optimizations and enhanced markdown rendering capabilities:\n\n### Key Changes\n- **Build Optimization**: Removed docs filter from main build process for more efficient builds\n- **Dependency Cleanup**: Remo",
      "files": [
        "bun.lock",
        "llms.txt",
        "package.json",
        "packages/cli/package.json",
        "packages/client/package.json",
        "packages/core/package.json"
      ]
    },
    {
      "title": "remove un-necessary/obsolete readme details",
      "prNumber": 5700,
      "type": "other",
      "body": "This PR removes obsolete documentation from the README.md file:\n\n- Removes outdated LangChain integration reference from the core package description\n- Removes extensive Tauri CI/CD documentation section that covered workflows, mobile backe",
      "files": [
        "README.md"
      ]
    },
    {
      "title": "chore: remove obsolete GitHub workflow files",
      "prNumber": 5699,
      "type": "other",
      "body": "This PR removes 3 obsolete GitHub workflow files that are no longer needed:\n\n- **deploy-cli.yml**: CLI deployment workflow\n- **docs-publish.yml**: Documentation publishing workflow  \n- **llmstxt-generator.yml**: Repomix documentation genera",
      "files": [
        ".github/workflows/deploy-cli.yml",
        ".github/workflows/docs-publish.yml",
        ".github/workflows/llmstxt-generator.yml"
      ]
    }
  ],
  "topContributors": [
    {
      "username": "wtfsayo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82053242?u=98209a1f10456f42d4d2fa71db4d5bf4a672cbc3&v=4",
      "totalScore": 151.76313398260396,
      "prScore": 146.42313398260396,
      "issueScore": 0,
      "reviewScore": 5,
      "commentScore": 0.33999999999999997,
      "summary": null
    },
    {
      "username": "yungalgo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/113615973?u=92e0f29f7e2fbb8ce46ed13c51f692ca803de02d&v=4",
      "totalScore": 43.8837738965761,
      "prScore": 43.5437738965761,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.33999999999999997,
      "summary": null
    },
    {
      "username": "ChristopherTrimboli",
      "avatarUrl": "https://avatars.githubusercontent.com/u/27584221?u=0d816ce1dcdea8f925aba18bb710153d4a87a719&v=4",
      "totalScore": 38.18064172760327,
      "prScore": 33.18064172760327,
      "issueScore": 0,
      "reviewScore": 5,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "RolandOne",
      "avatarUrl": "https://avatars.githubusercontent.com/u/38446707?v=4",
      "totalScore": 5.909573590279972,
      "prScore": 5.909573590279972,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "lalalune",
      "avatarUrl": "https://avatars.githubusercontent.com/u/18633264?u=e2e906c3712c2506ebfa98df01c2cfdc50050b30&v=4",
      "totalScore": 4,
      "prScore": 0,
      "issueScore": 4,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "samarth30",
      "avatarUrl": "https://avatars.githubusercontent.com/u/48334430?u=1fc119a6c2deb8cf60448b4c8961cb21dc69baeb&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    }
  ],
  "newPRs": 6,
  "mergedPRs": 4,
  "newIssues": 3,
  "closedIssues": 0,
  "activeContributors": 7
}