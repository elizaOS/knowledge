{
  "interval": {
    "intervalStart": "2025-08-10T00:00:00.000Z",
    "intervalEnd": "2025-08-17T00:00:00.000Z",
    "intervalType": "week"
  },
  "repository": "elizaos/eliza",
  "overview": "From 2025-08-10 to 2025-08-17, elizaos/eliza had 8 new PRs (7 merged), 16 new issues, and 14 active contributors.",
  "topIssues": [
    {
      "id": "I_kwDOMT5cIs7Eng6F",
      "title": "feat(scenarios): Implement natural language agent interaction and response validation",
      "author": "monilpat",
      "number": 5727,
      "repository": "elizaos/eliza",
      "body": "# feat(scenarios): Implement natural language agent interaction and response validation\n\n## Description\n\nThis ticket enables scenarios to test agent behavior through natural language interactions rather than direct code execution. This allows testing of agent reasoning, decision-making, and response generation in realistic conversation contexts with proper evaluation of agent responses.\n\n## Acceptance Criteria\n\n1. Scenario `run` blocks support `input` field for natural language prompts to agents\n2. Agent responses are captured and available for evaluation (text, thoughts, actions)\n3. Evaluators can access both agent response text and execution context\n4. Support for multi-turn conversations in scenarios\n5. Agent responses include thought process and action decisions\n6. Integration with existing evaluation engine for response validation\n7. Support for conversation context across multiple steps\n8. Agent response timing and performance metrics\n\n## Technical Approach\n\n### 1. Enhanced Run Step Schema\n```typescript\n// packages/cli/src/scenarios/schema.ts\nconst RunStepSchema = z.object({\n  name: z.string().optional(),\n  // Natural language input to agent\n  input: z.string().optional(),\n  // Direct code execution (existing)\n  lang: z.string().optional(),\n  code: z.string().optional(),\n  // Agent interaction specific\n  agent_context: z.object({\n    conversation_id: z.string().optional(),\n    user_id: z.string().optional(),\n    room_id: z.string().optional(),\n  }).optional(),\n  evaluations: z.array(EvaluationSchema),\n});\n```\n\n### 2. Agent Interaction Engine\n```typescript\n// packages/cli/src/scenarios/agent-interaction.ts\nexport class AgentInteractionEngine {\n  constructor(private runtime: IAgentRuntime) {}\n\n  async interactWithAgent(input: string, context?: AgentContext): Promise<AgentResponse> {\n    // Create message for agent\n    const message: Memory = {\n      entityId: context?.user_id || 'scenario-user',\n      roomId: context?.room_id || 'scenario-room',\n      content: {\n        type: 'text',\n        text: input,\n      },\n      metadata: {\n        type: 'message',\n        conversationId: context?.conversation_id,\n      },\n    };\n\n    // Send to agent and capture response\n    const startTime = Date.now();\n    const response = await this.runtime.processMessage(message);\n    const endTime = Date.now();\n\n    return {\n      text: response.text,\n      thoughts: response.thoughts,\n      actions: response.actions,\n      timing: {\n        startTime,\n        endTime,\n        duration: endTime - startTime,\n      },\n      context: {\n        conversationId: context?.conversation_id,\n        messageId: message.id,\n      },\n    };\n  }\n}\n```\n\n### 3. Enhanced Execution Result\n```typescript\n// packages/cli/src/scenarios/providers.ts\nexport interface ExecutionResult {\n  exitCode: number;\n  stdout: string;\n  stderr: string;\n  files: Record<string, string>;\n  // New: Agent interaction results\n  agentResponse?: AgentResponse;\n  conversationHistory?: AgentResponse[];\n}\n```\n\n## Test Scenario\n\nCreate `agent-interaction-test.scenario.yaml`:\n```yaml\nname: \"Agent Interaction Test\"\ndescription: \"Tests natural language interaction with agents\"\n\nplugins:\n  - \"@elizaos/plugin-github\"\n  - \"@elizaos/plugin-evm\"\n\nenvironment:\n  type: e2b\n\nsetup:\n  mocks:\n    - service: \"github-service\"\n      method: \"searchIssues\"\n      response:\n        - title: \"Implement Dark Mode\"\n          number: 123\n          state: \"open\"\n          labels: [\"feature\", \"ui\"]\n    - service: \"evm-service\"\n      method: \"getBalancesForAddress\"\n      response:\n        - chain: \"ethereum\"\n          balances:\n            - symbol: \"ETH\"\n              amount: \"2.5\"\n\nrun:\n  - name: \"Ask agent about roadmap\"\n    input: \"What new features are you planning to add?\"\n    agent_context:\n      conversation_id: \"roadmap-conversation\"\n      user_id: \"test-user\"\n    evaluations:\n      - type: \"trajectory_contains_action\"\n        action: \"github-service.searchIssues\"\n        description: \"Verify agent searched for issues\"\n      \n      - type: \"string_contains\"\n        value: \"Dark Mode\"\n        description: \"Verify agent mentioned the mocked issue\"\n      \n      - type: \"llm_judge\"\n        prompt: \"Did the agent provide a helpful and coherent response about new features?\"\n        expected: \"yes\"\n        description: \"Verify agent response quality\"\n\n  - name: \"Ask agent about wallet\"\n    input: \"What's my current wallet balance?\"\n    agent_context:\n      conversation_id: \"wallet-conversation\"\n      user_id: \"test-user\"\n    evaluations:\n      - type: \"trajectory_contains_action\"\n        action: \"evm-service.getBalancesForAddress\"\n        description: \"Verify agent checked wallet balance\"\n      \n      - type: \"string_contains\"\n        value: \"2.5 ETH\"\n        description: \"Verify agent reported the correct balance\"\n      \n      - type: \"llm_judge\"\n        prompt: \"Did the agent clearly explain the wallet balance information?\"\n        expected: \"yes\"\n\n  - name: \"Multi-turn conversation\"\n    input: \"Can you help me with both my wallet and roadmap?\"\n    agent_context:\n      conversation_id: \"multi-turn-conversation\"\n      user_id: \"test-user\"\n    evaluations:\n      - type: \"trajectory_contains_action\"\n        action: \"evm-service.getBalancesForAddress\"\n      - type: \"trajectory_contains_action\"\n        action: \"github-service.searchIssues\"\n      - type: \"string_contains\"\n        value: \"ETH\"\n      - type: \"string_contains\"\n        value: \"Dark Mode\"\n      - type: \"llm_judge\"\n        prompt: \"Did the agent address both wallet and roadmap questions comprehensively?\"\n        expected: \"yes\"\n\njudgment:\n  strategy: all_pass\n```\n\n## Testing Strategy\n\n1. **Single Turn**: Test basic agent interaction and response\n2. **Multi-turn**: Test conversation context across steps\n3. **Action Tracking**: Verify agent uses appropriate actions\n4. **Response Quality**: Test LLM judge evaluation of responses\n5. **Performance**: Test response timing and metrics\n6. **Error Handling**: Test agent behavior with invalid inputs\n\n## Dependencies\n\n- Requires plugin system integration (Ticket 1)\n- Builds on advanced mocking system (Ticket 2)\n- Integrates with existing evaluation engine\n- Depends on agent runtime message processing",
      "createdAt": "2025-08-07T02:49:34Z",
      "closedAt": "2025-08-12T04:21:31Z",
      "state": "CLOSED",
      "commentCount": 1
    },
    {
      "id": "I_kwDOMT5cIs7Engk3",
      "title": "feat(scenarios): Implement conditional mocking and complex response structures",
      "author": "monilpat",
      "number": 5726,
      "repository": "elizaos/eliza",
      "body": "# feat(scenarios): Implement conditional mocking and complex response structures\n\n## Description\n\nThis ticket enhances the mocking system to support conditional responses based on input parameters and complex response structures with metadata. This enables realistic testing of service interactions like GitHub API calls or EVM transactions with proper request/response matching.\n\n## Acceptance Criteria\n\n1. Mock definitions support `when` clauses for conditional responses\n2. `when` clauses can match on method arguments, input parameters, or request context\n3. Mock responses support complex nested structures with metadata (timestamps, IDs, etc.)\n4. Multiple mock responses can be defined for the same service/method with different conditions\n5. Mock system provides clear logging of which mock was triggered and why\n6. Mock responses can include realistic error conditions and edge cases\n7. Support for dynamic response generation based on input parameters\n8. Mock validation ensures `when` clauses are syntactically correct\n\n## Technical Approach\n\n### 1. Enhanced Mock Schema\n```typescript\n// packages/cli/src/scenarios/schema.ts\nconst MockSchema = z.object({\n  service: z.string(),\n  method: z.string(),\n  when: z.object({\n    // Match on method arguments\n    args: z.array(z.any()).optional(),\n    // Match on specific argument values\n    input: z.record(z.any()).optional(),\n    // Match on request context\n    context: z.record(z.any()).optional(),\n    // Custom matching function\n    matcher: z.string().optional(), // JavaScript expression\n  }).optional(),\n  response: z.any(), // Can be function or static value\n  // For dynamic responses\n  responseFn: z.string().optional(), // JavaScript function\n  // Error simulation\n  error: z.object({\n    code: z.string(),\n    message: z.string(),\n  }).optional(),\n});\n```\n\n### 2. Mock Engine Implementation\n```typescript\n// packages/cli/src/scenarios/mock-engine.ts\nexport class MockEngine {\n  private mocks: MockDefinition[] = [];\n\n  addMock(mock: MockDefinition) {\n    this.mocks.push(mock);\n  }\n\n  async findMock(service: string, method: string, args: any[]): Promise<any> {\n    const candidates = this.mocks.filter(m => \n      m.service === service && m.method === method\n    );\n\n    for (const mock of candidates) {\n      if (await this.matchesCondition(mock, args)) {\n        this.logger.info(`Mock triggered: ${service}.${method} with condition: ${JSON.stringify(mock.when)}`);\n        return this.generateResponse(mock, args);\n      }\n    }\n\n    return null; // No mock found\n  }\n\n  private async matchesCondition(mock: MockDefinition, args: any[]): Promise<boolean> {\n    if (!mock.when) return true; // Default mock\n\n    // Match on arguments\n    if (mock.when.args) {\n      if (!this.deepEqual(args, mock.when.args)) return false;\n    }\n\n    // Match on input parameters\n    if (mock.when.input) {\n      const input = this.extractInputFromArgs(args);\n      if (!this.deepEqual(input, mock.when.input)) return false;\n    }\n\n    // Custom matcher function\n    if (mock.when.matcher) {\n      const matcherFn = new Function('args', 'input', mock.when.matcher);\n      return matcherFn(args, this.extractInputFromArgs(args));\n    }\n\n    return true;\n  }\n\n  private generateResponse(mock: MockDefinition, args: any[]): any {\n    if (mock.error) {\n      throw new Error(`${mock.error.code}: ${mock.error.message}`);\n    }\n\n    if (mock.responseFn) {\n      const responseFn = new Function('args', 'input', mock.responseFn);\n      return responseFn(args, this.extractInputFromArgs(args));\n    }\n\n    return mock.response;\n  }\n}\n```\n\n## Test Scenario\n\nCreate `advanced-mocking-test.scenario.yaml`:\n```yaml\nname: \"Advanced Mocking Test\"\ndescription: \"Tests conditional mocking and complex response structures\"\n\nplugins:\n  - \"@elizaos/plugin-github\"\n  - \"@elizaos/plugin-evm\"\n\nenvironment:\n  type: e2b\n\nsetup:\n  mocks:\n    # Conditional GitHub issue search\n    - service: \"github-service\"\n      method: \"searchIssues\"\n      when:\n        input:\n          labels: \"bug\"\n        matcher: \"input.labels.includes('bug')\"\n      response:\n        - title: \"Critical Bug Found\"\n          number: 456\n          state: \"open\"\n          labels: [\"bug\", \"critical\"]\n          created_at: \"2024-07-15T10:00:00Z\"\n\n    # Conditional GitHub issue search - different response\n    - service: \"github-service\"\n      method: \"searchIssues\"\n      when:\n        input:\n          labels: \"feature\"\n        matcher: \"input.labels.includes('feature')\"\n      response:\n        - title: \"New Feature Request\"\n          number: 789\n          state: \"open\"\n          labels: [\"feature\", \"enhancement\"]\n          created_at: \"2024-07-15T11:00:00Z\"\n\n    # Dynamic EVM balance response\n    - service: \"evm-service\"\n      method: \"getBalancesForAddress\"\n      when:\n        args: [\"0x1234567890abcdef\"]\n      responseFn: |\n        return {\n          chain: \"ethereum\",\n          address: args[0],\n          balances: [\n            { symbol: \"ETH\", amount: \"1.23\" },\n            { symbol: \"USDC\", amount: \"1000.00\" }\n          ],\n          last_updated: new Date().toISOString()\n        }\n\n    # Error simulation\n    - service: \"github-service\"\n      method: \"readFile\"\n      when:\n        input:\n          path: \"/docs/nonexistent.md\"\n      error:\n        code: \"FILE_NOT_FOUND\"\n        message: \"File does not exist\"\n\nrun:\n  - name: \"Test conditional GitHub search\"\n    input: \"Search for issues with bug label\"\n    evaluations:\n      - type: \"trajectory_contains_action\"\n        action: \"github-service.searchIssues\"\n      - type: \"string_contains\"\n        value: \"Critical Bug Found\"\n      - type: \"llm_judge\"\n        prompt: \"Did the agent correctly search for bug issues?\"\n        expected: \"yes\"\n\n  - name: \"Test dynamic EVM response\"\n    input: \"What's the balance for address 0x1234567890abcdef?\"\n    evaluations:\n      - type: \"trajectory_contains_action\"\n        action: \"evm-service.getBalancesForAddress\"\n      - type: \"string_contains\"\n        value: \"1.23 ETH\"\n      - type: \"string_contains\"\n        value: \"1000.00 USDC\"\n\n  - name: \"Test error handling\"\n    input: \"Read the file /docs/nonexistent.md\"\n    evaluations:\n      - type: \"trajectory_contains_action\"\n        action: \"github-service.readFile\"\n      - type: \"string_contains\"\n        value: \"File does not exist\"\n\njudgment:\n  strategy: all_pass\n```\n\n## Testing Strategy\n\n1. **Conditional Matching**: Test different responses based on input parameters\n2. **Dynamic Responses**: Test response generation based on arguments\n3. **Error Simulation**: Test error handling and reporting\n4. **Complex Structures**: Test nested response objects with metadata\n5. **Multiple Mocks**: Test multiple mocks for same service/method\n6. **Logging**: Verify mock selection is logged clearly\n\n## Dependencies\n\n- Builds on existing mock system in scenarios\n- Requires plugin system integration (Ticket 1)\n- Integrates with agent interaction testing (Ticket 3) ",
      "createdAt": "2025-08-07T02:49:00Z",
      "closedAt": "2025-08-12T04:21:45Z",
      "state": "CLOSED",
      "commentCount": 1
    },
    {
      "id": "I_kwDOMT5cIs7EngKo",
      "title": "feat(scenarios): Implement plugin specification and dynamic loading",
      "author": "monilpat",
      "number": 5725,
      "repository": "elizaos/eliza",
      "body": "# feat(scenarios): Implement plugin specification and dynamic loading\n\n## Description\n\nThis ticket implements plugin specification in scenario YAML files, allowing scenarios to declare which plugins are required for testing. This enables testing of agent behaviors that depend on specific plugins like `@elizaos/plugin-github` or `@elizaos/plugin-evm`. The system will dynamically load specified plugins during scenario execution and make their actions, providers, and services available to the agent.\n\n## Acceptance Criteria\n\n1. Scenario YAML supports a `plugins` array at the root level with string plugin names\n2. The `initializeAgent()` function respects scenario plugin specifications and loads them via `startAgent()`\n3. Plugin loading follows the same dependency resolution and error handling as the main CLI\n4. Scenarios can specify both string plugin names (`@elizaos/plugin-github`) and direct plugin objects\n5. Plugin loading errors are clearly reported with actionable guidance\n6. Default plugins (bootstrap, sql) are automatically included unless explicitly excluded via `exclude_defaults: true`\n7. Plugin conflicts are detected and reported during scenario validation\n8. Plugin initialization errors don't crash the scenario but are reported in results\n\n## Technical Approach\n\n### 1. Update Scenario Schema\n```typescript\n// packages/cli/src/scenarios/schema.ts\nconst ScenarioSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  plugins: z.array(z.string()).optional(), // e.g., [\"@elizaos/plugin-github\"]\n  exclude_defaults: z.boolean().optional(), // exclude bootstrap/sql\n  environment: EnvironmentSchema,\n  setup: SetupSchema.optional(),\n  run: z.array(RunStepSchema),\n  judgment: JudgmentSchema,\n});\n```\n\n### 2. Enhance Runtime Factory\n```typescript\n// packages/cli/src/scenarios/runtime-factory.ts\nexport async function initializeAgent(scenario: Scenario): Promise<IAgentRuntime> {\n  const character: Character = {\n    name: 'scenario-runner',\n    id: stringToUuid('scenario-runner'),\n    bio: 'A minimal character for running scenarios',\n    plugins: scenario.plugins || []\n  };\n\n  // Load default plugins unless excluded\n  if (!scenario.exclude_defaults) {\n    character.plugins.push('@elizaos/plugin-bootstrap', '@elizaos/plugin-sql');\n  }\n\n  const runtime = await startAgent(\n    encryptedCharacter(character),\n    server,\n    undefined,\n    character.plugins,\n    { isTestMode: true }\n  );\n\n  return runtime;\n}\n```\n\n### 3. Plugin Validation\n```typescript\n// packages/cli/src/scenarios/plugin-validator.ts\nexport async function validateScenarioPlugins(scenario: Scenario): Promise<ValidationResult[]> {\n  const results: ValidationResult[] = [];\n  \n  for (const pluginName of scenario.plugins || []) {\n    try {\n      const plugin = await loadAndPreparePlugin(pluginName);\n      if (!plugin) {\n        results.push({\n          type: 'error',\n          message: `Plugin '${pluginName}' could not be loaded`,\n          suggestion: 'Check if plugin is installed or built correctly'\n        });\n      }\n    } catch (error) {\n      results.push({\n        type: 'error', \n        message: `Failed to validate plugin '${pluginName}': ${error.message}`,\n        suggestion: 'Verify plugin dependencies and configuration'\n      });\n    }\n  }\n  \n  return results;\n}\n```\n\n## Test Scenario\n\nCreate `plugin-integration-test.scenario.yaml`:\n```yaml\nname: \"Plugin Integration Test\"\ndescription: \"Tests loading and using plugins specified in scenario YAML\"\n\nplugins:\n  - \"@elizaos/plugin-github\"\n  - \"@elizaos/plugin-evm\"\n\nenvironment:\n  type: e2b\n\nsetup:\n  mocks:\n    - service: \"github-service\"\n      method: \"searchIssues\"\n      response:\n        - title: \"Test Issue\"\n          number: 123\n          state: \"open\"\n    - service: \"evm-service\"\n      method: \"getBalancesForAddress\"\n      response:\n        - chain: \"ethereum\"\n          balances:\n            - symbol: \"ETH\"\n              amount: \"1.23\"\n\nrun:\n  - name: \"Test GitHub plugin actions\"\n    input: \"Search for issues with label 'bug'\"\n    evaluations:\n      - type: \"trajectory_contains_action\"\n        action: \"github-service.searchIssues\"\n        description: \"Verify GitHub plugin action was executed\"\n      \n      - type: \"string_contains\"\n        value: \"Test Issue\"\n        description: \"Verify agent found the mocked issue\"\n\n  - name: \"Test EVM plugin actions\"\n    input: \"What's my wallet balance?\"\n    evaluations:\n      - type: \"trajectory_contains_action\"\n        action: \"evm-service.getBalancesForAddress\"\n        description: \"Verify EVM plugin action was executed\"\n      \n      - type: \"string_contains\"\n        value: \"1.23 ETH\"\n        description: \"Verify agent reported the mocked balance\"\n\njudgment:\n  strategy: all_pass\n```\n\n## Testing Strategy\n\n1. **Plugin Loading Test**: Verify plugins load without errors\n2. **Action Availability Test**: Confirm agent can use plugin actions\n3. **Error Handling Test**: Test with non-existent plugin\n4. **Default Plugin Test**: Verify bootstrap/sql are included by default\n5. **Exclusion Test**: Test `exclude_defaults: true` behavior\n\n## Dependencies\n\n- Fixes the `startAgent` hanging issue (#5719) to enable plugin testing\n- Builds on existing `loadAndPreparePlugin` functionality\n- Integrates with current scenario execution flow ",
      "createdAt": "2025-08-07T02:48:08Z",
      "closedAt": "2025-08-12T04:21:13Z",
      "state": "CLOSED",
      "commentCount": 1
    },
    {
      "id": "I_kwDOMT5cIs7FTvRT",
      "title": "Critical: Plugin Publishing Fails with False Success Reports",
      "author": "monilpat",
      "number": 5754,
      "repository": "elizaos/eliza",
      "body": "## Issue Summary\nThe `elizaos publish --npm` command reports successful publishing but the plugin is not actually published to npm, despite showing success messages. The npm publish is failing with a 404 error, but the ElizaOS CLI incorrectly reports success.\n\n## Key Problems Identified\n\n### 1. Critical NPM Publishing Failure\n- **Error**: `npm error 404 Not Found - PUT https://registry.npmjs.org/@elizaos%2fplugin-polygon - Not found`\n- **Issue**: The package scope `@elizaos` doesn't exist on npm, preventing publishing\n- **Impact**: Package cannot be published to npm, but CLI reports success\n\n### 2. False Success Reporting\n- **Issue**: CLI reports `[√] Successfully published @elizaos/plugin-polygon@1.0.0 to npm`\n- **Reality**: npm publish failed with 404 error\n- **Impact**: Developers believe their plugin is published when it's not\n\n### 3. Registry Repository Mismatch\n- **Expected**: Should create PR against `https://github.com/elizaos-plugins/registry`\n- **Actual**: Still references old registry `https://github.com/elizaos/registry`\n- **Impact**: Plugin won't appear in the official ElizaOS registry\n\n## Steps to Reproduce\n\n```bash\n# Navigate to the plugin directory\ncd packages/plugin-polygon\n\n# Ensure you're on the correct branch with the changes\ngit checkout polygon\n\n# Run the publish command\nelizaos publish --npm\n\n# Verify the success message appears\n# [√] Successfully published @elizaos/plugin-polygon@1.0.0 to npm\n\n# Check if package actually exists on npm\nnpm view @elizaos/plugin-polygon@1.0.0\n# Result: 404 Not Found - '@elizaos/plugin-polygon@1.0.0' is not in this registry\n```\n\n## Technical Details\n\n### NPM Error Analysis\nThe npm logs show the root cause:\n```\nhttp fetch PUT 404 https://registry.npmjs.org/@elizaos%2fplugin-polygon 507ms\nerror 404 Not Found - PUT https://registry.npmjs.org/@elizaos%2fplugin-polygon - Not found\n```\n\nThis indicates that the `@elizaos` scope doesn't exist on npm, which is required for publishing scoped packages.\n\n### CLI Error Handling Failure\nThe ElizaOS CLI is not properly parsing npm error codes:\n- npm returns exit code 1 (failure)\n- CLI ignores the error and reports success\n- No validation that the package actually exists on npm\n\n## Expected Behavior\n1. CLI should detect npm publish failures (exit code 1)\n2. CLI should fail with clear error message when package scope doesn't exist\n3. CLI should validate that package actually exists on npm after publishing\n4. CLI should create PRs against the correct registry repository\n\n## Recommended Fixes\n\n### 1. Fix NPM Error Detection\n```typescript\n// In the publish command, check npm exit code\nconst npmResult = await exec('npm publish', { cwd: pluginDir });\nif (npmResult.exitCode !== 0) {\n  throw new Error(`NPM publish failed: ${npmResult.stderr}`);\n}\n```\n\n### 2. Add Package Scope Validation\n```typescript\n// Before publishing, check if scope exists\nconst scopeExists = await checkNpmScope('@elizaos');\nif (!scopeExists) {\n  throw new Error('Package scope @elizaos does not exist on npm. Contact npm support to create the scope.');\n}\n```\n\n### 3. Add Post-Publish Validation\n```typescript\n// After publishing, verify package exists\nconst packageExists = await checkPackageExists(packageName, version);\nif (!packageExists) {\n  throw new Error(`Package was not published successfully. Check npm logs for details.`);\n}\n```\n\n## Priority\n**Critical** - This completely blocks plugin publishing and creates false success reports.\n\n## Affected Components\n- `packages/cli/src/commands/publish.ts`\n- NPM publishing logic\n- Error handling and success reporting\n- Package scope validation\n- Registry repository configuration\n\n## Immediate Action Required\n1. **Create the `@elizaos` scope on npm** or use an existing scope\n2. Update CLI to properly detect and handle npm publish failures\n3. Add post-publish validation to ensure packages actually exist on npm\n4. Update registry repository configuration\n\n## Alternative Solutions\n1. **Use existing scope**: Change package name to `@monilpat/plugin-polygon`\n2. **Create organization scope**: Set up `@elizaos` organization on npm\n3. **Use unscoped package**: Publish as `elizaos-plugin-polygon`\n\nThis issue is critically blocking plugin developers from successfully publishing their work and needs immediate attention from the ElizaOS team.\n",
      "createdAt": "2025-08-11T14:20:08Z",
      "closedAt": null,
      "state": "OPEN",
      "commentCount": 1
    },
    {
      "id": "I_kwDOMT5cIs7ENLnL",
      "title": "make sessions api available to `api-client` package",
      "author": "linear",
      "number": 5721,
      "repository": "elizaos/eliza",
      "body": "[https://github.com/elizaOS/eliza/pull/5717/](https://github.com/elizaOS/eliza/pull/5717/)",
      "createdAt": "2025-08-05T06:37:47Z",
      "closedAt": "2025-08-13T10:25:54Z",
      "state": "CLOSED",
      "commentCount": 0
    }
  ],
  "topPRs": [
    {
      "id": "PR_kwDOMT5cIs6bjrTf",
      "title": "Next",
      "author": "lalalune",
      "number": 5242,
      "body": "Roads? Where we're going, we don't need roads!",
      "repository": "elizaos/eliza",
      "createdAt": "2025-06-22T16:11:08Z",
      "mergedAt": null,
      "additions": 1367486,
      "deletions": 69177
    },
    {
      "id": "PR_kwDOMT5cIs6jBhZB",
      "title": "feat: add EVM plugin and tools",
      "author": "wtfsayo",
      "number": 5752,
      "body": "This pull request introduces a new EVM (Ethereum Virtual Machine) plugin, integrating wallet and blockchain tooling into the application. It adds a modular service for managing EVM chains and clients, several tools for interacting with wallets and tokens, and updates the main application to initialize and use these tools when a private key is provided. The changes are grouped below by theme.\r\n\r\n**EVM Plugin Implementation**\r\n\r\n* Added the `EVMService` singleton class in `services/index.ts` to manage EVM clients, chain configuration, and wallet initialization, supporting multiple chains and private key management.\r\n* Created tools for wallet and token operations: `getWalletAddress`, `getWalletBalance`, `getTokenBalance`, and `getEVMChains`, each exposing a typed and documented API for agent use. [[1]](diffhunk://#diff-e1cc64e72e760fcd6abb43875bb23467454be701262c5956359b002f7779db31R1-R21) [[2]](diffhunk://#diff-d4a4b475e04d621fe0a29bb3c16ed8bf86ed271be701116ecde2d78a0b8885deR1-R30) [[3]](diffhunk://#diff-e75f9b72cf42c4737b0a53c8e997a259af26c7f13bcf9b38ff36e903371430f3R1-R55) [[4]](diffhunk://#diff-5e0f2d1cf5ea5545068eccb1825093cc7a938c7ba2f542391726376a3a2b22b7R1-R49)\r\n* Exported all tools and the EVM service from the plugin entry point for external consumption.\r\n\r\n**Project Setup and Configuration**\r\n\r\n* Added `package.json` and `tsconfig.json` for the new plugin, specifying dependencies (`viem`, `zod`, etc.), build scripts, and TypeScript settings. [[1]](diffhunk://#diff-d3f83e69e38803d41e055612ff11506ba082953cbeadcae56a3bca418d30c54bR1-R26) [[2]](diffhunk://#diff-3af2426805243a2b3ebf4d3f1a7877df9ef4685384a163bd203f9e3ce6c534a1R1-R17)\r\n\r\n**Main Application Integration**\r\n\r\n* Imported EVM tools and service into the main application (`src/index.ts`).\r\n* On startup, if `WALLET_PRIVATE_KEY` is set, initialized the EVM service and registered the EVM tools for agent use.\r\n* Added example agent prompts to demonstrate EVM wallet address retrieval, chain listing, native balance fetching, and ERC20 token balance querying, with results logged to the console.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-11T11:09:57Z",
      "mergedAt": "2025-08-11T16:02:10Z",
      "additions": 446,
      "deletions": 1
    },
    {
      "id": "PR_kwDOMT5cIs6jG9KE",
      "title": "feat: Add character type system with JesseXBT character and improve API consistency",
      "author": "wtfsayo",
      "number": 5756,
      "body": "# Character Type System and Jesse Pollak Character Implementation\n\nThis PR introduces a comprehensive character type system using Zod validation and implements a new Jesse Pollak (jesseXBT) character focused on Base ecosystem support.\n\n## Key Changes\n\n### 🏗️ Character Type System (`lib/core/character.ts`)\n- **Complete Zod Schema Validation**: Robust runtime validation for character definitions\n- **TypeScript Type Safety**: Proper types with discriminated unions for complex data structures  \n- **Circular Reference Support**: Handles directory structures in knowledge base items\n- **Comprehensive Coverage**: Validation for all character properties including:\n  - UUID identifiers and usernames\n  - Bio arrays and message examples\n  - Knowledge base items (strings, directories, or path objects)\n  - Settings and secrets with flexible value types\n  - Style guides for different communication contexts\n  - Template systems for consistent responses\n\n### 👤 Jesse Pollak Character (`characters/jessexbt.json`)\n- **Base Ecosystem Expert**: Specialized character for Base Layer 2 development support\n- **Comprehensive Profile**: 126 lines of detailed character configuration\n- **Response Templates**: Pre-defined templates for Base documentation, ecosystem navigation\n- **Message Examples**: Natural conversation flows for Base-related queries\n- **System Integration**: Character system prompt applied to default agent\n\n### 🔧 API Improvements (`src/server.ts`)\n- **Character Loading**: Automatic character validation and loading on server startup\n- **System Prompt Integration**: Character system prompts properly applied to agents\n- **Tool Call Consistency**: Standardized tool argument handling (`toolCall.input` vs mixed approaches)\n- **Response Structure**: Cleaner finish reason handling using `result.finishReason`\n- **Error Handling**: Improved tool result processing and response formatting\n\n### 📦 Module Organization (`lib/core/index.ts`)\n- **Export Integration**: Character module and types properly exported from core\n- **Type Availability**: All character-related types accessible for external use\n\n## Benefits\n\n✅ **Type Safety**: Prevents runtime errors with comprehensive Zod validation  \n✅ **Extensibility**: Easy to add new characters with consistent schema  \n✅ **Specialization**: Jesse character provides expert Base ecosystem guidance  \n✅ **Developer Experience**: Better API consistency and error handling  \n✅ **Maintainability**: Clear separation of character data and validation logic  \n\n## Technical Details\n\n- **Schema Design**: Uses discriminated unions for knowledge base items to handle different data types safely\n- **Circular References**: Properly handles directory structures with `z.lazy()` for recursive schemas\n- **Validation Strategy**: Runtime validation with detailed error messages for debugging\n- **Character Integration**: Seamless loading and application of character data to AI agents\n\n## Files Changed\n- `lib/core/character.ts` (new file, 116 lines)\n- `characters/jessexbt.json` (new file, 126 lines) \n- `src/server.ts` (23 lines modified)\n- `lib/core/index.ts` (1 line added)\n\n**Total**: 258 additions, 8 deletions across 4 files\n\n## Backward Compatibility\n✅ All existing API endpoints remain functional  \n✅ No breaking changes to existing character loading  \n✅ Tool call improvements maintain compatibility  \n\n---\n\nThis PR establishes the foundation for a robust character system while providing immediate value through the specialized Jesse Pollak character for Base ecosystem support.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-11T18:40:30Z",
      "mergedAt": "2025-08-11T19:25:47Z",
      "additions": 258,
      "deletions": 8
    },
    {
      "id": "PR_kwDOMT5cIs6jDE1Y",
      "title": "feat: add Hono server, refactor ElizaOS agent registry",
      "author": "wtfsayo",
      "number": 5753,
      "body": "This pull request introduces significant improvements to the agent management system and adds a new HTTP server for interacting with agents via an OpenAI-compatible API. The changes refactor how agents are stored and accessed, update related usage throughout the codebase, and add new scripts and dependencies to support server functionality.\r\n\r\n**Agent Management Refactor:**\r\n\r\n- Refactored the `ElizaOS` class to use a `Map` (`agentsById`) for storing agents by ID, replacing the previous array-based approach. Added methods for adding agents with IDs, listing agent IDs, and retrieving agents by ID. This change enforces unique agent IDs and enables more efficient lookups. [[1]](diffhunk://#diff-d0617da286fa90850f3ce90590cfd646f6354f2bf9bd816782501c671abd72f9L6-R6) [[2]](diffhunk://#diff-d0617da286fa90850f3ce90590cfd646f6354f2bf9bd816782501c671abd72f9L15-R28)\r\n- Updated agent registration in `src/index.ts` to use the new `addAgent(agent, id)` method, assigning the default agent an explicit ID.\r\n\r\n**New HTTP Server and API:**\r\n\r\n- Added `src/server.ts`, which sets up a Hono-based HTTP server. The server exposes endpoints to list agents and to handle OpenAI-compatible chat completion requests, routing them to the appropriate agent by ID. It also initializes services and tools conditionally based on environment variables, mirroring the setup in `src/index.ts`.\r\n\r\n**Build and Scripts Updates:**\r\n\r\n- Updated `package.json` scripts to support building, starting, and developing the new server entrypoint (`src/server.ts`).\r\n- Added a new dependency on `hono` for the HTTP server.\r\n\r\n**Path Import Fixes:**\r\n\r\n- Fixed import paths in `src/index.ts` to use alias imports (`@/plugins/...`) instead of relative paths.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-11T13:18:29Z",
      "mergedAt": "2025-08-11T16:09:15Z",
      "additions": 156,
      "deletions": 9
    },
    {
      "id": "PR_kwDOMT5cIs6jAUtK",
      "title": "chore(imports): use @/ alias and barrels; add Cursor rule",
      "author": "wtfsayo",
      "number": 5751,
      "body": "- Converted relative imports to '@/'\n- Prefer barrels (e.g., '@/lib/core', '@/lib/db/schema')\n- Added Cursor rule: .cursor/rules/use-atslash-alias-imports.mdc\n- Verified build with Bun",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-11T09:24:17Z",
      "mergedAt": "2025-08-11T09:57:26Z",
      "additions": 116,
      "deletions": 3
    }
  ],
  "codeChanges": {
    "additions": 1114,
    "deletions": 81,
    "files": 24,
    "commitCount": 16
  },
  "completedItems": [
    {
      "title": "fix: (project-starter) replace mock.module with spyOn for consistent logger testing",
      "prNumber": 5748,
      "type": "bugfix",
      "body": "## Description\r\n\r\nThis PR fixes failing component tests in the project-starter template by replacing `mock.module` with `spyOn` for logger mocking.\r\n\r\n## Problem\r\n\r\nThe project-starter template had 3 test files using `mock.module('@elizaos/",
      "files": [
        "packages/project-starter/src/__tests__/config.test.ts",
        "packages/project-starter/src/__tests__/error-handling.test.ts",
        "packages/project-starter/src/__tests__/events.test.ts"
      ]
    },
    {
      "title": "feat: Add character type system with JesseXBT character and improve API consistency",
      "prNumber": 5756,
      "type": "feature",
      "body": "# Character Type System and Jesse Pollak Character Implementation\n\nThis PR introduces a comprehensive character type system using Zod validation and implements a new Jesse Pollak (jesseXBT) character focused on Base ecosystem support.\n\n## K",
      "files": [
        "characters/jessexbt.json",
        "lib/core/character.ts",
        "lib/core/index.ts",
        "src/server.ts"
      ]
    },
    {
      "title": "feat: Add OpenAI-compliant tool calls visibility to chat completions",
      "prNumber": 5755,
      "type": "feature",
      "body": "## Summary\n\nThis PR adds support for viewing intermediate tool calls and results in the chat completions API while maintaining full OpenAI API compliance.\n\n## Changes\n\n- **OpenAI API Compliance**: Default responses remain fully compliant wi",
      "files": [
        "src/server.ts"
      ]
    },
    {
      "title": "feat: add Hono server, refactor ElizaOS agent registry",
      "prNumber": 5753,
      "type": "feature",
      "body": "This pull request introduces significant improvements to the agent management system and adds a new HTTP server for interacting with agents via an OpenAI-compatible API. The changes refactor how agents are stored and accessed, update relate",
      "files": [
        "bun.lock",
        "lib/core/elizaos.ts",
        "package.json",
        "src/index.ts",
        "src/server.ts"
      ]
    },
    {
      "title": "feat: add EVM plugin and tools",
      "prNumber": 5752,
      "type": "feature",
      "body": "This pull request introduces a new EVM (Ethereum Virtual Machine) plugin, integrating wallet and blockchain tooling into the application. It adds a modular service for managing EVM chains and clients, several tools for interacting with wall",
      "files": [
        ".env.example",
        "plugins/plugin-evm/bun.lock",
        "plugins/plugin-evm/index.ts",
        "plugins/plugin-evm/package.json",
        "plugins/plugin-evm/services/index.ts",
        "plugins/plugin-evm/tools/getEVMChains.ts",
        "plugins/plugin-evm/tools/getTokenBalance.ts",
        "plugins/plugin-evm/tools/getWalletAddress.ts",
        "plugins/plugin-evm/tools/getWalletBalance.ts",
        "plugins/plugin-evm/tsconfig.json",
        "src/index.ts"
      ]
    },
    {
      "title": "chore(imports): use @/ alias and barrels; add Cursor rule",
      "prNumber": 5751,
      "type": "other",
      "body": "- Converted relative imports to '@/'\n- Prefer barrels (e.g., '@/lib/core', '@/lib/db/schema')\n- Added Cursor rule: .cursor/rules/use-atslash-alias-imports.mdc\n- Verified build with Bun",
      "files": [
        ".cursor/rules/use-atslash-alias-imports.mdc",
        "lib/core/elizaos.ts",
        "lib/db/index.ts"
      ]
    },
    {
      "title": "revert: Use relative paths for imports",
      "prNumber": 5750,
      "type": "other",
      "body": "## Description\nThis PR ensures consistent use of relative paths for imports throughout the project.\n\n## Changes\n- ✅ Reverted import in `src/index.ts` to use relative path `../lib/core`\n- ✅ Removed path aliases configuration from `tsconfig.j",
      "files": [
        "src/index.ts",
        "tsconfig.json"
      ]
    }
  ],
  "topContributors": [
    {
      "username": "wtfsayo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82053242?u=98209a1f10456f42d4d2fa71db4d5bf4a672cbc3&v=4",
      "totalScore": 317.35111401391566,
      "prScore": 317.35111401391566,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "ChristopherTrimboli",
      "avatarUrl": "https://avatars.githubusercontent.com/u/27584221?u=0d816ce1dcdea8f925aba18bb710153d4a87a719&v=4",
      "totalScore": 39.7,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 39.5,
      "commentScore": 0.2,
      "summary": null
    },
    {
      "username": "yungalgo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/113615973?u=92e0f29f7e2fbb8ce46ed13c51f692ca803de02d&v=4",
      "totalScore": 30.026820912568606,
      "prScore": 29.826820912568607,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": null
    },
    {
      "username": "rejected-l",
      "avatarUrl": "https://avatars.githubusercontent.com/u/99460023?u=977f49541583c40f4fc5f6a9f11ca6c6a78b362a&v=4",
      "totalScore": 26.67920303898299,
      "prScore": 26.67920303898299,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "borisudovicic",
      "avatarUrl": "https://avatars.githubusercontent.com/u/31806472?u=27713fbe603baae91ef519990facbacd6c23e93d&v=4",
      "totalScore": 16,
      "prScore": 0,
      "issueScore": 16,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "monilpat",
      "avatarUrl": "https://avatars.githubusercontent.com/u/15067321?v=4",
      "totalScore": 14.438,
      "prScore": 0,
      "issueScore": 14,
      "reviewScore": 0,
      "commentScore": 0.43799999999999994,
      "summary": null
    },
    {
      "username": "1BDO",
      "avatarUrl": "https://avatars.githubusercontent.com/u/210645034?v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    }
  ],
  "newPRs": 8,
  "mergedPRs": 7,
  "newIssues": 16,
  "closedIssues": 4,
  "activeContributors": 14
}