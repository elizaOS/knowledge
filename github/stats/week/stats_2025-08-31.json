{
  "interval": {
    "intervalStart": "2025-08-31T00:00:00.000Z",
    "intervalEnd": "2025-09-07T00:00:00.000Z",
    "intervalType": "week"
  },
  "repository": "elizaos/eliza",
  "overview": "From 2025-08-31 to 2025-09-07, elizaos/eliza had 22 new PRs (19 merged), 5 new issues, and 18 active contributors.",
  "topIssues": [
    {
      "id": "I_kwDOMT5cIs7I-3_W",
      "title": "Refactor Eliza CLI",
      "author": "borisudovicic",
      "number": 5860,
      "repository": "elizaos/eliza",
      "body": "### **Summary**\n\nThe current CLI is overly complex and duplicates logic that should live inside project directories. Instead of bootstrapping AgentServer inside the CLI, we should streamline it to handle only configuration and delegate execution to the project’s runtime.\n\n### **Problem**\n\n* **Duplication of logic:** Both the CLI and project code (e.g. project-starter/src/index.ts) contain overlapping runner and module management logic .\n* **Code-first gap:** Without a true code-first Eliza, the CLI has taken on responsibilities (e.g. instantiating AgentServer) that should belong to projects.\n* **Unnecessary coupling:** Bootstrapping agents directly from the CLI makes it harder to reason about project boundaries and introduces complexity in maintaining two runtimes.\n* **Developer UX:** For new users, this creates confusion about where to put logic and increases friction.\n\n### **Proposal**\n\n* **CLI responsibilities:**\n  * Manage environment and char.json configuration (via env and config commands).\n  * Provide a clean interface for project creation (elizaos create) .\n  * Delegate execution to project scripts (bun run build, bun run start) rather than running agents directly.\n* **Project responsibilities:**\n  * Own all logic for AgentServer instantiation (directly in project-starter/src/index.ts).\n  * Expose a clear entry point (start/dev) that the CLI calls into.\n  * Keep all runtime and module complexity contained in project code.",
      "createdAt": "2025-09-01T09:20:11Z",
      "closedAt": null,
      "state": "OPEN",
      "commentCount": 11
    },
    {
      "id": "I_kwDOMT5cIs7I4LpR",
      "title": "path not found",
      "author": "MagdiejamesNYC",
      "number": 5856,
      "repository": "elizaos/eliza",
      "body": "when I try to create a new project I have this error:\n\nCleaning up due to error...\n└  Failed to create Project.\n\n Error      Create command failed: {\n  error: error: Cannot find module '/home/runner/work/eliza/eliza/packages/cli/package.json' from '/Users/james/my-eliza-project/node_modules/@elizaos/cli/dist/index.js',\n}\n Error      An error occurred: {\n  error: error: Cannot find module '/home/runner/work/eliza/eliza/packages/cli/package.json' from '/Users/james/my-eliza-project/node_modules/@elizaos/cli/dist/index.js',\n}\n Error      Unknown error type: {\n  type: \"object\",\n}\n Error      Error value: {\n  error: error: Cannot find module '/home/runner/work/eliza/eliza/packages/cli/package.json' from '/Users/james/my-eliza-project/node_modules/@elizaos/cli/dist/index.js',\n}\n\nthere is not way to do a fresh install. Can you push an update to the package?",
      "createdAt": "2025-08-31T11:35:58Z",
      "closedAt": null,
      "state": "OPEN",
      "commentCount": 1
    },
    {
      "id": "I_kwDOMT5cIs7F0hup",
      "title": "Move to core pure",
      "author": "borisudovicic",
      "number": 5766,
      "repository": "elizaos/eliza",
      "body": "Make sure it works, get up to speed for low level devs, browser support, streaming in core, etc.",
      "createdAt": "2025-08-13T15:20:17Z",
      "closedAt": "2025-09-03T22:40:09Z",
      "state": "CLOSED",
      "commentCount": 0
    },
    {
      "id": "I_kwDOMT5cIs7H3Obz",
      "title": "Implement Dynamic Prompting (Multi-Turn Conversations) in ElizaOS Scenarios",
      "author": "linear",
      "number": 5819,
      "repository": "elizaos/eliza",
      "body": "# Dynamic Prompting Implementation for ElizaOS Scenarios\n\n## Overview\n\nImplement **Dynamic Prompting** (multi-turn conversations) in ElizaOS scenarios to enable sophisticated testing of agent behavior through extended conversations where an LLM simulates realistic user responses.\n\n## Problem Statement\n\nCurrent ElizaOS scenarios are limited to single-turn interactions, making it impossible to test:\n\n* Multi-step problem solving\n* Context retention across conversation turns\n* Clarification and follow-up question handling\n* Natural conversation flow assessment\n* Error recovery and correction flows\n\n## Solution\n\nExtend the existing scenario framework to support multi-turn conversations where:\n\n1. **Agent** receives initial user input\n2. **Agent** responds with thoughts, actions, and replies\n3. **LLM Simulator** generates realistic user follow-up based on agent response\n4. **Agent** continues the conversation based on simulated user input\n5. Process repeats for specified number of turns or until conditions are met\n\n## Key Requirements\n\n### 1\\. Backward Compatibility\n\n* **100% backward compatible** - all existing scenarios must work unchanged\n* Gradual adoption path for teams to enhance existing scenarios\n* No breaking changes to existing APIs or CLI commands\n\n### 2\\. Core Components\n\n#### Schema Extensions\n\n* Extend `RunStepSchema` with optional `conversation` field\n* Add new evaluation types: `conversation_length`, `conversation_flow`, `user_satisfaction`, `context_retention`\n* Support conversation configuration with user simulator settings\n\n#### User Simulator\n\n* LLM-based response generation with persona-driven prompts\n* Configurable personality, objectives, constraints, and knowledge level\n* Realistic conversation progression based on agent responses\n\n#### Conversation Manager\n\n* Multi-turn execution orchestration\n* Termination condition checking (satisfaction, solution provided, escalation needed)\n* Turn-level and final evaluation support\n* Conversation transcript generation\n\n#### New Evaluators\n\n* **Conversation Length**: Validate optimal conversation duration\n* **Conversation Flow**: Detect required conversation patterns\n* **User Satisfaction**: Measure user satisfaction through sentiment analysis\n* **Context Retention**: Verify agent memory across conversation turns\n\n### 3\\. Configuration Examples\n\n#### Basic Multi-Turn Conversation\n\n```yaml\nrun:\n  - input: \"I need help with something\"\n    conversation:\n      max_turns: 4\n      user_simulator:\n        persona: \"polite customer with a billing question\"\n        objective: \"find out why charged twice this month\"\n        temperature: 0.6\n      final_evaluations:\n        - type: \"llm_judge\"\n          prompt: \"Did the agent successfully help resolve the billing issue?\"\n          expected: \"yes\"\n```\n\n#### Advanced Persona-Driven Conversation\n\n```yaml\nrun:\n  - input: \"This is ridiculous! Your product doesn't work!\"\n    conversation:\n      max_turns: 6\n      user_simulator:\n        persona: \"angry customer who had bad experience\"\n        objective: \"vent frustration but eventually want help\"\n        style: \"initially hostile, gradually becomes cooperative if handled well\"\n        constraints:\n          - \"Start with complaints and criticism\"\n          - \"Don't accept first solution immediately\"\n          - \"Become more cooperative if agent shows empathy\"\n      termination_conditions:\n        - type: \"user_expresses_satisfaction\"\n        - type: \"agent_escalates_to_human\"\n```\n\n## Implementation Plan\n\n### Phase 1: Core Infrastructure (Weeks 1-2)\n\n- [ ] Schema extensions and type definitions\n- [ ] User Simulator implementation\n- [ ] Basic conversation flow testing\n\n### Phase 2: Conversation Management (Weeks 3-4)\n\n- [ ] ConversationManager class implementation\n- [ ] Provider integration (LocalEnvironmentProvider, E2BEnvironmentProvider)\n- [ ] Termination condition logic\n\n### Phase 3: Evaluation System (Weeks 5-6)\n\n- [ ] New conversation evaluators implementation\n- [ ] EvaluationEngine integration\n- [ ] End-to-end testing\n\n### Phase 4: Polish and Documentation (Week 7)\n\n- [ ] Example scenarios creation\n- [ ] Documentation updates\n- [ ] Performance optimizations\n\n## Technical Specifications\n\n### File Structure\n\n```\npackages/cli/src/commands/scenario/src/\n├── schema.ts (extend)\n├── conversation-types.ts (new)\n├── UserSimulator.ts (new)\n├── ConversationManager.ts (new)\n├── ConversationEvaluators.ts (new)\n├── LocalEnvironmentProvider.ts (modify)\n├── E2BEnvironmentProvider.ts (modify)\n└── __tests__/\n    ├── UserSimulator.test.ts (new)\n    ├── ConversationManager.test.ts (new)\n    ├── ConversationEvaluators.test.ts (new)\n    └── integration/ (new tests)\n```\n\n### Key Interfaces\n\n```typescript\ninterface ConversationConfig {\n  max_turns: number;\n  user_simulator: UserSimulatorConfig;\n  termination_conditions: TerminationCondition[];\n  turn_evaluations: EvaluationSchema[];\n  final_evaluations: EvaluationSchema[];\n}\n\ninterface UserSimulatorConfig {\n  persona: string;\n  objective: string;\n  style?: string;\n  constraints: string[];\n  knowledge_level: 'beginner' | 'intermediate' | 'expert';\n}\n```\n\n## Success Criteria\n\n### Functional Requirements\n\n- [ ] Single-turn scenarios continue to work unchanged\n- [ ] Multi-turn conversations execute successfully\n- [ ] User simulator generates realistic, persona-consistent responses\n- [ ] Termination conditions work correctly\n- [ ] All new evaluation types function properly\n- [ ] Matrix testing supports conversation parameters\n\n### Performance Requirements\n\n- [ ] Conversation scenarios complete within reasonable time limits\n- [ ] Memory usage remains within acceptable bounds\n- [ ] LLM API usage is optimized and rate-limited appropriately\n\n### Quality Requirements\n\n- [ ] Comprehensive test coverage (unit, integration, e2e)\n- [ ] Clear error handling and debugging capabilities\n- [ ] Well-documented examples and migration guide\n\n## Risk Mitigation\n\n### Technical Risks\n\n* **LLM API failures**: Implement retry logic and graceful degradation\n* **Infinite loops**: Hard max_turns limit and timeout mechanisms\n* **Memory leaks**: Turn-based cleanup and conversation archiving\n\n### Integration Risks\n\n* **Breaking existing scenarios**: Comprehensive backward compatibility testing\n* **Performance impact**: Resource monitoring and optimization\n\n## Dependencies\n\n* Existing `askAgentViaApi` infrastructure\n* Current evaluation engine and trajectory reconstruction\n* LLM provider integration for user simulation\n* Database schema (no changes required)\n\n## Acceptance Criteria\n\n1. **Backward Compatibility**: All existing scenarios pass without modification\n2. **New Functionality**: Multi-turn conversation scenarios execute successfully\n3. **Evaluation Quality**: New evaluators provide meaningful insights\n4. **Performance**: No significant impact on existing scenario execution time\n5. **Documentation**: Clear examples and migration path provided",
      "createdAt": "2025-08-25T20:36:17Z",
      "closedAt": "2025-09-03T22:39:53Z",
      "state": "CLOSED",
      "commentCount": 0
    },
    {
      "id": "I_kwDOMT5cIs7I6pcU",
      "title": "Web UI dashboard exists but is completely undocumented (users don't know how to interact with their agent)",
      "author": "thedotmack",
      "number": 5857,
      "repository": "elizaos/eliza",
      "body": "**Describe the bug**\n\nThe ElizaOS documentation (including the Quickstart guide) completely fails to mention that there's a web interface/dashboard available after starting an agent. The startup logs show \"Go to the dashboard at http://localhost:3001\" but this crucial information is NEVER mentioned in the documentation, leaving users confused about how to interact with their agent.\n\n**To Reproduce**\n\n1. Go to the ElizaOS documentation/quickstart\n2. Follow all installation steps:\n   - Install dependencies (`bun install`)\n   - Configure environment variables\n   - Set up character configuration\n   - Run `bun start` or `npm start`\n3. See output: `[INFO] Client http listening on port 3001`\n4. Try to figure out how to talk to your agent\n5. Search entire documentation for \"web UI\", \"browser\", \"localhost:3000\", \"how to chat\"\n6. Find nothing about the web interface\n7. Assume you need to configure Telegram/Discord just to test the agent\n\n**Expected behavior**\n\nAfter starting the agent, the documentation should clearly state:\n- \"Open your browser to `http://localhost:3000` to access the web chat interface\"\n- This should be prominently displayed in the quickstart guide\n- Should appear immediately after the \"start your agent\" step\n\n**Screenshots**\n\nCurrent quickstart ends with starting the agent - no mention of the dashboard:\n```\n# Start your agent\nbun start\n```\n*[Documentation just... stops here - no mention of the dashboard URL]*\n\nMeanwhile, the ACTUAL console output shows this ONE critical line buried in 100+ lines of logs:\n```\n[2025-09-01 00:11:19] INFO: Loaded character: Eliza\nBYPASS: Using postgres URL from environment variable\n[2025-09-01 00:11:19] INFO: Using local @elizaos/server installation\n[... 50+ MORE LINES OF LOGS ...]\n[2025-09-01 00:11:20] INFO: [STATIC] Serving static files from: ./node_modules/@elizaos/server/dist/client\n[2025-09-01 00:11:20] INFO: [SocketIO] Router initialized with 0 agents\n[2025-09-01 00:11:20] INFO: [SocketIO] Setting up Socket.IO event listeners\nStartup successful!\nGo to the dashboard at http://localhost:3001  <--- THIS ONE LINE IS THE ONLY WAY TO KNOW\nAgentServer is listening on port 3001\n[2025-09-01 00:11:21] INFO: Final plugins being loaded:\n[2025-09-01 00:11:21] INFO: Running plugin migrations...\n[... 20+ MORE LINES OF LOGS CONTINUE AFTER ...]\n```\n\nThe critical \"Go to the dashboard\" message is:\n- Buried in the middle of 108 lines of startup logs\n- Surrounded by technical INFO messages about plugins, migrations, and socket handlers\n- Easy to miss as it scrolls by with all the other output\n- The ONLY indication that a web UI even exists\n\nThe logs literally tell you \"Go to the dashboard\" but:\n- That there IS a dashboard\n- That there IS a web UI\n- That you should look for this URL in the logs\n- That this is how you interact with your agent\n\n**Additional context**\n\n- The dashboard URL appears on line 65 of 108 lines of startup output - completely buried in technical logs\n- Most users will never notice this ONE line among all the INFO messages about plugins, migrations, and socket handlers\n- The startup logs DO show \"Go to the dashboard\" but it's buried in a wall of text that scrolls by quickly\n- The docs don't even mention that a dashboard/web UI EXISTS, let alone tell users to look for it in the logs\n- Users are forced to configure unnecessary integrations (Telegram/Discord/Twitter) just to test their agent because they don't know about the web UI\n- Even the llms.txt file mentions WebSocket connections and API endpoints but not the dashboard\n- This is a critical onboarding issue - new users literally cannot figure out how to interact with the thing they just installed\n- The fix is trivial: add to the quickstart \"After starting, your agent will display 'Go to the dashboard at http://localhost:xxxx' - open this URL in your browser to chat with your agent\"",
      "createdAt": "2025-09-01T00:16:45Z",
      "closedAt": null,
      "state": "OPEN",
      "commentCount": 0
    }
  ],
  "topPRs": [
    {
      "id": "PR_kwDOMT5cIs6meEtU",
      "title": "refactor: centralize business logic in server package",
      "author": "standujar",
      "number": 5864,
      "body": "# Relates to\r\n\r\n  #5860 Refactor Eliza CLI\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \r\n   # Risks                                                                                                                                                                                                                                                                               \r\n                                                                                                                                                                                                                                                                                         \r\n   **Low to Medium**                                                                                                                                                                                                                                                                     \r\n   - **Low**: All existing functionality maintained with backward compatibility                                                                                                                                                                                                          \r\n   - **Medium**: Large architectural change affecting core components, thoroughly tested                                                                                                                                                                                                 \r\n                                                                                                                                                                                                                                                                                         \r\n   # Background                                                                                                                                                                                                                                                                          \r\n                                                                                                                                                                                                                                                                                         \r\n   ## What does this PR do?                                                                                                                                                                                                                                                              \r\n                                                                                                                                                                                                                                                                                         \r\n   This PR refactors the ElizaOS architecture by moving all business logic from the CLI package to the server package. The CLI becomes a thin orchestration layer that delegates to the server package, eliminating code duplication and creating a cleaner separation of concerns.      \r\n                                                                                                                                                                                                                                                                                         \r\n   **Key changes:**                                                                                                                                                                                                                                                                      \r\n   - Moved 870+ lines of business logic from CLI to server package                                                                                                                                                                                                                       \r\n   - Created new `ElizaOS` orchestration class and managers (Agent, Plugin, Config) in server package                                                                                                                                                                                    \r\n   - Simplified CLI to ~170 lines of pure delegation code                                                                                                                                                                                                                                \r\n   - Removed 1,612 lines of redundant code while adding 1,211 lines of well-organized managers                                                                                                                                                                                           \r\n   - Maintained 100% backward compatibility for all existing use cases                                                                                                                                                                                                                   \r\n                                                                                                                                                                                                                                                                                         \r\n   **Files deleted from CLI:**                                                                                                                                                                                                                                                           \r\n   - `commands/start/actions/agent-start.ts` (134 lines)                                                                                                                                                                                                                                 \r\n   - `commands/start/actions/server-start.ts` (118 lines)                                                                                                                                                                                                                                \r\n   - `commands/start/utils/config-utils.ts` (73 lines)                                                                                                                                                                                                                                   \r\n   - `commands/start/utils/dependency-resolver.ts` (56 lines)                                                                                                                                                                                                                            \r\n   - `commands/start/utils/loader.ts` (120 lines)                                                                                                                                                                                                                                        \r\n   - `commands/start/utils/plugin-utils.ts` (99 lines)                                                                                                                                                                                                                                   \r\n                                                                                                                                                                                                                                                                                         \r\n   **New files in server:**                                                                                                                                                                                                                                                              \r\n   - `orchestration/ElizaOS.ts` - Main orchestration (166 lines)                                                                                                                                                                                                                         \r\n   - `managers/AgentManager.ts` - Agent lifecycle (171 lines)                                                                                                                                                                                                                            \r\n   - `managers/PluginLoader.ts` - Plugin management (140 lines)                                                                                                                                                                                                                          \r\n   - `managers/ConfigManager.ts` - Config handling (123 lines)                                                                                                                                                                                                                           \r\n   - `characters/default.ts` - Default Eliza character (271 lines)                                                                                                                                                                                                                       \r\n                                                                                                                                                                                                                                                                                         \r\n   ## What kind of change is this?                                                                                                                                                                                                                                                       \r\n                                                                                                                                                                                                                                                                                         \r\n   **Improvements** (misc. changes to existing features) - Major architectural refactoring without breaking changes                                                                                                                                                                      \r\n                                                                                                                                                                                                                                                                                         \r\n   # Documentation changes needed?                                                                                                                                                                                                                                                       \r\n                                                                                                                                                                                                                                                                                         \r\n   My changes do not require a change to the project documentation.                                                                                                                                                                                                                      \r\n   - The public API remains the same                                                                                                                                                                                                                                                     \r\n   - All commands work identically                                                                                                                                                                                                                                                       \r\n   - Internal architecture changes only                                                                                                                                                                                                                                                  \r\n                                                                                                                                                                                                                                                                                         \r\n   # Testing                                                                                                                                                                                                                                                                             \r\n                                                                                                                                                                                                                                                                                         \r\n   ## Where should a reviewer start?                                                                                                                                                                                                                                                     \r\n                                                                                                                                                                                                                                                                                         \r\n   1. Review the new architecture in `packages/server/src/`:                                                                                                                                                                                                                             \r\n      - `orchestration/ElizaOS.ts` - Main orchestration class                                                                                                                                                                                                                            \r\n      - `managers/AgentManager.ts` - Agent lifecycle management                                                                                                                                                                                                                          \r\n      - `managers/PluginLoader.ts` - Plugin loading and dependency resolution                                                                                                                                                                                                            \r\n      - `managers/ConfigManager.ts` - Configuration management                                                                                                                                                                                                                           \r\n                                                                                                                                                                                                                                                                                         \r\n   2. Check the simplified CLI in `packages/cli/src/commands/start/index.ts`                                                                                                                                                                                                             \r\n                                                                                                                                                                                                                                                                                         \r\n   ## Detailed testing steps                                                                                                                                                                                                                                                             \r\n                                                                                                                                                                                                                                                                                         \r\n   ```bash                                                                                                                                                                                                                                                                               \r\n   # Test 1: CLI with character files (standalone mode)                                                                                                                                                                                                                                  \r\n   cd eliza                                                                                                                                                                                                                                                                              \r\n   bun run build                                                                                                                                                                                                                                                                         \r\n   bunx elizaos start --character characters/cartman.json                                                                                                                                                                                                                                \r\n   # Verify: Agent starts successfully                                                                                                                                                                                                                                                   \r\n                                                                                                                                                                                                                                                                                         \r\n   # Test 2: CLI within a project                                                                                                                                                                                                                                                        \r\n   bunx elizaos create test-project --yes                                                                                                                                                                                                                                                \r\n   cd test-project                                                                                                                                                                                                                                                                       \r\n   bunx elizaos start                                                                                                                                                                                                                                                                    \r\n   # Verify: Project agents load and start                                                                                                                                                                                                                                               \r\n                                                                                                                                                                                                                                                                                         \r\n   # Test 3: Test command still works                                                                                                                                                                                                                                                    \r\n   bunx elizaos test                                                                                                                                                                                                                                                                     \r\n   # Verify: Tests run successfully                                                                                                                                                                                                                                                      \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \r\n   # Test 5: Build and test                                                                                                                                                                                                                                                              \r\n   bun run build                                                                                                                                                                                                                                                                         \r\n   bun test                                                                                                                                                                                                                                                                              \r\n   # Verify: All tests passing test still passing                                                                                                                                                                                                                                                        \r\n   ```                                                                                                                                                                                                                                                                                   \r\n                                                                                                                                                                                                                                                                                         \r\n   **Results:**                                                                                                                                                                                                                                                                          \r\n   - ✅ Created and tested a new project outside monorepo                                                                                                                                                                                                                                 \r\n   - ✅ Verified CLI works with --character flag                                                                                                                                                                                                                                          \r\n   - ✅ Confirmed projects created with `elizaos create` work correctly                                                                                                                                                                                                                   \r\n   - ✅ All test and scenario commands functioning                                                                                                                                                                                                                                        \r\n   - ✅ Added comprehensive unit tests for new managers\"\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n\n## Summary by CodeRabbit\n\n- New Features\n  - Introduced unified server orchestration via ElizaOS, enabling simpler startup and agent management.\n  - Added a server-provided default character with environment-aware plugin loading.\n  - Ensured Ollama is always available as a fallback plugin.\n  - Added dotenv support for loading .env at startup.\n- Refactor\n  - CLI start flow now delegates to the server for bootstrap, agent lifecycle, and character loading.\n  - Plugin parsing updated to functional APIs; centralized plugin loading and dependency resolution.\n- Chores\n  - Updated CLI dependencies, including adding the OpenAI plugin.\n- Tests\n  - Significant test suite updates aligning with the new orchestration and loaders.\n\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos/eliza",
      "createdAt": "2025-09-02T14:28:47Z",
      "mergedAt": null,
      "additions": 2199,
      "deletions": 1811
    },
    {
      "id": "PR_kwDOMT5cIs6mf7xp",
      "title": "feat: Show action called and result in chat UI",
      "author": "tcm390",
      "number": 5865,
      "body": "related: https://github.com/elizaOS/eliza/issues/5831\r\n\r\nresult:\r\n\r\n\r\nhttps://github.com/user-attachments/assets/632831d2-819d-4ba6-96e1-57206c08b6fc\r\n\r\n\r\n\r\n# Real-time Action Execution UI with Enhanced Tool Visualization\r\n\r\n## 🎯 Overview\r\n\r\nThis PR introduces a comprehensive **Real-time Action Execution UI System** that provides transparency and visibility into agent action execution. Users can now see actions as they happen, with detailed input/output data, status tracking, and error handling - all updated in real-time.\r\n\r\n## ✨ Features\r\n\r\n### 🔧 Interactive Tool Component\r\n- **Collapsible Tool Cards**: Each action is displayed as an expandable card showing execution details\r\n- **Real-time Status Updates**: Visual indicators for Processing → Ready → Completed → Error states\r\n- **Input/Output Display**: Formatted view of action parameters and results\r\n- **Error Handling**: Clear error messages and stack traces when actions fail\r\n\r\n### 📡 Live Action Tracking\r\n- **WebSocket Integration**: Real-time updates as actions progress through their lifecycle\r\n- **Event-Driven Architecture**: Comprehensive event system for action start/completion\r\n- **Status Broadcasting**: All connected clients receive live action status updates\r\n\r\n### 💾 Enhanced Data Persistence\r\n- **Action Message Storage**: Dedicated storage for action execution data\r\n- **Message Updates**: Ability to update existing messages with new action results\r\n- **Lifecycle Tracking**: Complete audit trail of action execution from start to finish\r\n\r\n## 🏗️ Technical Implementation\r\n\r\n### Frontend Changes\r\n\r\n#### New Components\r\n- **`actionTool.tsx`**: Core tool visualization component with:\r\n  - Collapsible interface with state-based styling\r\n  - Input/output data formatting and display\r\n  - Error handling and status indicators\r\n  - Accessibility features and keyboard navigation\r\n\r\n#### Enhanced Chat Interface\r\n- **Action Message Detection**: Automatically identifies action messages and renders them with tool UI\r\n- **Data Transformation**: Converts action messages to tool format with proper state mapping\r\n- **Seamless Integration**: Tool cards integrate naturally into the chat flow\r\n\r\n### Backend Changes\r\n\r\n#### Runtime Enhancements\r\n- **Action Lifecycle Events**: Enhanced `ACTION_STARTED` and `ACTION_COMPLETED` events with detailed payloads\r\n- **Callback System**: Added storage callback mechanism to capture action responses\r\n- **Event Emission**: Comprehensive event emission at action start and completion\r\n\r\n#### Database Layer\r\n- **New Methods**: \r\n  - `getMessageById()`: Retrieve specific messages by ID\r\n  - `updateMessage()`: Update existing messages with new data\r\n- **Message ID Handling**: Support for pre-defined message IDs in action tracking\r\n\r\n#### API Endpoints\r\n- **`POST /api/messaging/action`**: Create new action messages\r\n- **`PATCH /api/messaging/action/:id`**: Update existing action messages\r\n- **Enhanced Validation**: Comprehensive input validation and error handling\r\n\r\n#### Message Bus Service\r\n- **`notifyActionStart()`**: Broadcasts action initiation to clients\r\n- **`notifyActionUpdate()`**: Broadcasts action completion/updates to clients\r\n- **Real-time Sync**: Ensures all clients stay synchronized with action states\r\n\r\n## 🔄 User Flow\r\n\r\n```mermaid\r\nsequenceDiagram\r\n    participant U as User\r\n    participant C as Client UI\r\n    participant S as Server\r\n    participant R as Runtime\r\n    participant A as Agent Action\r\n    \r\n    U->>C: Sends message\r\n    C->>S: HTTP request\r\n    S->>R: Process message\r\n    R->>A: Execute action\r\n    R->>S: ACTION_STARTED event\r\n    S->>C: WebSocket: action started\r\n    C->>C: Show \"Processing\" tool card\r\n    A->>R: Action completes\r\n    R->>S: ACTION_COMPLETED event\r\n    S->>C: WebSocket: action completed\r\n    C->>C: Update tool card to \"Completed\"\r\n    C->>U: Show final results\r\n```\r\n\r\n## 📋 Code Changes Summary\r\n\r\n### Files Modified\r\n- `packages/client/src/components/chat.tsx` - Enhanced chat interface with action detection\r\n- `packages/client/src/hooks/use-socket-chat.ts` - Added rawMessage handling\r\n- `packages/client/src/lib/api-type-mappers.ts` - Enhanced message mapping with action data\r\n- `packages/core/src/runtime.ts` - Enhanced action lifecycle with event emission\r\n- `packages/core/src/types/events.ts` - Updated action event payload structure\r\n- `packages/plugin-bootstrap/src/index.ts` - Enhanced event handlers for action tracking\r\n- `packages/plugin-sql/src/base.ts` - Added message CRUD operations\r\n- `packages/server/src/index.ts` - Added message update method\r\n- `packages/server/src/api/messaging/core.ts` - New action endpoints\r\n- `packages/server/src/services/message.ts` - Enhanced message bus with action notifications\r\n\r\n### Files Added\r\n- `packages/client/src/components/actionTool.tsx` - New tool visualization component\r\n\r\n## 🧪 Testing\r\n\r\n### Manual Testing Scenarios\r\n1. **Action Execution**: Send a message that triggers an action and verify:\r\n   - Tool card appears with \"Processing\" state\r\n   - Updates to \"Completed\" when action finishes\r\n   - Shows correct input/output data\r\n   \r\n2. **Error Handling**: Trigger an action that fails and verify:\r\n   - Tool card shows \"Error\" state\r\n   - Error message is displayed clearly\r\n   - No UI crashes or broken states\r\n\r\n3. **Multiple Actions**: Test scenarios with multiple actions and verify:\r\n   - Each action gets its own tool card\r\n   - States update independently\r\n   - No race conditions or state conflicts\r\n\r\n### Integration Testing\r\n- WebSocket connection stability during action execution\r\n- Database consistency for action message storage\r\n- Event system reliability under load\r\n\r\n## 🔍 Screenshots\r\n\r\n### Action Processing State\r\n```\r\n┌─────────────────────────────────────┐\r\n│ 🔄 SEND_MESSAGE        Processing   │\r\n│ ▼ Show Details                      │\r\n└─────────────────────────────────────┘\r\n```\r\n\r\n### Action Completed State\r\n```\r\n┌─────────────────────────────────────┐\r\n│ ✅ SEND_MESSAGE        Completed    │\r\n│ ▼ Input:                           │\r\n│   action: \"SEND_MESSAGE\"           │\r\n│   text: \"Hello world\"              │\r\n│                                    │\r\n│ ▼ Output:                          │\r\n│   result: \"Message sent successfully\" │\r\n│   messageId: \"msg_123\"             │\r\n└─────────────────────────────────────┘\r\n```\r\n\r\n## 🚨 Breaking Changes\r\n\r\n**None** - This is a purely additive feature that enhances existing functionality without breaking current behavior.\r\n\r\n## 🎯 Benefits\r\n\r\n### For Users\r\n- **Transparency**: Clear visibility into what the agent is doing\r\n- **Feedback**: Immediate indication of action progress and completion\r\n- **Debugging**: Easy access to action inputs, outputs, and errors\r\n\r\n### For Developers\r\n- **Debugging**: Comprehensive action execution logging and visualization\r\n- **Monitoring**: Real-time insight into agent behavior and performance\r\n- **Development**: Enhanced development experience with detailed action tracking\r\n\r\n### For the Platform\r\n- **User Experience**: Significantly improved UX with real-time feedback\r\n- **Reliability**: Better error handling and user communication\r\n- **Extensibility**: Foundation for future action-related features\r\n\r\n## 🔮 Future Enhancements\r\n\r\nThis foundation enables future features like:\r\n- Action execution analytics and metrics\r\n- Custom action UI components for specific tools\r\n- Action replay and debugging tools\r\n- Performance monitoring and optimization insights\r\n\r\n## ✅ Checklist\r\n\r\n- [x] Frontend tool visualization component implemented\r\n- [x] Backend action lifecycle tracking added\r\n- [x] Database layer enhanced with message CRUD operations\r\n- [x] API endpoints for action management created\r\n- [x] WebSocket integration for real-time updates\r\n- [x] Event system enhanced for action tracking\r\n- [x] Error handling implemented throughout the stack\r\n- [x] Manual testing completed\r\n- [x] Code follows ElizaOS architectural patterns\r\n- [x] No breaking changes introduced\r\n\r\n## 🚀 Ready for Review\r\n\r\nThis PR is ready for review and testing. The implementation follows ElizaOS architectural principles, maintains backward compatibility, and provides a solid foundation for enhanced agent interaction visibility.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-09-02T17:02:38Z",
      "mergedAt": "2025-09-02T21:07:19Z",
      "additions": 796,
      "deletions": 68
    },
    {
      "id": "PR_kwDOMT5cIs6mJqE9",
      "title": "fix(cli): make plugin import verification non-fatal; address ubuntu/macos failures (2/n)",
      "author": "wtfsayo",
      "number": 5855,
      "body": "Context\\n- Ubuntu/macOS CLI tests were failing during plugin installation verification (e.g., @elizaos/plugin-bedrock, @elizaos/plugin-elevenlabs) due to dynamic import checks in ephemeral environments.\\n\\nChanges\\n- Do NOT bypass verification globally. Instead, treat verification failures as non-fatal: warn and proceed so tests can continue.\\n- Keep GitHub-based installs unverified (unchanged) because source repos may not be importable immediately in ephemeral contexts.\\n- No changes to user-facing commands; only affects internal install verification behavior.\\n\\nWhy\\n- This preserves correctness: we still attempt to verify and log failures.\\n- Prevents CI flakes where optional verification blocks entire suite.\\n\\nFollow-ups\\n- Windows agent CRUD path quoting will be fixed in a separate PR.\\n- If residual failures remain, we can further narrow verification for specific command contexts only during tests.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-08-31T09:11:30Z",
      "mergedAt": null,
      "additions": 443,
      "deletions": 42
    },
    {
      "id": "PR_kwDOMT5cIs6mg2y3",
      "title": "feat: Add Sentry Node telemetry support",
      "author": "jonathanprozzi",
      "number": 5867,
      "body": "# Overview\r\n\r\nThis adds a Sentry Node implementation to support using Sentry with AI SDK's `experimental_telemetry` option. This also adds a guard when Sentry is being imported in the `client` package. A future PR can include a full client/browser split as well as the Node. We've used this modification in our agent to receive traces from both the `plugin-openai` and the `plugin-anthropic` in Sentry.\r\n\r\n# Risks\r\n\r\nLow. This improves the existing broken Sentry implementation with a full Node.js integration to support `experimentalTelemetry` options in the AI SDK. Changes are contained to the core package's Sentry module, and adds in instrumental that was previously limited to a Sentry browser package used within the server's node context.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR replaces the Sentry implementation with a production-ready Node.js integration featuring AI telemetry support. This has been tested and used on our fork to provide Sentry traces from AI SDK interactions (with the OpenAI and Anthropic plugins).\r\n\r\n**Key improvements:**\r\n  - Fixes incomplete implementation: Replaces `@sentry/browser` with\r\n  `@sentry/node` SDK to support telemetry and full tracing\r\n  - Adds AI telemetry: Integrates Vercel AI SDK telemetry for monitoring LLM\r\n  interactions\r\n  - Enables plugin ecosystem: Provides telemetry infrastructure needed by\r\n  `plugin-openai` and `plugin-anthropic`\r\n  - Smart configuration: Configurable trace filtering (AI-only vs all traces)\r\n  - Production ready: Comprehensive error handling, logging, and documentation\r\n\r\n  **Technical features:**\r\n  - Automatic AI SDK call tracing (generateText, streamText, etc.)\r\n  - Input/output recording for debugging AI interactions\r\n  - Performance monitoring for AI calls (duration, success rates)\r\n  - Environment-aware conditional loading (prevents browser bundling issues)\r\n  - Comprehensive environment variable configuration\r\n\r\n## What kind of change is this?\r\n\r\nFeatures (non-breaking change which adds functionality)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes require a change to the project documentation.\r\n  ✅ I have updated the documentation accordingly.\r\n\r\n**Documentation updates made:**\r\n  - `README.md`: Added comprehensive \"Sentry Monitoring & AI Telemetry\" section\r\n  with usage examples\r\n  - .env.example: Added all Sentry environment variables with descriptions\r\n  - Code comments: Extensive inline documentation explaining implementation\r\n  decisions\r\n\r\n# Testing\r\n\r\n- Tested by building locally and creating a new Eliza test project: https://github.com/jonathanprozzi/eliza-sentry-example that is ready for testing once the configuration (`SENTRY_DSN` specifically) is provided and is set up to use a local path for the `core` package for testing.\r\n- Tested all configuration options and ensured that traces came through in Sentry\r\n- Ran in both this project and in a branch of our fully functioning agent and received Sentry traces for AI SDK interactions\r\n- Builds locally when using `bun run build`\r\n\r\n## Where should a reviewer start?\r\n\r\n  1. Review the main implementation: `packages/core/src/sentry/instrument.ts` -\r\n  Core Sentry integration with AI telemetry\r\n  2. Check dependency change: `packages/core/package.json` - Verify `@sentry/node`\r\n  replaces browser SDK\r\n  3. Verify exports: `packages/core/src/index.ts` - Sentry utilities properly\r\n  exported\r\n  4. Review documentation: `README.md` and `.env.example` - Contains usage configuration\r\n  documentation\r\n\r\n## Detailed testing steps\r\n\r\n**Build verification:**\r\n- Run `bun run build` from project root - should complete without errors\r\n- Verify client package builds without Node.js dependency issues\r\n- Check TypeScript compilation succeeds\r\n\r\n**Runtime verification:**\r\n- Set `SENTRY_DSN=test_dsn` and run `elizaos start`\r\n- Verify initialization logs appear:\r\n```\r\n  [SENTRY] Initializing with DSN: test_dsn...\r\n  [SENTRY] Trace filtering: AI-only traces + all errors\r\n  [SENTRY] Node.js initialized successfully\r\n```\r\n\r\n  **AI telemetry testing:**\r\n  - Set `SENTRY_DSN=real_dsn` with actual Sentry project\r\n  - Set `OPENAI_EXPERIMENTAL_TELEMETRY=true` (if using OpenAI)\r\n  - Start agent and have conversation\r\n  - Check Sentry Performance/traces tab for `ai.generateText traces`\r\n\r\n  **Configuration testing:**\r\n  - Test `SENTRY_TRACE_FILTER=false` for all traces vs default AI-only\r\n  - Verify `SENTRY_LOGGING=false` disables Sentry entirely\r\n  - Confirm environment variables work as documented\r\n\r\n  **Error capture verification:**\r\n  - Existing error capture via `logger.ts` should continue working\r\n  - Verify exceptions appear in Sentry Issues tab\r\n\r\n## Discord username\r\n\r\n`jpbuilds`\r\n",
      "repository": "elizaos/eliza",
      "createdAt": "2025-09-02T18:39:59Z",
      "mergedAt": null,
      "additions": 386,
      "deletions": 25
    },
    {
      "id": "PR_kwDOMT5cIs6mOLva",
      "title": "fix: add docker files to project-starter",
      "author": "yungalgo",
      "number": 5858,
      "body": "this is a pr to add dockerization to project-starter. so now users can do local project development , create a docker image, and then deploy it to the cloud provider of their choice. \r\n\r\nfor example with phala, users can do it all from the cli:\r\n\r\nelizaos create --type project asdasd\r\nbuild docker image: phala docker build --image my-agents-production --tag v1.0.0\r\npush image to docker hub: phala docker push\r\nadd value for DOCKER_IMAGE to env: DOCKER_IMAGE=yourdockerhubusername/my-agents-production:v1.0.0\r\nthen deploy to cloud: phala cvms create --name my-agents-production --compose ./docker-compose.yaml --env-file ./.env\r\n\r\nthis should work also for any other cloud platform seamlessly.\r\n\r\nused DOCKERFILE and DOCKERIGNORE as provided by @wtfsayo and added own docker-compose to match the one in project-tee-starter.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-09-01T06:59:26Z",
      "mergedAt": "2025-09-02T08:29:37Z",
      "additions": 356,
      "deletions": 14
    }
  ],
  "codeChanges": {
    "additions": 2994,
    "deletions": 2870,
    "files": 70,
    "commitCount": 177
  },
  "completedItems": [
    {
      "title": "fix: logger debug level & style",
      "prNumber": 5849,
      "type": "bugfix",
      "body": "# Relates to\r\n\r\n<!-- Fixed logger debug level not working and improved terminal readability -->\r\n\r\n# Risks\r\n\r\nLow. This change only affects logging output presentation and fixes a bug with debug level logging. No functional changes to core ",
      "files": [
        "packages/core/src/logger.ts",
        "packages/core/src/runtime.ts",
        "packages/cli/tests/commands/agent.test.ts",
        "packages/cli/tests/commands/plugins.test.ts",
        "packages/core/src/__tests__/runtime.test.ts"
      ]
    },
    {
      "title": "fix(core): fix TypeScript declarations in npm package",
      "prNumber": 5848,
      "type": "bugfix",
      "body": "# Relates to\r\n\r\n  TypeScript declarations build optimization.\r\n\r\n  # Risks\r\n\r\n  **Low risk** - Configuration changes only, no functional code changes.\r\n\r\n  # Background\r\n\r\n  ## What does this PR do?\r\n\r\n  Optimizes the TypeScript build confi",
      "files": [
        "bun.lock",
        "packages/core/build.ts",
        "packages/core/package.json",
        "packages/core/tsconfig.browser.json",
        "packages/core/tsconfig.declarations.json",
        "packages/core/tsconfig.json"
      ]
    },
    {
      "title": "fix: CLI NPM Deployment Path Resolution Issue",
      "prNumber": 5852,
      "type": "bugfix",
      "body": "## 🐛 Fix: NPM Deployment Path Resolution Issue\r\n\r\n### Problem\r\nWhen the CLI is published to NPM and installed globally (e.g., `bun i -g @elizaos/cli`), it fails with the error:\r\n```\r\nCannot find module '/home/runner/work/eliza/eliza/packag",
      "files": [
        "bun.lock",
        "packages/cli/build.ts",
        "packages/cli/package.json",
        "packages/cli/src/utils/copy-template.ts",
        "packages/cli/src/utils/display-banner.ts",
        "packages/cli/src/utils/user-environment.ts",
        "packages/core/build.ts",
        "packages/core/package.json"
      ]
    },
    {
      "title": "fix: resolve build warnings and CSS syntax errors",
      "prNumber": 5851,
      "type": "bugfix",
      "body": "## Problem\r\nBuild was generating warnings:\r\n- CSS syntax errors from empty `:is()` selectors in webkit scrollbar styles\r\n- Missing asset reference in CLI build  \r\n- Bundle size warnings\r\n\r\n## Solution\r\n- Remove dead reference to non-existen",
      "files": [
        "packages/cli/build.ts",
        "packages/client/src/components/secret-panel.tsx",
        "packages/client/src/index.css",
        "packages/client/vite.config.ts",
        "bun.lock",
        "packages/client/cypress.config.cjs",
        "packages/client/cypress/e2e/03-spa-routing.cy.ts",
        "packages/client/cypress/support/component.ts",
        "packages/client/cypress/support/e2e.ts",
        "packages/client/package.json",
        "packages/client/scripts/test-e2e-with-server.sh",
        "packages/client/vite.config.cypress.ts"
      ]
    },
    {
      "title": "fix(discord): Enable image generation in Discord channels",
      "prNumber": 5861,
      "type": "bugfix",
      "body": "related: https://github.com/elizaOS/eliza/issues/5809\r\n\r\nresult:\r\n\r\n\r\n<img width=\"917\" height=\"668\" alt=\"Screenshot 2025-09-02 at 12 15 04 AM\" src=\"https://github.com/user-attachments/assets/c90d8494-eeec-4353-b633-91e4fc824c5d\" />\r\n\r\n\r\n# F",
      "files": [
        "packages/plugin-bootstrap/src/actions/imageGeneration.ts",
        "packages/plugin-bootstrap/src/index.ts"
      ]
    },
    {
      "title": "fix: minor docker improvements project-tee-starter",
      "prNumber": 5859,
      "type": "bugfix",
      "body": "these are just some minor improvements to the docker-related stuff in project-tee-starter to match what's in project-starter. specifically:\r\n\r\n1. add DOCKER_IMAGE to .env.example -- it should be there as its req for docker deployments\r\n2. h",
      "files": [
        "packages/project-tee-starter/.env.example",
        "packages/project-tee-starter/docker-compose.yaml"
      ]
    },
    {
      "title": "fix: add docker files to project-starter",
      "prNumber": 5858,
      "type": "bugfix",
      "body": "this is a pr to add dockerization to project-starter. so now users can do local project development , create a docker image, and then deploy it to the cloud provider of their choice. \r\n\r\nfor example with phala, users can do it all from the ",
      "files": [
        "packages/project-starter/.dockerignore",
        "packages/project-starter/.env.example",
        "packages/project-starter/Dockerfile",
        "packages/project-starter/docker-compose.yaml",
        "packages/project-tee-starter/.env.example",
        "packages/project-tee-starter/docker-compose.yaml"
      ]
    },
    {
      "title": "feat: Embeds CLI version into build output",
      "prNumber": 5869,
      "type": "feature",
      "body": "## 🐛 Fix: NPM CLI Package Runtime Path Resolution Issue\n\n### Problem\nThe published NPM package `@elizaos/cli@1.4.3-alpha.0` was failing with the following error when users tried to run `elizaos create` or `elizaos start`:\n\n```\nError: Canno",
      "files": [
        "bun.lock",
        "packages/cli/.gitignore",
        "packages/cli/build.ts",
        "packages/cli/src/scripts/generate-version.ts",
        "packages/cli/src/utils/copy-template.ts",
        "packages/cli/src/utils/display-banner.ts",
        "packages/cli/src/utils/user-environment.ts"
      ]
    },
    {
      "title": "docs: fix broken path",
      "prNumber": 5866,
      "type": "bugfix",
      "body": "fixed broken path in readme",
      "files": [
        "packages/project-tee-starter/README.md"
      ]
    },
    {
      "title": "feat: Show action called and result in chat UI",
      "prNumber": 5865,
      "type": "feature",
      "body": "related: https://github.com/elizaOS/eliza/issues/5831\r\n\r\nresult:\r\n\r\n\r\nhttps://github.com/user-attachments/assets/632831d2-819d-4ba6-96e1-57206c08b6fc\r\n\r\n\r\n\r\n# Real-time Action Execution UI with Enhanced Tool Visualization\r\n\r\n## 🎯 Overview\r",
      "files": [
        "packages/client/src/components/actionTool.tsx",
        "packages/client/src/components/chat.tsx",
        "packages/client/src/hooks/use-socket-chat.ts",
        "packages/client/src/lib/api-type-mappers.ts",
        "packages/core/src/runtime.ts",
        "packages/core/src/types/events.ts",
        "packages/plugin-bootstrap/src/index.ts",
        "packages/plugin-sql/src/base.ts",
        "packages/server/src/api/messaging/core.ts",
        "packages/server/src/index.ts",
        "packages/server/src/services/message.ts"
      ]
    },
    {
      "title": "feat: Adds alpha NPM release workflow",
      "prNumber": 5863,
      "type": "feature",
      "body": "# 🚀 NPM Alpha Release Workflow - Updated Configuration\r\n\r\n## Summary\r\n\r\nThis PR updates the NPM alpha release workflow to improve deployment reliability, enforce better quality control, and ensure consistent tooling throughout the CI/CD pi",
      "files": [
        ".github/workflows/npm-alpha.yml",
        "package.json"
      ]
    },
    {
      "title": "feat: Unifies release workflow for NPM packages",
      "prNumber": 5877,
      "type": "feature",
      "body": "## 📋 PR: Unify NPM Release Workflows with Alpha Pattern\n\n### Summary\nThis PR aligns all NPM release workflows with the successful pattern established in the `npm-alpha.yml` workflow, creating a unified and maintainable release pipeline.\n\n#",
      "files": [
        ".github/workflows/npm-alpha.yml",
        ".github/workflows/pre-release.yml",
        ".github/workflows/release.yaml",
        "package.json"
      ]
    },
    {
      "title": "fix(cli): fix port detection for automatic fallback",
      "prNumber": 5876,
      "type": "bugfix",
      "body": " # Risks\r\n\r\n  Low risk. This fix improves error handling and prevents the CLI from crashing when default port is occupied.\r\n\r\n  # Background\r\n\r\n  ## What does this PR do?\r\n\r\n  This PR fixes the port detection mechanism in the ElizaOS CLI to",
      "files": [
        "packages/cli/src/commands/start/actions/server-start.ts",
        "packages/cli/src/utils/__tests__/port-handling.test.ts",
        "packages/cli/src/utils/port-handling.ts"
      ]
    },
    {
      "title": "fix: simplify alpha CLI tests to run basic smoke tests",
      "prNumber": 5875,
      "type": "bugfix",
      "body": "## Problem\n\nThe alpha CLI tests workflow was overly complex and fragile:\n- Running full TypeScript test suites that may not be compatible with the published alpha package\n- Complex setup with shims and cross-env dependencies\n- Tests were to",
      "files": [
        ".github/workflows/alpha-cli-tests.yml"
      ]
    },
    {
      "title": "feat: Update bun to latest version 1.2.21 across monorepo",
      "prNumber": 5874,
      "type": "feature",
      "body": "## 🚀 Update Bun to Latest Version 1.2.21\n\n### Problem\nThe ElizaOS monorepo was using inconsistent and outdated versions of Bun across different packages and GitHub workflows:\n- Root package.json: bun@1.2.15, @types/bun: 'latest'\n- CLI pack",
      "files": [
        ".devcontainer/devcontainer.json",
        ".github/workflows/alpha-cli-tests.yml",
        ".github/workflows/cli-tests.yml",
        ".github/workflows/client-cypress-tests.yml",
        ".github/workflows/jsdoc-automation.yml",
        ".github/workflows/npm-alpha.yml",
        ".github/workflows/tauri-ci.yml",
        ".github/workflows/update-news.yml",
        "package.json",
        "packages/api-client/package.json",
        "packages/cli/package.json",
        "packages/core/package.json",
        "packages/plugin-bootstrap/package.json"
      ]
    },
    {
      "title": "feat: Add alpha CLI tests workflow with NPM dependency",
      "prNumber": 5873,
      "type": "feature",
      "body": "## Summary\n\nThis PR introduces a new GitHub Actions workflow to test the published alpha version of the CLI package, ensuring the npm-published version works correctly across different platforms.\n\n## Problem\n\nPreviously, there was no automa",
      "files": [
        ".devcontainer/devcontainer.json",
        ".github/workflows/alpha-cli-tests.yml",
        ".github/workflows/cli-prod-validation.yml",
        ".github/workflows/cli-tests.yml",
        ".github/workflows/client-cypress-tests.yml",
        ".github/workflows/daily-code-quality-analysis.yml",
        ".github/workflows/jsdoc-automation.yml",
        ".github/workflows/npm-alpha.yml",
        ".github/workflows/tauri-ci.yml",
        ".github/workflows/update-news.yml",
        "package.json",
        "packages/api-client/package.json",
        "packages/cli/package.json",
        "packages/core/package.json",
        "packages/plugin-bootstrap/package.json"
      ]
    },
    {
      "title": "fix: crypto-browserify dependency issue",
      "prNumber": 5872,
      "type": "bugfix",
      "body": "## Problem\nThe @elizaos/core package was failing with the error:\n\n\n## Root Cause\nThe  file was importing  from  for encryption/decryption operations, but  was only listed as an external dependency in the build configuration (), not as a pro",
      "files": [
        "bun.lock",
        "packages/core/build.ts",
        "packages/core/package.json",
        "packages/core/src/__tests__/runtime.test.ts"
      ]
    },
    {
      "title": "chore: Bump to 1.5.5-alpha.1",
      "prNumber": 5871,
      "type": "other",
      "body": "This PR bumps the version across the entire monorepo from 1.4.3-alpha.6 to 1.5.5-alpha.1.\n\n## Changes Made\n\n### Version Updates\n- Updated version in  from 1.4.3-alpha.6 to 1.5.5-alpha.1\n- Updated version in all package.json files across the",
      "files": [
        "lerna.json",
        "packages/api-client/package.json",
        "packages/cli/package.json",
        "packages/config/package.json",
        "packages/core/package.json",
        "packages/plugin-bootstrap/package.json",
        "packages/plugin-dummy-services/package.json",
        "packages/plugin-sql/package.json",
        "packages/server/package.json",
        "packages/test-utils/package.json"
      ]
    },
    {
      "title": "fix: Unhandled Promise in Action Update",
      "prNumber": 5870,
      "type": "bugfix",
      "body": "related: https://github.com/elizaOS/eliza/pull/5865#discussion_r2317180747",
      "files": [
        "packages/plugin-bootstrap/src/index.ts"
      ]
    }
  ],
  "topContributors": [
    {
      "username": "wtfsayo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82053242?u=98209a1f10456f42d4d2fa71db4d5bf4a672cbc3&v=4",
      "totalScore": 334.35629982008624,
      "prScore": 327.5182998200862,
      "issueScore": 0,
      "reviewScore": 6,
      "commentScore": 0.838,
      "summary": null
    },
    {
      "username": "ChristopherTrimboli",
      "avatarUrl": "https://avatars.githubusercontent.com/u/27584221?u=0d816ce1dcdea8f925aba18bb710153d4a87a719&v=4",
      "totalScore": 196.49886023070667,
      "prScore": 186.0988602307067,
      "issueScore": 0,
      "reviewScore": 10,
      "commentScore": 0.4,
      "summary": null
    },
    {
      "username": "standujar",
      "avatarUrl": "https://avatars.githubusercontent.com/u/16385918?u=718bdcd1585be8447bdfffb8c11ce249baa7532d&v=4",
      "totalScore": 107.61655037073562,
      "prScore": 93.24055037073563,
      "issueScore": 0,
      "reviewScore": 13.5,
      "commentScore": 0.8759999999999999,
      "summary": null
    },
    {
      "username": "tcm390",
      "avatarUrl": "https://avatars.githubusercontent.com/u/60634884?u=c6c41679b8322eaa0c81f72e0b4ed95e80f0ac16&v=4",
      "totalScore": 100.71224594499039,
      "prScore": 100.51224594499038,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": null
    },
    {
      "username": "yungalgo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/113615973?u=92e0f29f7e2fbb8ce46ed13c51f692ca803de02d&v=4",
      "totalScore": 69.32111542865466,
      "prScore": 46.821115428654664,
      "issueScore": 0,
      "reviewScore": 22.5,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "jonathanprozzi",
      "avatarUrl": "https://avatars.githubusercontent.com/u/9438776?u=25b5a5b22cfe26724ee1ebd869c378fc65196987&v=4",
      "totalScore": 37.40307004804858,
      "prScore": 37.06307004804858,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.33999999999999997,
      "summary": null
    },
    {
      "username": "MozirDmitriy",
      "avatarUrl": "https://avatars.githubusercontent.com/u/193700874?v=4",
      "totalScore": 20.630306144334053,
      "prScore": 20.630306144334053,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "monilpat",
      "avatarUrl": "https://avatars.githubusercontent.com/u/15067321?v=4",
      "totalScore": 18.875999999999998,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 18,
      "commentScore": 0.8759999999999999,
      "summary": null
    },
    {
      "username": "0xbbjoker",
      "avatarUrl": "https://avatars.githubusercontent.com/u/54844437?u=90fe1762420de6ad493a1c1582f1f70c0d87d8e2&v=4",
      "totalScore": 13.971147180559946,
      "prScore": 13.631147180559946,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.33999999999999997,
      "summary": null
    },
    {
      "username": "1BDO",
      "avatarUrl": "https://avatars.githubusercontent.com/u/210645034?v=4",
      "totalScore": 7.4991471805599454,
      "prScore": 7.159147180559946,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.33999999999999997,
      "summary": null
    },
    {
      "username": "claude",
      "avatarUrl": "https://avatars.githubusercontent.com/in/1236702?v=4",
      "totalScore": 4.938,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 4.5,
      "commentScore": 0.43799999999999994,
      "summary": null
    },
    {
      "username": "borisudovicic",
      "avatarUrl": "https://avatars.githubusercontent.com/u/31806472?u=27713fbe603baae91ef519990facbacd6c23e93d&v=4",
      "totalScore": 4,
      "prScore": 0,
      "issueScore": 4,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "MagdiejamesNYC",
      "avatarUrl": "https://avatars.githubusercontent.com/u/44060696?v=4",
      "totalScore": 2.2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": null
    },
    {
      "username": "thedotmack",
      "avatarUrl": "https://avatars.githubusercontent.com/u/683968?u=fdb9ab5845aa92dbd5a9de4abea58d43b46cc0cd&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "objp2",
      "avatarUrl": "https://avatars.githubusercontent.com/u/189950592?v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    }
  ],
  "newPRs": 22,
  "mergedPRs": 19,
  "newIssues": 5,
  "closedIssues": 2,
  "activeContributors": 18
}