{
  "interval": {
    "intervalStart": "2025-05-18T00:00:00.000Z",
    "intervalEnd": "2025-05-25T00:00:00.000Z",
    "intervalType": "week"
  },
  "repository": "elizaos/eliza",
  "overview": "From 2025-05-18 to 2025-05-25, elizaos/eliza had 9 new PRs (8 merged), 0 new issues, and 13 active contributors.",
  "topIssues": [
    {
      "id": "I_kwDOMT5cIs62U-wk",
      "title": "Make a publish to npm",
      "author": "samgermain",
      "number": 4562,
      "repository": "elizaos/eliza",
      "body": "I'm trying to update zod to 3.24.2 in another repo, and I can't do it because eliza has some peerDependencies that use zod@3.23.8, and it causes the build to crash\n\nAnyway none of that really matters, but if make a publish to npm I would really appreciate it!",
      "createdAt": "2025-05-13T06:50:43Z",
      "closedAt": "2025-05-18T08:42:25Z",
      "state": "CLOSED",
      "commentCount": 1
    },
    {
      "id": "I_kwDOMT5cIs6yBHYI",
      "title": "chore: Update community section",
      "author": "madjin",
      "number": 4260,
      "repository": "elizaos/eliza",
      "body": "Gathering some ideas and sharing notes on how to improve the community section of docs\n\n\n## AI recommendations\n\n1. **Enhance the Navigation Flowchart** - Add clear paths for both technical and non-technical users, with complexity increasing as users go deeper.\n\n2. **Create a Prominent FAQ Section** - Develop a comprehensive, searchable FAQ that addresses the recurring questions mentioned by respondents.\n\n3. **Add a Clear \"Getting Started\" Guide** - Provide step-by-step instructions for different user types (developers, AI researchers, content creators).\n\n4. **Develop Use Case Examples** - Showcase practical applications that demonstrate real value (addressing the \"useless AI agent\" concern).\n\n5. **Clarify Project Direction** - Include a current roadmap and priorities section that's regularly updated to keep the community aligned.\n\n6. **Highlight Active Community Spaces** - Emphasize where meaningful discussions are happening (coder's channel, braintrust telegram).\n\n7. **Create a Community Structure Overview** - Outline how the community is organized, key working groups, and how decisions are made.\n\n8. **Include Non-Developer Contribution Paths** - Document how non-technical people can contribute (documentation, testing, community management, content creation).\n\n---\n\n## Notes\n\nVision: What We're Building Together\n\nThe internet is transforming, launching an agent is the new launching a new website. We're building:\n\n- **AI agents we can trust**, true ownership via free open source software and native TEE integration\n- **Seamless integration**, meeting us on platforms where we already spend our time\n- **Autonomous systems collaborate in swarms**, sharing context and solving complex problems together\n- **Sustainable community-driven development**, enabled by transparent AI assisted governance\n\n\nProject History\n\nWhat began as ai16z, a venture capital DAO led by AI agents on the Solana blockchain, has grown into a comprehensive open-source framework for building, deploying, and managing AI agents across platforms.\n\n- **October 2024**: Launched on Solana via daos.fun, raising 420.69 SOL\n- **November-December 2024**: Explosive growth in contributors, GitHub stars, and community engagement\n- **January 2025**: Rebranded from ai16z to ElizaOS, focusing on broader AI agent development\n- **March 2025**: Launched research beta of ElizaOS V2, representing a major architectural evolution\n\n\n```\n## Contributing to the ElizaOS DAO: High-Level Overview\n\n### Core Goals\n- Help build AI agents using the Eliza framework\n- Support democratized venture capital through AI-driven decisions\n- Advance the integration of AI and blockchain technologies\n\n### Impactful Contributions\n1. **Technical**: Code contributions to the Eliza framework, building new AI agents, or creating integrations\n \n2. **Governance**: Proposing investments, participating in token votes, and helping shape the project's direction\n\n3. **Strategy**: Researching investment opportunities, contributing to tokenomics discussions, organizing information\n\n4. **Community**: Creating educational content, onboarding developers, and representing the project to wider audiences\n```\n\nother ways to contribute:\n\n```\n- **Answer questions** in the coders/tech support channelsâ€”it gets noticed!\n- **Help with documentation**: Test steps, verify information, create issues and PRs\n- **Collaborate on AI news aggregation**: Generate show ideas or automations using our tools\n- **Develop specialized agents**: Create community scribes, lore keepers, moderators, or social media managers\n- **Build plugins**: Extend the ElizaOS framework with new capabilities\n- **Join community events**: Participate in our evolving formats for community coordination and project showcasing\n\n```\n\ntokenomics page: https://hackmd.io/EK6vGnyHT0WnFIL9P4nsQA\n",
      "createdAt": "2025-04-10T19:10:58Z",
      "closedAt": "2025-05-18T18:33:42Z",
      "state": "CLOSED",
      "commentCount": 0
    }
  ],
  "topPRs": [
    {
      "id": "PR_kwDOMT5cIs6WnMqt",
      "title": "Added : Polygon Plugin ",
      "author": "Samarthsinghal28",
      "number": 4635,
      "body": "# Relates to\r\n\r\nIssue:\r\n- [#450 Initialize Eliza Plugin Structure and Configuration (Polygon)](https://github.com/Sifchain/sa-eliza/issues/450)\r\n- [#453 Implement Staking Read Operations (Polygon Plugin)](https://github.com/Sifchain/sa-eliza/issues/453)\r\n- [#454 Implement Core Staking Write Operations (Polygon Plugin)](https://github.com/Sifchain/sa-eliza/issues/454)\r\n\r\nThis PR implements the core foundation and staking operations for the Polygon Plugin as part of the \"Implement Polygon Plugin MVP\" epic.\r\n\r\n<!-- This risks section must be filled out before the final review and merge. -->\r\n\r\n# Risks\r\n\r\n*   **Medium: L1 Gas Estimation Inaccuracy:** The current `GasService` primarily uses L2 (PolygonScan) gas oracles. When used for L1 Ethereum transactions (staking, bridging), this can lead to inaccurate gas estimations, potentially causing transactions to be underpriced (fail) or overpriced.\r\n*   **Medium: Missing Heimdall Governance:** The P1 functionality for Polygon-specific governance (interacting with Heimdall) is not implemented. Current governance actions target EVM-based smart contracts. Users expecting native Polygon governance via Heimdall will not find this functionality.\r\n*   **Low: User-Facing `withdrawRewards` Action Stub:** The LLM-enabled `withdrawRewards` action is a non-functional stub. The core logic exists via the programmatic `WITHDRAW_REWARDS_L1` action and the `PolygonRpcService`.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\n1. **Plugin Foundation (#450):** \r\n   - Establishes the plugin package structure with proper configuration and boilerplate\r\n   - Implements configuration handling for RPC URLs, private keys, and API keys\r\n   - Creates the provider structure and plugin lifecycle methods\r\n\r\n2. **Staking Read Operations (#453):**\r\n   - Integrates StakeManager and ValidatorShare ABIs for interacting with L1 staking contracts\r\n   - Implements `getValidatorInfo(validatorId)` to fetch validator status, total stake, and commission rate\r\n   - Implements `getDelegatorInfo(validatorId, delegatorAddress)` to get delegator stake and pending rewards\r\n   - Creates robust error handling for contract interactions\r\n\r\n3. **Staking Write Operations (#454):**\r\n   - Implements `delegate(validatorId, amountWei)` for staking MATIC/POL to validators\r\n   - Implements `undelegate(validatorId, sharesAmountWei)` for initiating the unbonding process\r\n   - Implements `withdrawRewards(validatorId)` for claiming accumulated staking rewards\r\n   - Implements `restakeRewards(validatorId)` as a convenience function\r\n   - Handles transaction creation, gas estimation, signing, and broadcasting\r\n\r\n\r\nKey functionalities included:\r\n*   **Plugin Core**: `package.json`, TypeScript configuration, main plugin definition (`src/index.ts`) with lifecycle methods, and registration with ElizaOS.\r\n*   **Configuration**: Handles essential configurations like L1/L2 RPC URLs, private key, and PolygonScan API key, with validation using `zod`. Includes `.env.example`.\r\n*   **L1 Staking (Ethereum)**:\r\n    *   `PolygonRpcService` implements interactions with L1 staking contracts (`StakeManager`, `ValidatorShare`) for delegation, undelegation (partial via `sellVoucher_new` in service), reward withdrawal, and fetching validator/delegator information.\r\n    *   User-facing LLM-enabled actions and direct programmatic actions for these operations.\r\n*   **L1 Native Bridge Deposit (Polygon PoS Bridge)**:\r\n    *   `PolygonRpcService` implements deposits to the L1 `RootChainManager` contract.\r\n    *   Actions for initiating bridge deposits.\r\n*   **L2 Interactions (Polygon PoS)**:\r\n    *   Basic L2 interactions like fetching balances, block numbers via `PolygonRpcService`.\r\n    *   Actions for these operations.\r\n*   **Checkpoint Status**:\r\n    *   `PolygonRpcService` implements checks against the L1 `RootChainManager` to verify L2 block checkpoint status.\r\n    *   Actions for this functionality.\r\n*   **EVM-Based Governance Stubs**:\r\n    *   Actions (`PROPOSE_GOVERNANCE_POLYGON`, `VOTE_GOVERNANCE_POLYGON`) are implemented to interact with EVM-compatible governor smart contracts (e.g., OpenZeppelin Governor) using `viem`.\r\n*   **Providers**: Includes a `PolygonWalletProvider` (using `viem`) for EVM wallet interactions and exposing wallet details.\r\n*   **Services**: `PolygonRpcService` (using `ethers.js`) for core L1/L2 EVM logic and `GasService` for L2 gas price fetching (PolygonScan).\r\n*   **Documentation**: A comprehensive `README.md` for the plugin.\r\n\r\n## What kind of change is this?\r\n\r\n<!--\r\nBug fixes (non-breaking change which fixes an issue)\r\nImprovements (misc. changes to existing features)\r\nFeatures (non-breaking change which adds functionality)\r\nUpdates (new versions of included code)\r\n-->\r\nFeatures (non-breaking change which adds functionality)\r\n\r\n<!-- This \"Why\" section is most relevant if there are no linked issues explaining why. If there is a related issue, it might make sense to skip this why section. -->\r\n## Why are we doing this? Any context or related work?\r\n\r\nThis work establishes the dedicated `@elizaos/plugin-polygon` as outlined in the \"Implement Polygon Plugin MVP\" epic. The goal is to create a focused plugin capable of handling Polygon-specific interactions (L1 staking, native bridge, Heimdall governance) that go beyond the scope of a generic EVM plugin. This PR lays the groundwork for these features, with many EVM-based L1/L2 interactions already functional.\r\n\r\n# Documentation changes needed?\r\n\r\n<!--\r\nMy changes do not require a change to the project documentation.\r\nMy changes require a change to the project documentation.\r\nIf documentation change is needed: I have updated the documentation accordingly.\r\n-->\r\nMy changes do not require a change to the project documentation. (The plugin includes its own `README.md` which serves as initial documentation for its features and setup).\r\n\r\n<!-- Please show how you tested the PR. This will really help if the PR needs to be retested and probably help the PR get merged quicker. -->\r\n\r\n# Testing\r\n\r\n### Where should a reviewer start?\r\n\r\n1. **`packages/plugin-polygon/README.md`**: For an overview of the plugin's intended features and setup.\r\n2. **`packages/plugin-polygon/src/index.ts`**: For the main plugin definition, configuration handling, and registration of components.\r\n3. **`packages/plugin-polygon/src/services/PolygonRpcService.ts`**: To understand the core logic for L1 staking, L1 bridging, and L2 interactions.\r\n4. **`packages/plugin-polygon/src/services/GasService.ts`**: To review the L2 gas oracle integration.\r\n5. **Key staking files:**\r\n   - `packages/plugin-polygon/src/abi/`: To verify the StakeManager and ValidatorShare ABIs are properly included\r\n   - `packages/plugin-polygon/src/actions/delegate.ts`: For L1 staking operations\r\n   - `packages/plugin-polygon/src/actions/getValidatorInfo.ts` and `getDelegatorInfo.ts`: For staking read operations\r\n\r\n## Detailed testing steps\r\n\r\n<!--\r\nNone: Automated tests are acceptable.\r\n-->\r\nManual testing is recommended for this initial integration, focusing on the implemented P1 functionalities. Automated tests for configuration loading were considered in the ticket but not explicitly verified as present in this review.\r\n\r\n**Setup:**\r\n1.  Navigate to the `packages/plugin-polygon` directory.\r\n2.  Create a `.env` file based on `.env.example`.\r\n3.  Populate the `.env` file with valid:\r\n    *   `POLYGON_RPC_URL` (Polygon PoS RPC endpoint)\r\n    *   `ETHEREUM_RPC_URL` (Ethereum Mainnet RPC endpoint for L1)\r\n    *   `PRIVATE_KEY` (for a wallet with funds on both L1 and L2 for testing)\r\n    *   `POLYGONSCAN_KEY` (API key for PolygonScan)\r\n    *   `HEIMDALL_RPC_URL` (placeholder, as Heimdall features are not yet implemented)\r\n",
      "repository": "elizaos/eliza",
      "createdAt": "2025-05-18T11:31:49Z",
      "mergedAt": null,
      "additions": 10688,
      "deletions": 1088
    },
    {
      "id": "PR_kwDOMT5cIs6WnU_V",
      "title": "Merge addpolygon resolution",
      "author": "HarshModi2005",
      "number": 4636,
      "body": "<!-- Use this template by filling in information and copying and pasting relevant items out of the HTML comments. -->\r\n\r\n# Relates to\r\n\r\n<!-- LINK TO ISSUE OR TICKET -->\r\n\r\n<!-- This risks section must be filled out before the final review and merge. -->\r\n\r\n# Risks\r\n\r\n<!--\r\nLow, medium, large. List what kind of risks and what could be affected.\r\n-->\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\n## What kind of change is this?\r\n\r\n<!--\r\nBug fixes (non-breaking change which fixes an issue)\r\nImprovements (misc. changes to existing features)\r\nFeatures (non-breaking change which adds functionality)\r\nUpdates (new versions of included code)\r\n-->\r\n\r\n<!-- This \"Why\" section is most relevant if there are no linked issues explaining why. If there is a related issue, it might make sense to skip this why section. -->\r\n<!--\r\n## Why are we doing this? Any context or related work?\r\n-->\r\n\r\n# Documentation changes needed?\r\n\r\n<!--\r\nMy changes do not require a change to the project documentation.\r\nMy changes require a change to the project documentation.\r\nIf documentation change is needed: I have updated the documentation accordingly.\r\n-->\r\n\r\n<!-- Please show how you tested the PR. This will really help if the PR needs to be retested and probably help the PR get merged quicker. -->\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\n## Detailed testing steps\r\n\r\n<!--\r\nNone: Automated tests are acceptable.\r\n-->\r\n\r\n<!--\r\n- As [anon/admin], go to [link]\r\nÂ  - [do action]\r\nÂ  - verify [result]\r\n-->\r\n\r\n<!-- If there is a UI change, please include before and after screenshots or videos. This will speed up PRs being merged. It is extra nice to annotate screenshots with arrows or boxes pointing out the differences. -->\r\n<!--\r\n## Screenshots\r\n### Before\r\n### After\r\n-->\r\n\r\n<!-- If there is anything about the deployment, please make a note. -->\r\n<!--\r\n# Deploy Notes\r\n-->\r\n\r\n<!-- Â Copy and paste command line output. -->\r\n<!--\r\n## Database changes\r\n-->\r\n\r\n<!-- Â Please specify deploy instructions if there is something more than the automated steps. -->\r\n<!--\r\n## Deployment instructions\r\n-->\r\n\r\n<!-- If you are on Discord, please join https://discord.gg/elizaOS and state your Discord username here for the contributor role and join us in #development-feed -->\r\n<!--\r\n## Discord username\r\n\r\n-->\r\n",
      "repository": "elizaos/eliza",
      "createdAt": "2025-05-18T12:36:44Z",
      "mergedAt": null,
      "additions": 10084,
      "deletions": 1931
    },
    {
      "id": "PR_kwDOMT5cIs6WDP_w",
      "title": "Issue 451",
      "author": "HarshModi2005",
      "number": 4575,
      "body": "# Ticket: Implement Core EVM RPC Wrappers & Basic Reads (Polygon Plugin)\r\n\r\n**Ticket Type:** Dev Ticket  \r\n**Priority:** P1  \r\n**Epic:** Implement Polygon Plugin MVP  \r\n**Assignee:** Harsh Modi  \r\n**Reporter:** AI Assistant  \r\n**Dependencies:** plugin-setup ticket (relies on initialized structure and configuration)\r\n\r\n## 1. Summary\r\n\r\nThis ticket has been completed. We successfully established the foundational communication layer with Polygon PoS (L2) and Ethereum (L1) networks via JSON-RPC, leveraging the existing functionalities within the @elizaos/plugin-evm. We identified, adapted, and integrated standard EVM RPC wrappers and client setup logic from the EVM plugin into the Polygon plugin's context, and implemented the initial set of basic Polygon-specific read operations using these adapted wrappers.\r\n\r\n## 2. Detailed Description & Completed Tasks\r\n\r\n### Identified and Reused EVM Logic:\r\n- Thoroughly reviewed the @elizaos/plugin-evm implementation, particularly its RPC client implementation using viem.\r\n- Identified core service, provider, and utility functions responsible for blockchain interactions.\r\n- Leveraged the EVM plugin's approach to chain configuration and client initialization.\r\n\r\n### Adapted & Integrated RPC Client Setup:\r\n- Integrated RPC client setup logic into the PolygonRpcProvider class.\r\n- Successfully implemented dual provider management:\r\n  - L1Provider for Ethereum Mainnet (using ETHEREUM_RPC_URL)\r\n  - L2Provider for Polygon PoS network (using POLYGON_RPC_URL)\r\n- Created clear provider selection logic based on network type (L1/L2).\r\n\r\n### Adapted & Integrated RPC Method Wrappers:\r\n- Integrated wrapper functions for standard EVM JSON-RPC methods.\r\n- Refactored these functions to handle dual L1/L2 providers with proper typing.\r\n- Preserved and enhanced error handling with TypeScript type assertions.\r\n- Added caching mechanisms to reduce redundant RPC calls.\r\n\r\n### Implemented Basic Read Functions:\r\n- Successfully implemented all required read functionalities:\r\n  - `getCurrentBlockNumber()`: Returns latest block number from Polygon.\r\n  - `getBlockDetails(identifier)`: Returns detailed block information.\r\n  - `getTransactionDetails(txHash)`: Returns transaction details and receipt.\r\n  - `getNativeBalance(address)`: Returns MATIC balance for an address.\r\n  - `getErc20Balance(tokenAddress, accountAddress)`: Returns token balance.\r\n- Added additional utility functions:\r\n  - `getErc20Metadata(tokenAddress)`: Returns token symbol and decimals.\r\n  - `estimateGas(tx)`: Estimates gas for transactions.\r\n  - `getGasPrice()`: Gets current gas price.\r\n\r\n### Type Definitions:\r\n- Added comprehensive TypeScript interfaces and types.\r\n- Used `as const` for contract ABIs to ensure proper typing.\r\n- Fixed deep type instantiation issues with appropriate type assertions.\r\n\r\n### Testing:\r\n- Created standalone test files that don't depend on @elizaos/core.\r\n- Implemented comprehensive tests for all key functionalities.\r\n- Added proper error handling for expected test failures.\r\n\r\n## 3. Acceptance Criteria (All Met)\r\n\r\nâœ… Core RPC client setup logic successfully integrated and adapted to manage distinct L1 (Ethereum) and L2 (Polygon PoS) providers.\r\n\r\nâœ… Standard EVM JSON-RPC wrapper functions successfully integrated and functional within the Polygon plugin.\r\n\r\nâœ… Functions `getCurrentBlockNumber`, `getBlockDetails`, `getTransactionDetails`, `getNativeBalance`, `getErc20Balance` implemented and functional.\r\n\r\nâœ… `getErc20Balance` successfully retrieves the balance for known ERC20 tokens on Polygon (tested with USDC).\r\n\r\nâœ… Error handling for RPC communication and invalid inputs is functional.\r\n\r\nâœ… Code includes relevant type definitions and adheres to project linting/formatting standards.\r\n\r\nâœ… Tests verify the functionality of the core read operations using the adapted wrappers and dual-provider setup.\r\n\r\n## 4. Implementation Details\r\n\r\n### Key Components:\r\n\r\n1. **PolygonRpcProvider**: Core provider class that manages connections to both L1 and L2 networks.\r\n   - Initializes public and wallet clients for both networks.\r\n   - Provides methods for network-specific operations.\r\n   - Implements caching for frequently accessed data.\r\n\r\n2. **PolygonRpcService**: Service layer that exposes provider functionality to the plugin.\r\n   - Extends the Service class from @elizaos/core.\r\n   - Manages provider lifecycle.\r\n   - Provides simplified interfaces for blockchain operations.\r\n\r\n3. **Configuration**: Updated to use configurable RPC URLs.\r\n   - Default URLs set to Infura endpoints.\r\n   - Allows overriding via environment variables or runtime settings.\r\n\r\n### Technical Improvements:\r\n\r\n1. **TypeScript Fixes**:\r\n   - Added `as const` to ERC20 ABI and other contract ABIs.\r\n   - Used type assertions to resolve deep instantiation errors.\r\n   - Fixed sendTransaction method parameter handling.\r\n\r\n2. **Performance Optimizations**:\r\n   - Implemented multi-level caching with configurable expiry times.\r\n   - Reduced redundant RPC calls for frequently accessed data.\r\n\r\n3. **Error Handling**:\r\n   - Enhanced error messages for better debugging.\r\n   - Added proper error type assertions.\r\n   - Implemented graceful fallbacks for common error scenarios.\r\n\r\n## 5. Testing Results\r\n\r\nAll tests pass successfully, verifying:\r\n- RPC connectivity to both Ethereum and Polygon networks\r\n- Block number and details retrieval\r\n- Transaction details retrieval\r\n- Native token balance checking\r\n- ERC20 token interactions (balance and metadata)\r\n- Gas price estimation\r\n\r\n## 6. Next Steps\r\n\r\nThis implementation provides a solid foundation for subsequent features:\r\n- Staking operations on Polygon\r\n- Bridge operations between L1 and L2\r\n- Governance interactions\r\n- Advanced token operations\r\n",
      "repository": "elizaos/eliza",
      "createdAt": "2025-05-13T19:08:31Z",
      "mergedAt": "2025-05-18T12:23:51Z",
      "additions": 7411,
      "deletions": 1541
    },
    {
      "id": "PR_kwDOMT5cIs6WPanr",
      "title": "chore: update docs",
      "author": "madjin",
      "number": 4586,
      "body": "This PR focuses on a comprehensive update of the project's documentation.\r\n\r\nKey changes include:\r\n\r\n*   **Content Updates:**\r\n    *   Updated blog posts.\r\n    *   Added brief versions of all partner documentation.\r\n    *   Added documentation for \"safe\" (details of what \"safe\" refers to could be added here if known).\r\n    *   Updated the \"safe brief\".\r\n*   **Format and Structure:**\r\n    *   Converted documentation files to MDX format.\r\n    *   Renamed files and fixed MDX-related issues.\r\n    *   Added README files for various folders to support autodocs.\r\n*   **Fixes:**\r\n    *   Addressed TypeDoc and Docusaurus errors to ensure proper documentation generation.\r\n*   **Branch Management:**\r\n    *   Includes merges from the `v2-develop` branch to keep the documentation branch up-to-date.\r\n\r\nThis PR aims to improve the clarity, accuracy, and accessibility of our documentation.",
      "repository": "elizaos/eliza",
      "createdAt": "2025-05-15T01:05:41Z",
      "mergedAt": "2025-05-18T07:37:19Z",
      "additions": 3331,
      "deletions": 393
    },
    {
      "id": "PR_kwDOMT5cIs6Wn1Tc",
      "title": "feat: deepsearch plugin (draft)",
      "author": "wtfsayo",
      "number": 4638,
      "body": "## Summary\n- add `@acme/plugin-deepsearch` package with placeholder providers, service, action, evaluator and config\n- document plugin basics in README\n\n## Testing\n- `bun run pre-commit`\n- `bun test` *(fails: cannot find modules and missing packages)*",
      "repository": "elizaos/eliza",
      "createdAt": "2025-05-18T15:31:44Z",
      "mergedAt": null,
      "additions": 733,
      "deletions": 7
    }
  ],
  "codeChanges": {
    "additions": 13837,
    "deletions": 1864,
    "files": 127,
    "commitCount": 37
  },
  "completedItems": [
    {
      "title": "Issue 451",
      "prNumber": 4575,
      "type": "other",
      "body": "# Ticket: Implement Core EVM RPC Wrappers & Basic Reads (Polygon Plugin)\r\n\r\n**Ticket Type:** Dev Ticket  \r\n**Priority:** P1  \r\n**Epic:** Implement Polygon Plugin MVP  \r\n**Assignee:** Harsh Modi  \r\n**Reporter:** AI Assistant  \r\n**Dependencie"
    },
    {
      "title": "chore: update docs",
      "prNumber": 4586,
      "type": "other",
      "body": "This PR focuses on a comprehensive update of the project's documentation.\r\n\r\nKey changes include:\r\n\r\n*   **Content Updates:**\r\n    *   Updated blog posts.\r\n    *   Added brief versions of all partner documentation.\r\n    *   Added documentat"
    },
    {
      "title": "API - return ID of newly created agent",
      "prNumber": 4634,
      "type": "other",
      "body": "When using API calls and creating AGENT it very useful to have returned ID on first API call, so there are not needed subsequent calls after it just to find ID, which is crucial for other types of API calls.\r\n\r\nSo I added ID in return data "
    },
    {
      "title": "ci: Docs auto deployer.",
      "prNumber": 4631,
      "type": "other",
      "body": "This runs Github Action if anything inside `packages/docs` folder changes and auto deploys to `docs.eliza.how`."
    },
    {
      "title": "Eliza290/cli command dev",
      "prNumber": 4618,
      "type": "other",
      "body": "This PR enhances the elizaos dev command with better character file handling while ensuring consistent behavior with start cli command\r\n\r\nAll options tested and passed:\r\n\r\n-c/--configure, \r\n-p/--port, \r\n-b/--build\r\n-char/--character\r\n\r\nKey "
    },
    {
      "title": "chore: Add missing plugin failure test",
      "prNumber": 4643,
      "type": "feature",
      "body": "## Summary\n- test plugin install modifies package.json with plugin-discord\n- verify missing plugin fails with registry error\n\n## Testing\n- `./run_all_bats.sh` *(fails: 'bats' not found in PATH)*"
    },
    {
      "title": "fix: docs deploy workflow",
      "prNumber": 4640,
      "type": "bugfix",
      "body": "fixes npm cache since doesn't exist for docs package, removes PR runs, should only happen on pushes."
    },
    {
      "title": "feat: allow world selection in message API",
      "prNumber": 4637,
      "type": "feature",
      "body": "## Summary\n- add optional `worldId` query param for `/agents/:agentId/message`\n- record `worldId` in created memories\n- document new query parameter in OpenAPI & docs\n\n## Testing\n- `bun test` *(fails: Cannot find module '@playwright/test')*"
    }
  ],
  "topContributors": [
    {
      "username": "wtfsayo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82053242?u=98209a1f10456f42d4d2fa71db4d5bf4a672cbc3&v=4",
      "totalScore": 141.006490372788,
      "prScore": 140.568490372788,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.43799999999999994,
      "summary": null
    },
    {
      "username": "Samarthsinghal28",
      "avatarUrl": "https://avatars.githubusercontent.com/u/120447590?v=4",
      "totalScore": 43.5437738965761,
      "prScore": 43.5437738965761,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "HarshModi2005",
      "avatarUrl": "https://avatars.githubusercontent.com/u/142230924?u=64e337bbdb6b3aded5943b7e297759e7a3cfc0f0&v=4",
      "totalScore": 40.4317738965761,
      "prScore": 40.4317738965761,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "ChristopherTrimboli",
      "avatarUrl": "https://avatars.githubusercontent.com/u/27584221?u=0d816ce1dcdea8f925aba18bb710153d4a87a719&v=4",
      "totalScore": 33.79366248977032,
      "prScore": 28.79366248977032,
      "issueScore": 0,
      "reviewScore": 5,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "monilpat",
      "avatarUrl": "https://avatars.githubusercontent.com/u/15067321?v=4",
      "totalScore": 10,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 10,
      "commentScore": 0,
      "summary": null
    }
  ],
  "newPRs": 9,
  "mergedPRs": 8,
  "newIssues": 0,
  "closedIssues": 2,
  "activeContributors": 13
}