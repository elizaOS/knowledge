{
  "prompt_name": "developer-update",
  "category": "dev",
  "date": "2025-05-15",
  "generated_text": "# ElizaOS Developer Update (May 15, 2025)\n\n## Core Framework\n\nThe ElizaOS team has made significant progress on the v2 architecture, currently in beta testing. Key improvements include:\n\n- **Repository Reorganization**: Plugins have been moved out of the core repository into a dedicated `elizaos-plugins` repository to streamline maintenance and development.\n- **Enhanced Architecture**: The transition from v0.x (v1) to v1.x (v2) brings substantial improvements described by developers as \"like day and night.\"\n- **Plugin Compatibility Bridge**: Work has been completed to enable plugin sharing between 0.x and 1.x versions, improving cross-version compatibility.\n- **Database Improvements**: Fixed PGLite JSON serialization to handle invalid Unicode escape sequences in logs, and resolved critical database migration issues.\n\n```typescript\n// Example of the improved database entity relationship handling\n// Create agent table with proper references\nconst sql = `\nCREATE TABLE IF NOT EXISTS \"agents\" (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    name TEXT NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS \"rooms\" (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    agent_id UUID REFERENCES \"agents\"(id) ON DELETE CASCADE,\n    name TEXT NOT NULL\n);\n`;\n```\n\n## New Features\n\n### GitHub-Wallet Integration System\n\nA new system for linking GitHub identities with wallet addresses has been proposed with three implementation methods:\n\n```typescript\n// Method 1: Hidden comments in profile READMEs\nasync function verifyProfileReadme(username: string, address: string): Promise<boolean> {\n  const readme = await fetchGitHubReadme(username);\n  return readme.includes(`<!-- solana-verify: ${address} -->`);\n}\n\n// Method 2: GitHub Gist implementation\nasync function verifyGist(username: string, address: string): Promise<boolean> {\n  const gists = await fetchUserGists(username);\n  const verificationGist = gists.find(g => g.filename === 'solana-verify.md');\n  return verificationGist?.content?.includes(address) || false;\n}\n```\n\n### DAG Viewer Tool\n\nA new tool for visualizing and designing agent workflows is under development:\n\n- Built using react-flow as the underlying technology\n- Supports custom node types and conditional flows\n- Will include agent state tracking and debug views\n- Planning to add budget constraints and circuit breakers\n\n### RAG Knowledge Improvements \n\nSemantic text splitting has been implemented for improved RAG knowledge retrieval, allowing agents to better process and reference knowledge files.\n\n## Bug Fixes\n\nSeveral critical bugs have been resolved in this update:\n\n1. **PGLite JSON Serialization**: Fixed handling of invalid Unicode escape sequences in logs that were causing crashes.\n   ```typescript\n   // Before: Would crash on invalid Unicode\n   JSON.stringify(logEntry);\n   \n   // After: Safely handles invalid Unicode\n   JSON.stringify(logEntry, (_, v) => \n     typeof v === 'string' ? v.replace(/[\\u0000-\\u001F]/g, '') : v\n   );\n   ```\n\n2. **Entity Relationship Handling**: Fixed foreign key constraint violation on agent deletion and added proper cascading deletion.\n\n3. **Twitter Integration Issues**: Resolved problems with the Twitter plugin including:\n   - Fixed line breaks appearing as raw characters in tweets\n   - Corrected the Twitter agent not replying to some target accounts\n   - Improved error handling and configurable retry settings\n\n4. **Discord Message Handling**: Fixed the issue of Discord messages randomly disappearing and improved formatting for replies.\n\n## API Changes\n\n### Plugin Architecture Overhaul\n\nThe plugin system has been significantly refactored with the following changes:\n\n- New namespacing convention: `plugin-*` modules are for v2/v1.x and `client-*` modules are for v0.x\n- Added support for third-party plugin installation from git repositories (both HTTPS and shorthand formats)\n- Introduced a plugin specification submodule to standardize plugin development\n\n### Model Provider Refactoring\n\nModel handling in AgentRuntime has been refactored to support:\n\n- Provider selection based on priority settings\n- Dynamic model loading based on provider availability\n- Custom model configuration through environment variables\n\n```typescript\n// Example of new model provider configuration\nconst modelConfig = {\n  providers: ['openai', 'anthropic', 'deepseek', 'together', 'ollama'],\n  priority: {\n    default: ['openai', 'anthropic'],\n    embedding: ['openai'],\n    image: ['openai']\n  },\n  options: {\n    openai: {\n      defaultModel: 'gpt-4o'\n    }\n  }\n};\n```\n\n## Social Media Integrations\n\n### Twitter/X Updates\n\n- Implemented Twitter timeline functionality with improved response handling\n- Fixed interaction fetching and reaction implementation \n- Added comprehensive blog tutorial for Twitter agent setup\n- Resolved issues with scheduling posts and handling replies without threading\n\n### Farcaster Integration\n\n- Farcaster v2 plugin exists but is currently in testing\n- Updates ensure compatibility with the new plugin architecture\n\n### Discord Integration\n\n- Added proper reply functionality to the Discord plugin\n- Fixed message formatting issues\n- Enhanced message persistence to prevent disappearing messages\n\n```typescript\n// Example of extending the Discord plugin with custom functionality\nimport { DiscordPlugin } from '@elizaos/plugin-discord';\n\nexport class MyCustomDiscordPlugin extends DiscordPlugin {\n  override async sendMessage(channelId: string, content: string, options: any = {}) {\n    // Custom handling before sending\n    const processedContent = this.preprocessMessage(content);\n    \n    // Call parent implementation with processed content\n    return super.sendMessage(channelId, processedContent, {\n      ...options,\n      // Add reply functionality\n      reply: options.messageId ? { messageReference: options.messageId } : undefined\n    });\n  }\n  \n  private preprocessMessage(content: string): string {\n    // Custom preprocessing logic\n    return content;\n  }\n}\n```\n\n## Model Provider Updates\n\n### OpenAI Integration\n\n- Added model usage events for embeddings and image description\n- Improved response parsing to support custom fields from GPT-4o\n- Optimized to use smaller models for faster responses where appropriate\n\n### Anthropic Integration\n\n- Fixed API key error handling issues\n- Enhanced response formatting consistency\n\n### Local AI Models\n\n- Improved Ollama integration with better error handling for \"Headers Timeout Error\"\n- Enhanced local model initialization to prevent system stalls after model path validation\n\n## Breaking Changes\n\nAs ElizaOS transitions from v1 (0.x) to v2 (1.x), developers should be aware of these breaking changes:\n\n1. **Plugin Repository Migration**: Plugins have been moved from the core repository to `elizaos-plugins`. Update your import paths accordingly.\n\n2. **Plugin Naming Convention**: \n   - Use `@elizaos/plugin-*` for v2/v1.x \n   - Use `@elizaos/client-*` for v0.x\n\n3. **Version Compatibility**: When using the v2-develop branch (1.x), pin dependencies:\n   ```json\n   {\n     \"dependencies\": {\n       \"@elizaos/cli\": \"^1.0.0-beta.51\",\n       \"@elizaos/core\": \"^1.0.0-beta.51\"\n     }\n   }\n   ```\n\n4. **Plugin Extension Pattern**: When extending plugins, extend the base class instead of modifying services:\n   ```typescript\n   // CORRECT: Extend the plugin class\n   export class MyDiscordPlugin extends DiscordPlugin { ... }\n   \n   // INCORRECT: Don't modify the service directly\n   discordService.sendMessage = myCustomFunction;\n   ```\n\n5. **Character Definition Changes**: Character files require updates for the new system, especially around knowledge file referencing and RAG functionality.",
  "source_references": [
    "Key supporting evidence for ElizaOS v2 development status:\n\"ElizaOS v2 Development: Currently in beta testing phase. A team member described it as 'looking at a pizza before it goes into the oven' with GPT-4o image generation being the final step.\"\n\"Version Differences: Users noted significant differences between ElizaOS v1 (main branch, 0.x) and v2 (v2-develop branch, 1.x), described as 'like day and night.'\"\n\"Q: What's the difference between Eliza and Elizav2? A: Yes like day and night. (xell0x)\"\n\nEvidence for Plugin Repository Migration:\n\"Plugins have been moved to a separate repository (elizaos-plugins)\"\n\"GitHub link shared: https://github.com/elizaos-plugins\"\n\nEvidence for Twitter/Discord integration issues and fixes:\n\"Twitter/X Integration: Users troubleshooting configuration issues with Twitter integration, including setting environment variables for replying to specific users.\"\n\"Discord integration issues, particularly with formatting responses as replies\"\n\"Fixed Discord messages randomly disappearing (#3952)\"\n\"Fixed Twitter interactions fetching and reactions implementation (#4181)\"\n\nEvidence for plugin extension pattern:\n\"Ruby provided comprehensive guidance to Scooter on extending the Discord plugin:\n- Identified version mismatch issues in package.json\n- Recommended pinning @elizaos/cli and @elizaos/core to specific beta versions\n- Shared a complete implementation example for extending the DiscordPlugin class with custom reply functionality\n- Explained proper plugin extension patterns that work with ElizaOS's architecture\"\n\nEvidence for database improvements:\n\"Fixed JSON serialization in PGLite to handle invalid Unicode escape sequences in logs [#4458]\"\n\"Resolved database migration issues in PGLite [#4532], [#4531]\"\n\"Users shared SQL commands for creating database tables for agents with proper references and constraints.\"\n\nEvidence for GitHub-Wallet integration proposal:\n\"Jin proposed several methods for linking wallet addresses to GitHub identities:\n  - Hidden comments in profile READMEs\n  - Comments in GitHub issues\n  - GitHub gist implementation with API API integration\"\n\nEvidence for DAG Viewer development:\n\"DefiniteOptimist shared progress on a tool for visualizing and designing agent workflows using react-flow as the underlying technology\"\n\"Q: Have you considered adding support for custom node types and conditional flows? A: Yes, those are on the way! (DefiniteOptimist)\"\n\nEvidence for knowledge/RAG improvements:\n\"Semantic text splitting for improved RAG knowledge retrieval (#4235)\"\n\"Paths are relative to the characters/knowledge directory\"\n\"RAG (Retrieval-Augmented Generation) knowledge works by setting \"ragknowledge: true\" in character settings\""
  ]
}