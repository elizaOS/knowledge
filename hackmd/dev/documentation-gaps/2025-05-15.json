{
  "prompt_name": "documentation-gaps",
  "category": "dev",
  "date": "2025-05-15",
  "generated_text": "# Documentation Gaps Analysis for 2025-05-15\n\n## Critical Documentation Gaps\n\n### 1. Plugin Development and Extension Architecture\nThere is an urgent need for comprehensive documentation on extending core plugins in ElizaOS v2. Users are confused about the proper patterns for extending plugins versus modifying core code, with specific challenges around the Discord plugin extension. Documentation should clarify differences between v1 and v2 plugin systems, including module naming conventions (`plugin-twitter` vs `client-twitter`).\n\n### 2. Migration Guide from V1 to V2\nUsers consistently express confusion about the differences between ElizaOS v1 (main branch, 0.x) and v2 (v2-develop branch, 1.x), described as \"like day and night.\" A detailed migration guide is needed to help users transition between versions, including changes to plugin architecture, character definitions, and API endpoints.\n\n### 3. Character File Configuration\nUsers are struggling to understand the scope of character files, particularly regarding knowledge integration. Documentation should explain the proper methods for referencing knowledge files in character.json, including directory structure and the use of RAG (Retrieval-Augmented Generation) with the \"ragknowledge: true\" setting.\n\n### 4. API and Integration Documentation\nThe auto.fun API endpoints lack comprehensive documentation, with users having to examine GitHub code to understand functionality. Documentation should detail available endpoints (swaps, token retrieval, search, charts) and explain limitations, such as the absence of coin creation functionality.\n\n### 5. Database Setup and Configuration\nUsers need clearer guidance on database setup, particularly for Supabase integration. Documentation should include SQL commands for creating proper tables with references and constraints, as well as entity relationship management to prevent constraint violations.\n\n## Recommended Documentation Improvements\n\n### New Documentation Needed:\n1. **Plugin Extension Guide for V2**: Create a comprehensive guide on extending core plugins in v2, with code examples showing proper class extension patterns rather than service modification.\n\n2. **V1 to V2 Migration Guide**: Develop a detailed migration walkthrough that highlights architectural changes, API differences, and updated configuration requirements between versions.\n\n3. **Auto.fun API Reference**: Document all available API endpoints, their parameters, return values, and limitations, with practical examples of integrating with the token tracking mechanism.\n\n4. **Mobile Development Considerations**: Create documentation addressing the technical challenges of mobile development with ElizaOS, including NodeJS dependencies and platform limitations.\n\n### Documents to Update:\n1. **Character File Documentation**: Enhance existing documentation to clarify knowledge integration, particularly explaining path references relative to characters/knowledge directory.\n\n2. **Twitter Agent Guide for V2**: Update the current Twitter integration guide to properly work with the v2-develop branch.\n\n3. **Database Setup Tutorial**: Expand database documentation with step-by-step Supabase integration instructions, including SQL commands and entity relationship management.\n\n### Tutorial Content:\n1. **Custom Plugin Development Workflow**: Create an end-to-end tutorial for developing custom plugins in v2, covering both local development and NPM package approaches.\n\n2. **Agent Workflow Visualization**: Develop tutorial content for the DAG viewer tool, teaching users to visualize and design complex agent workflows.\n\nBy addressing these documentation gaps, ElizaOS can significantly improve developer experience and user adoption, especially during the critical v1 to v2 migration period.",
  "source_references": [
    "1. Plugin development confusion:\n\"For custom Discord plugin functionality, should I extend it in index.ts while NPXing the plugin or modify the entire plugin code?\" with the answer \"Extending the base plugin in your own index.ts is usually cleaner than modifying the core code\" (Ruby)\n\n2. V1 vs V2 differences:\n\"What's the difference between Eliza and Elizav2?\" with answer \"Yes like day and night\" (xell0x)\n\"Main branch is 0.x (v1) and v2-develop is 1.x (v2)\" (cjft)\n\"Clarification about Farcaster plugin versions, with distinction between `plugin-twitter` (for v2/v1.x) and `client-twitter` (for v0.x)\"\n\n3. Character file and knowledge integration:\n\"Discussions focused on how to properly reference knowledge files in character.json\" and \"Paths are relative to the characters/knowledge directory\"\n\"RAG (Retrieval-Augmented Generation) knowledge works by setting \"ragknowledge: true\" in character settings\"\n\n4. API documentation gaps:\n\"Users examined the auto.fun repository code and identified that while some API endpoints exist (for swaps, token retrieval, search, and charts), they lack functionality for creating new coins or executing swaps.\"\n\"Fix getToken API endpoint which is broken with a TODO comment\" (Mentioned by: DorianD)\n\n5. Database configuration issues:\n\"cjft shared SQL commands for creating agent and room tables with proper references for Supabase integration.\"\n\"Entity relationship constraints in SQL causing errors when entities aren't properly stored\"\n\n6. Requested documentation:\n\"Create guide for extending core plugins in v2\" (Mentioned by: cjft)\n\"Document differences between v1 and v2 plugin systems\" (Mentioned by: cjft)\n\"Document steps for creating tokens through auto.fun\" (Mentioned by: DorianD)\n\"Update Twitter agent guide for v2 - current guide doesn't work properly with v2-develop branch\" (mentioned by der.jogi)"
  ]
}