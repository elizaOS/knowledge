{
  "server": "elizaOS Development",
  "title": "elizaOS Development Discord - 2025-05-27",
  "date": 1748304000,
  "stats": {
    "totalMessages": 60,
    "totalUsers": 19
  },
  "categories": [
    {
      "channelId": "1320246527268098048",
      "channelName": "ðŸ’¬ï½œgeneral",
      "summary": "# Discord Chat Analysis\n\n## 1. Summary\nThe chat primarily revolves around ElizaOS V2, which appears to be launching soon with a Friday goal mentioned. Community members discussed various applications of ElizaOS, particularly for building AI agents. There was specific interest in using ElizaOS for regulatory compliance auditing through RAG (Retrieval-Augmented Generation). A community manager mentioned that V2 is a complete rework of the system and recommended users to try it out. A GitHub repository link for a knowledge plugin was shared. There were also brief discussions about ELIZA's capabilities for pronoun substitution in natural language processing. Some users experienced login issues with Twitter integration. The conversation indicates ElizaOS V2 will have improved RAG pipeline functionality compared to V1, making it easier to work with for creating specialized AI agents.\n\n## 2. FAQ\nQ: Is there any documentation for V2 or some sort of guide of using Custom Local plugins in your agent? (asked by starlord) A: Unanswered\nQ: Hello dears anybody nows if possible build a chatbot on WhatsApp? (asked by Charles) A: Unanswered\nQ: Does ELIZA handle pronoun substitution, and what limitations does it impose on natural language understanding? (asked by Seal) A: It performs simple string-based pronoun transformations, such as swapping \"I\" with \"you\", \"my\" with \"your\", \"am\" with \"are\", etc. (answered by 0x@jonathan)\nQ: Is this a chatbot? (asked by Eric chen) A: Unanswered\nQ: What if I used RAG to instruct a regulatory compliance agent to use existing policy to audit all project requirements and code for deviations - would that work? (asked by Rabbidfly) A: Docs compliance would be a great idea yes, eliza can do it (answered by cjft)\nQ: Is the current v2 version easier to work with? (asked by Rabbidfly) A: v2 is full rework yes deff try out new v2 (answered by cjft)\nQ: Have we published .cursor\\rules useful for ElizaOS? (asked by Rabbidfly) A: Nah, should look into it (answered by shaw)\nQ: Suddenly cant log in to twitter. Is there someone with same issue? (asked by Bernard) A: Try logging in from that machine with a browser if you can, you might need to do the turnstile click (answered by shaw)\n\n## 3. Help Interactions\nHelper: cjft | Helpee: Rabbidfly | Context: Asking if RAG could be used for regulatory compliance auditing | Resolution: Confirmed it's a good use case for ElizaOS\nHelper: cjft | Helpee: Rabbidfly | Context: Asking about V2's RAG pipeline improvements | Resolution: Confirmed V2 is a full rework and shared a GitHub repository link\nHelper: shaw | Helpee: Bernard | Context: Twitter login issues with ElizaOS | Resolution: Suggested trying to log in via browser and complete turnstile verification\nHelper: 0x@jonathan | Helpee: Seal | Context: Question about ELIZA's pronoun substitution capabilities | Resolution: Explained ELIZA's string-based pronoun transformation approach\n\n## 4. Action Items\nType: Technical | Description: Launch V2 by Friday | Mentioned By: cjft\nType: Technical | Description: Implement groups functionality in V2 | Mentioned By: cjft\nType: Technical | Description: Create an OSFI agent for cybersecurity | Mentioned By: Rabbidfly\nType: Technical | Description: Develop community manager AI agent for V2 | Mentioned By: xell0x\nType: Documentation | Description: Create documentation for V2 and Custom Local plugins | Mentioned By: starlord\nType: Documentation | Description: Publish .cursor\\rules useful for ElizaOS | Mentioned By: Rabbidfly\nType: Feature | Description: Improve RAG pipeline in V2 compared to V1 | Mentioned By: Rabbidfly\nType: Feature | Description: Develop regulatory compliance agent using RAG | Mentioned By: Rabbidfly",
      "messageCount": 39,
      "userCount": 15
    },
    {
      "channelId": "1324089429727514674",
      "channelName": "ðŸ¤–ï½œagent-dev-school",
      "summary": "# Discord Chat Analysis\n\n## 1. Summary\nThe conversation focuses on integrating market data from Dune dashboards into an agent system. Ruby provides guidance to Scooter on how to structure this integration through a multi-step approach: (1) setting up a scheduled task using a browser plugin to fetch dashboard data periodically, (2) storing the data in a database (initially suggesting SQLite, then pivoting to Neon when learning Scooter already uses it), and (3) creating a custom provider that checks if queries mention market data before pulling relevant context. Ruby provides specific code examples for creating a market_data table with timestamp and JSONB columns, implementing a marketDataProvider that checks if messages contain market-related terms, registering the provider with the runtime, and setting up a scheduled task to fetch data from Dune dashboards using browser automation. The implementation allows the agent to access market data as context when responding to relevant queries in a Discord server.\n\n## 2. FAQ\nQ: I want my agent to fetch market data from a Dune dashboard and use it as context for responses. What is the best way to structure that? (asked by Scooter) A: Set up a scheduled task using the browser plugin to fetch dashboard data periodically, store it in a database, and create a custom provider to pull relevant context before generating responses. (answered by Ruby)\nQ: Should I add a table and store data in my Neon database instead of SQLite locally? (asked by Scooter) A: Definitely use Neon since you're already set up there. Create a market_data table with timestamp and JSON columns to store dashboard metrics. (answered by Ruby)\n\n## 3. Help Interactions\nHelper: Ruby | Helpee: Scooter | Context: Integrating Dune dashboard data into an agent system | Resolution: Provided complete code examples for database schema, custom provider implementation, and scheduled task setup\nHelper: Ruby | Helpee: Dego â›“ | Context: Error with local LLM setup showing \"Service text_generation not found\" | Resolution: Unanswered\n\n## 4. Action Items\nTechnical: Create a market_data table in Neon database with timestamp and JSONB columns | Description: Implement schema for storing dashboard metrics | Mentioned By: Ruby\nTechnical: Implement marketDataProvider to check for market-related terms in messages | Description: Create provider that retrieves relevant market data from database | Mentioned By: Ruby\nTechnical: Set up scheduled task to fetch Dune dashboard data | Description: Use browser plugin to automate data extraction and storage | Mentioned By: Ruby\nTechnical: Register the market data provider with runtime | Description: Integrate provider into agent's response generation pipeline | Mentioned By: Ruby\nDocumentation: Customize metric extraction for specific Dune dashboard | Description: Adapt the browser automation code for particular dashboard elements | Mentioned By: Ruby",
      "messageCount": 11,
      "userCount": 3
    },
    {
      "channelId": "1323745969115893780",
      "channelName": "ðŸ“¥ï½œpull-requests",
      "summary": "# Analysis of ðŸ“¥ï½œpull-requests Channel\n\n## 1. Summary\nThe chat discusses three pull requests to the elizaOS/eliza repository. PR #4797 introduces an additional workflow that automatically runs four times daily using a command installed from npmjs. This workflow helps catch issues that can't be detected with the CLI built from the monorepo. PR #4798 addresses a significant API design change for the GET rooms endpoint. Previously, this endpoint returned multiple batches of rooms with duplicate entries that differed only by agentId for groups, making the response complex. The new implementation simplifies this by including agents inside a participants array within each Room object, resulting in a single Room being returned instead of duplicates. This fix resolves an issue where groups weren't populating in the UI because agentId and character were null. The PR also adds missing API functionality for group/memories/serverId. Despite these improvements, there's still an outstanding issue with getting responses from groups.\n\n## 2. FAQ\nQ: Are we doing this because it spams too much? (asked by cjft) A: No! It's additional workflow to auto run 4 times a day on command installed from npmjs. Some stuff can't be caught with CLI built from monorepo. (answered by sayonara)\n\n## 3. Help Interactions\nHelper: cjft | Helpee: Channel members | Context: Explaining the GET rooms API change and its impact | Resolution: Clarified that the new implementation fixes group display in UI by including agents in participants array instead of using separate agentId\n\n## 4. Action Items\nTechnical: Fix remaining issue with getting responses from groups | Description: Groups are displaying but not responding | Mentioned By: cjft\nTechnical: Implement simplified Room structure with participants array | Description: Replace agentId with agents in participants array | Mentioned By: cjft\nTechnical: Add missing group/memories/serverId API | Description: Implement missing API endpoints | Mentioned By: cjft\nTechnical: Implement additional workflow to run 4 times daily | Description: Auto-run command installed from npmjs to catch issues | Mentioned By: sayonara",
      "messageCount": 10,
      "userCount": 2
    }
  ]
}