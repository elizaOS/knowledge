name: Sync Generated Content to HackMD

on:
  workflow_run:
    # Triggers after these workflows succeed
    # Keep both triggers for now, as context map might still be needed elsewhere
    workflows: ["Generate Daily Council Context", "Generate Daily Context Map"]
    types:
      - completed

permissions:
  contents: read # Needed to checkout the specific commit

jobs:
  sync_to_hackmd:
    name: Upload Content to HackMD
    if: github.event.workflow_run.conclusion == 'success' # Only run on success
    runs-on: ubuntu-latest

    steps:
      # Checkout the SPECIFIC commit associated with the triggering workflow run
      - name: Checkout specific commit from triggering workflow
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      # Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install script dependencies (requests is needed by hackmd.py)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests python-dotenv # Assuming hackmd.py needs these

      # Find and Upload Markdown generated by the trigger workflow
      - name: Find and Upload Markdown Content
        id: find_and_upload
        env:
          HACKMD_API_TOKEN: ${{ secrets.HACKMD_API_TOKEN }} # Needs repo secret
        run: |
          TRIGGER_WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          TODAY_DATE=$(date +%Y-%m-%d) # Or get date from triggering context if needed
          UPLOAD_FILE=""
          CONTENT_TYPE=""

          echo "Triggering workflow: $TRIGGER_WORKFLOW_NAME"

          if [[ "$TRIGGER_WORKFLOW_NAME" == "Generate Daily Council Context" ]]; then
            # Look for the council Markdown file generated by generate_council_context.py
            FILE_PATH="hackmd/council/$TODAY_DATE.md"
            if [[ -f "$FILE_PATH" ]]; then
              UPLOAD_FILE="$FILE_PATH"
              CONTENT_TYPE="council"
              echo "Found council markdown: $UPLOAD_FILE"
            else
              echo "::warning::Council markdown file not found at $FILE_PATH"
              # Decide if this is an error or just needs skipping
              # exit 1 # Uncomment if missing file is critical failure
            fi
          elif [[ "$TRIGGER_WORKFLOW_NAME" == "Generate Daily Context Map" ]]; then
            # Handle Context Map if needed - currently no MD output defined for it
            # Maybe upload the JSON as before? Or create MD?
            # For now, just log that it triggered.
            echo "Handling trigger from Generate Daily Context Map (currently no specific upload action)."
            # Example: If you want to upload the JSON as MD like before:
            # JSON_PATH="the-council/$TODAY_DATE.json"
            # TEMP_MD="./temp_context_map.md"
            # if [[ -f "$JSON_PATH" ]]; then
            #   echo "# Context Map - $TODAY_DATE" > "$TEMP_MD"
            #   echo "" >> "$TEMP_MD"
            #   echo '```json' >> "$TEMP_MD"
            #   cat "$JSON_PATH" >> "$TEMP_MD"
            #   echo '' >> "$TEMP_MD"; echo '```' >> "$TEMP_MD"
            #   UPLOAD_FILE="$TEMP_MD"
            #   CONTENT_TYPE="dev" # As per previous logic
            # else
            #   echo "::warning::Context map JSON file not found at $JSON_PATH"
            # fi
          else
            echo "::error::Unknown triggering workflow name: $TRIGGER_WORKFLOW_NAME"
            exit 1
          fi

          # Run upload if a file was identified
          if [[ -n "$UPLOAD_FILE" ]]; then
            echo "Uploading $UPLOAD_FILE with type $CONTENT_TYPE"
            # Assuming hackmd.py exists and handles upload to correct book based on type
            python3 scripts/hackmd.py upload --file "$UPLOAD_FILE" --type "$CONTENT_TYPE"
            # Script should handle its own logging/error exit
          else
            echo "No file identified for upload for trigger '$TRIGGER_WORKFLOW_NAME'."
          fi
        shell: bash 