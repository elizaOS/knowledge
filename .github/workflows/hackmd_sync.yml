name: Sync Generated Content to HackMD

on:
  workflow_run:
    # Triggers after the main sync workflow succeeds
    workflows: ["Sync Knowledge Sources"]
    types:
      - completed

permissions:
  contents: read # Needed to checkout the specific commit

jobs:
  sync_to_hackmd:
    name: Upload Summaries to HackMD
    if: github.event.workflow_run.conclusion == 'success' # Only run on success
    runs-on: ubuntu-latest

    steps:
      # Checkout the SPECIFIC commit associated with the triggering workflow run
      - name: Checkout specific commit from triggering workflow
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      # Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install script dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests python-dotenv

      # Define the files to upload and their types/target books
      - name: Upload specified markdown summaries
        env:
          HACKMD_API_TOKEN: ${{ secrets.HACKMD_API_TOKEN }} # Needs repo secret
        run: |
          # Define files and their corresponding types
          declare -A files_to_upload
          # Community Book targets
          files_to_upload["hackmd/weekly_newsletter.md"]="newsletter"
          files_to_upload["hackmd/autofun_prompt.md"]="strategic" # Mapping prompt name to type
          files_to_upload["hackmd/elizaos_prompt.md"]="strategic" # Mapping prompt name to type
          files_to_upload["hackmd/discord_announcement.md"]="announcement"
          # Feedback/Planning Book targets
          files_to_upload["hackmd/user_feedback.md"]="feedback"
          files_to_upload["hackmd/workload_planning.md"]="dev"
          files_to_upload["hackmd/documentation_gap.md"]="dev"

          echo "Checking for and uploading specified markdown files..."
          exit_code=0

          for file_path in "${!files_to_upload[@]}"; do
            content_type=${files_to_upload[$file_path]}
            echo "- Checking for $file_path (Type: $content_type)"

            if [[ -f "$file_path" ]]; then
              echo "  File found. Uploading..."
              python3 scripts/hackmd.py upload --file "$file_path" --type "$content_type"
              upload_status=$?
              if [[ $upload_status -ne 0 ]]; then
                echo "::error::Failed to upload $file_path (Type: $content_type)"
                exit_code=1 # Mark overall failure if any upload fails
              else
                echo "  Successfully uploaded $file_path"
              fi
            else
              echo "  File not found at commit ${{ github.event.workflow_run.head_sha }}. Skipping upload."
              # Decide if missing file should cause failure (currently it doesn't)
            fi
          done

          # Exit with non-zero code if any upload failed
          if [[ $exit_code -ne 0 ]]; then
             echo "::error::One or more HackMD uploads failed."
             exit $exit_code
          fi
          echo "Finished processing specified files."

        shell: bash 