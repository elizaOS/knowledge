name: Sync Generated Content to HackMD

on:
  workflow_run:
    # Triggers after these workflows succeed
    workflows: ["Generate Daily Council Context", "Generate Daily Context Map"]
    types:
      - completed

permissions:
  actions: read # Needed to download artifacts
  contents: read # Needed to checkout the code

jobs:
  sync_to_hackmd:
    name: Upload Content to HackMD
    if: github.event.workflow_run.conclusion == 'success' # Only run on success
    runs-on: ubuntu-latest

    steps:
      # Get the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install script dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests python-dotenv

      # Download the output from the trigger workflow
      - name: Download generated content artifact
        uses: actions/download-artifact@v4
        with:
          name: generated-content # Assumed artifact name
          path: ./generated_content # Download location
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      # Extract file path and type from metadata.json (REQUIRED)
      - name: Read metadata and determine file path/type
        id: metadata
        run: |
          METADATA_FILE="./generated_content/metadata.json"
          if [[ ! -f "$METADATA_FILE" ]]; then
            echo "::error::Metadata file not found at $METADATA_FILE"
            exit 1
          fi
          echo "Metadata file found: $METADATA_FILE"
          # Use jq with -e to exit non-zero if key is null or missing
          # Extract values, fail step if keys missing/null
          FILE_PATH=$(jq -e -r '.file' "$METADATA_FILE")
          CONTENT_TYPE=$(jq -e -r '.type' "$METADATA_FILE")

          # Construct full path relative to workspace root
          FULL_FILE_PATH="./generated_content/$FILE_PATH"
          echo "Content file path: $FULL_FILE_PATH"
          echo "Content type: $CONTENT_TYPE"

          # Set outputs for the next step
          echo "file_path=$FULL_FILE_PATH" >> $GITHUB_OUTPUT
          echo "content_type=$CONTENT_TYPE" >> $GITHUB_OUTPUT
        shell: bash

      # Run the actual upload script (REQUIRED)
      - name: Run HackMD Upload Script
        # Note: No 'if' needed here; previous step fails job if metadata invalid
        env:
          HACKMD_API_TOKEN: ${{ secrets.HACKMD_API_TOKEN }} # Needs repo secret
        run: |
          echo "Running upload script..."
          python3 scripts/hackmd.py upload --file "${{ steps.metadata.outputs.file_path }}" --type "${{ steps.metadata.outputs.content_type }}"
          # Script handles its own logging and exits non-zero on failure 