name: Sync Generated Content to HackMD

on:
  workflow_run:
    # Triggers after the main sync workflow succeeds
    workflows: ["Sync Knowledge Sources"]
    types:
      - completed

permissions:
  contents: read # Needed to checkout the specific commit

jobs:
  sync_to_hackmd:
    name: Upload Summaries to HackMD
    if: github.event.workflow_run.conclusion == 'success' # Only run on success
    runs-on: ubuntu-latest

    steps:
      # Checkout the SPECIFIC commit associated with the triggering workflow run
      - name: Checkout specific commit from triggering workflow
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      # Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install script dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests python-dotenv

      # Find and upload markdown summaries generated by the trigger
      - name: Find and Upload Markdown Summaries
        env:
          HACKMD_API_TOKEN: ${{ secrets.HACKMD_API_TOKEN }} # Needs repo secret
        run: |
          # Define mapping from BASE filename part to content type
          declare -A base_name_to_type
          base_name_to_type["weekly_newsletter"]="newsletter"
          base_name_to_type["autofun_prompt"]="strategic"
          base_name_to_type["elizaos_prompt"]="strategic"
          base_name_to_type["discord_announcement"]="announcement"
          base_name_to_type["user_feedback"]="feedback"
          base_name_to_type["workload_planning"]="dev"
          base_name_to_type["documentation_gap"]="dev"

          echo "Looking for markdown files in hackmd/ directory at commit ${{ github.event.workflow_run.head_sha }}..."
          exit_code=0
          found_count=0

          # Use find to get all .md files in hackmd/, handle spaces/newlines
          while IFS= read -r file_path; do
            filename=$(basename "$file_path")
            echo "- Found file: $filename"

            # Extract base name after YYYY-MM-DD-
            # Regex: Match YYYY-MM-DD- followed by capture group (.+) until .md
            if [[ "$filename" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}-(.+)\.md$ ]]; then
              base_name="${BASH_REMATCH[1]}"
              echo "  Extracted base name: $base_name"

              # Check if this base name is in our map
              if [[ -v base_name_to_type[$base_name] ]]; then
                content_type=${base_name_to_type[$base_name]}
                echo "  Type mapping found: $content_type. Uploading..."
                found_count=$((found_count + 1))

                python3 scripts/hackmd.py upload --file "$file_path" --type "$content_type"
                upload_status=$?
                if [[ $upload_status -ne 0 ]]; then
                  echo "::error::Failed to upload $file_path (Type: $content_type)"
                  exit_code=1 # Mark overall failure
                else
                  echo "  Successfully uploaded $file_path"
                fi
              else
                echo "  Base name '$base_name' not configured for upload. Skipping."
              fi
            else
              echo "  Filename '$filename' does not match expected YYYY-MM-DD-basename.md format. Skipping."
            fi
          done < <(find hackmd -maxdepth 1 -type f -name '????-??-??-*.md' -print0 | xargs -0)
          # Using find with xargs -0 to handle potential filenames with spaces etc.

          # Report outcome
          if [[ $found_count -eq 0 ]]; then
             echo "No markdown files matching the pattern YYYY-MM-DD-*.md found in hackmd/ for upload."
          fi
          if [[ $exit_code -ne 0 ]]; then
             echo "::error::One or more HackMD uploads failed."
             exit $exit_code
          fi
          echo "Finished processing files in hackmd/ directory."

        shell: bash 