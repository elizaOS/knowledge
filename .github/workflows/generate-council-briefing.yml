name: Generate Council Briefing

on:
  schedule:
    # Runs daily at 2:00 UTC (after sync and tweet generation)
    - cron: '0 2 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  generate-council-context:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Need permission to write back to the repo

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python version

      - name: Install dependencies (if any, e.g., requests)
        run: |
          python -m pip install --upgrade pip
          # Assuming requests is needed by generate_council_context.py
          pip install requests
          # Add other dependencies if needed

      - name: Set execute permission for scripts
        run: |
          chmod +x scripts/generate_council_context.py
          chmod +x scripts/aggregate-sources.py

      - name: Generate Daily Context Map (Input for Council)
        id: aggregate_step
        run: |
          # Run the script for today's date (defaults to current)
          # Output will be the-council/YYYY-MM-DD.json
          ./scripts/aggregate-sources.py
          echo "aggregated_json_file=the-council/aggregated/$(date +%Y-%m-%d).json" >> $GITHUB_OUTPUT

      - name: Run council context generation script
        id: council_gen
        env:
          # Pass API key securely
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          # Pass other context env vars if needed (using secrets or vars)
          # COUNCIL_MONTHLY_GOAL: ${{ vars.COUNCIL_MONTHLY_GOAL_VAR || 'Default Goal' }}
        run: |
          INPUT_FILE="${{ steps.aggregate_step.outputs.aggregated_json_file }}"
          OUTPUT_FILE="the-council/council_briefing/$(date +%Y-%m-%d).json"
          if [ -f "$INPUT_FILE" ]; then
            ./scripts/generate_council_context.py "$INPUT_FILE" "$OUTPUT_FILE"
            # Set output filename for next step
            echo "council_json_file=$OUTPUT_FILE" >> $GITHUB_OUTPUT
          else
            echo "Input file $INPUT_FILE not found, skipping council context generation."
            exit 1 # Or handle appropriately
          fi

      - name: Create council_context_daily.json permalink
        if: steps.council_gen.outputs.council_json_file
        run: cp "${{ steps.council_gen.outputs.council_json_file }}" the-council/council_briefing/daily.json

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'

      - name: Commit and push if changes
        run: |
          # Define the files to check and add
          DAILY_COUNCIL_FILE="the-council/council_briefing/$(date +%Y-%m-%d).json"
          PERMALINK_COUNCIL_FILE="the-council/council_briefing/daily.json"
          DAILY_MARKDOWN_FILE="hackmd/council/$(date +%Y-%m-%d).md" # Added Markdown file

          # Check if the specific daily file or permalink file was created/modified
          # Use git status --porcelain to reliably detect changes
          # Include markdown file in the status check
          if [[ `git status --porcelain "$DAILY_COUNCIL_FILE" "$PERMALINK_COUNCIL_FILE" "$DAILY_MARKDOWN_FILE"` ]]; then
            echo "Changes detected in council context files."
            # Add markdown file to the commit
            git add "$DAILY_COUNCIL_FILE" "$PERMALINK_COUNCIL_FILE" "$DAILY_MARKDOWN_FILE"
            git commit -m "Automated: Generate council context for $(date +%Y-%m-%d) to council_briefing/"
            # Use PAT for push if needed, otherwise default token might work with correct permissions
            # git push "https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git"
            git push
          else
            echo "No changes to commit for council context."
          fi 